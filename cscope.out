cscope 15 $HOME/Documents/fdf               0000495894
	@c_maths/c_maths.h

13 #i‚de‡
C_MATHS_H


14 
	#C_MATHS_H


	)

15 
	~"lib·.h
"

16 
	~<m©h.h
>

17 
	~<°dio.h
>

18 
	#TRIGO_FACT
 3

	)

19 
	#TRIGO_ACCURACY
 (
TRIGO_FACT
 * 360)

	)

21 
	#MIN
(
A
, 
B
Ë((AË< (BË? (AË: (B))

	)

22 
	#MAX
(
A
, 
B
Ë((AË< (BË? (BË: (A))

	)

24 
	ss_m©rix


26 *
	mm
;

27 
	mx
;

28 
	my
;

29 } 
	tt_m©rix
;

31 
	ss_roŸs


33 
	mx1
;

34 
	mx2
;

35 
	mx3
;

36 
	mx4
;

37 
	msize
;

38 
	mis_ªÆ
;

39 } 
	tt_roŸs
;

41 
	ss_c€fs


43 
	ma
;

44 
	mb
;

45 
	mc
;

46 
	md
;

47 
	me
;

48 } 
	tt_c€fs
;

50 
t_m©rix
 *
ve˘_√w_vîtfd
(
a
, 
b
, 
c
);

51 
t_m©rix
 *
ve˘_√w_vîtfi
(
a
, 
b
, 
c
);

52 
t_m©rix
 *
ve˘_√w_vît
(*
èb
, 
size
);

53 
t_m©rix
 *
ve˘_√w_h‹z
(*
èb
, 
size
);

54 
t_m©rix
 *
ve˘_√w_vîti
(*
èb
, 
size
);

55 
t_m©rix
 *
ve˘_√w_h‹zi
(*
èb
, 
size
);

57 
m©rix_di•œy
(
t_m©rix
 *
a
);

58 
t_m©rix
 *
m©rix_öô
(
x
, 
y
);

59 
t_m©rix
 *
ve˘_√w_h‹zi
(*
èb
, 
size
);

60 
t_m©rix
 *
ve˘_√w_vîti
(*
èb
, 
size
);

61 
t_m©rix
 *
ve˘_√w_h‹z
(*
èb
, 
size
);

62 
t_m©rix
 *
ve˘_√w_vît
(*
èb
, 
size
);

63 
t_m©rix
 *
ve˘_√w_vîtfd
(
a
, 
b
, 
c
);

65 
t_m©rix
 *
m©rix_add
—_m©rix *
a
,Å_m©rix *
b
);

66 
t_m©rix
 *
m©rix_add_ö
—_m©rix *
a
,Å_m©rix *
b
,Å_m©rix *
c
);

67 
t_m©rix
 *
m©rix_sub
—_m©rix *
a
,Å_m©rix *
b
);

68 
m©rix_sub_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
);

69 
t_m©rix
 *
m©rix_¥odu˘
—_m©rix *
a
,Å_m©rix *
b
);

70 
m©rix_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
);

71 
ve˘‹_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
ªsu…
);

73 
t_m©rix
 *
m©rix_sˇœr_¥odu˘
—_m©rix *
a
, 
d
);

74 
t_m©rix
 *
m©rix_sˇœr_¥odu˘_√w
—_m©rix *
a
, 
d
);

75 
m©rix_dë
(
t_m©rix
 *
a
);

76 
t_m©rix
 *
m©rix_å™•o£
—_m©rix *
a
,Å_m©rix *
b
);

77 
m©rix_n‹me
(
t_m©rix
 *
a
);

78 
t_m©rix
 *
ve˘‹_¥odu˘
—_m©rix *
a
,Å_m©rix *
b
);

79 
t_m©rix
 *
ve˘‹_¥odu˘_s
—_m©rix *
a
,Å_m©rix *
b
, 
x
, 
y
);

80 
ve˘‹_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
ªsu…
);

81 
m©rix_dŸ_¥odu˘
(
t_m©rix
 *
a
,Å_m©rix *
b
);

83 
t_m©rix
 *
m©rix_c›y
—_m©rix *
§c
);

84 
‰ì_m©rix
(
t_m©rix
 *
m©
);

85 
m©rix_‰ì
(
t_m©rix
 **
m©
);

87 
·_cos
(
deg
);

88 
·_sö
(
deg
);

90 
t_roŸs
 
eq_sﬁve_2nd
(
t_c€fs
 
c€fs
);

91 
t_roŸs
 
eq_sﬁve_3rd
(
t_c€fs
 
c€fs
);

92 
t_roŸs
 
eq_sﬁve_4th
(
t_c€fs
 
c€fs
);

94 
t_m©rix
 *
m©rix_buf„r
—_m©rix *
m©
);

95 
m©rix_put_ö
(
a
, 
b
, 
c
, 
d
);

96 
t_m©rix
 *
m©rix_put_ö_√w
(
a
, 
b
, 
c
, 
d
);

98 
t_m©rix
 *
£t_rŸ©e
(
thëx
, 
thëy
, 
thëz
);

99 
t_m©rix
 *
£t_å™¶©e
(
dx
, 
dy
, 
dz
);

100 
t_m©rix
 *
£t_sˇÀ
(
sx
, 
sy
, 
sz
);

	@c_maths/cos.c

13 
	~"c_m©hs.h
"

15 
	$·_cos
(
deg
)

17 
èb
[
TRIGO_ACCURACY
];

18 
öô
 = 1;

19 
i
;

21 i‡(
öô
)

23 
i
 = 0;

24 
öô
 = 0;

25 
i
 < 
TRIGO_ACCURACY
)

27 
èb
[
i
] = 
	`cos
(((()iË/ (()
TRIGO_ACCURACY
)Ë* 2 * 
M_PI
);

28 
i
++;

31  (
èb
[(()((
deg
 / 360.0Ë* 
TRIGO_ACCURACY
) % TRIGO_ACCURACY)]);

32 
	}
}

	@c_maths/eq_solve_2nd.c

13 
	~"c_m©hs.h
"

14 
	~<m©h.h
>

16 
t_roŸs
 
	$eq_sﬁve_2nd
(
t_c€fs
 
c€fs
)

18 
dñè
;

19 
t_roŸs
 
r
;

21 
r
.
x3
 = 0;

22 
r
.
x4
 = 0;

23 
r
.
is_ªÆ
 = 1;

24 
dñè
 = 
c€fs
.
b
 * c€fs.b - 4 * c€fs.
a
 * c€fs.
c
;

25 i‡(
dñè
 > 0)

27 
r
.
x1
 = (-
c€fs
.
b
 - 
	`sqπ
(
dñè
)Ë/ (2 * c€fs.
a
);

28 
r
.
x2
 = (-
c€fs
.
b
 + 
	`sqπ
(
dñè
)Ë/ (2 * c€fs.
a
);

30 i‡(
dñè
 == 0)

32 
r
.
x1
 = (-
c€fs
.
b
Ë/ (2 * c€fs.
a
);

33 
r
.
x2
 = 0;

35 i‡(
dñè
 < 0)

36 
r
.
is_ªÆ
 = 0;

37  (
r
);

38 
	}
}

	@c_maths/eq_solve_4th.c

13 
	~"c_m©hs.h
"

14 
	~<m©h.h
>

16 
t_roŸs
 
	$eq_sﬁve_2nd
(
t_c€fs
 
c€fs
)

18 
dñè
;

19 
t_roŸs
 
r
;

21 
r
.
x3
 = 0;

22 
r
.
x4
 = 0;

23 
r
.
is_ªÆ
 = 1;

24 
dñè
 = 
c€fs
.
b
 * c€fs.b - 4 * c€fs.
a
 * c€fs.
c
;

25 i‡(
dñè
 > 0)

27 
r
.
x1
 = (-
c€fs
.
b
 - 
	`sqπ
(
dñè
)Ë/ (2 * c€fs.
a
);

28 
r
.
x2
 = (-
c€fs
.
b
 + 
	`sqπ
(
dñè
)Ë/ (2 * c€fs.
a
);

30 i‡(
dñè
 == 0)

32 
r
.
x1
 = (-
c€fs
.
b
Ë/ (2 * c€fs.
a
);

33 
r
.
x2
 = 0;

35 i‡(
dñè
 < 0)

36 
r
.
is_ªÆ
 = 0;

37  (
r
);

38 
	}
}

	@c_maths/free_mat.c

13 
	~"c_m©hs.h
"

15 
	$‰ì_m©rix
(
t_m©rix
 *
m©
)

17 i‡(
m©
)

19 i‡(
m©
->
m
)

20 
	`‰ì
(
m©
->
m
);

21 
	`‰ì
(
m©
);

24 
	}
}

26 
	$m©rix_‰ì
(
t_m©rix
 **
m©
)

28 i‡(
m©
 && *mat)

30 i‡((*
m©
)->
m
)

32 
	`‰ì
((*
m©
)->
m
);

33 (*
m©
)->
m
 = 
NULL
;

35 
	`‰ì
(*
m©
);

36 *
m©
 = 
NULL
;

39 
	}
}

	@c_maths/libft.h

13 #i‚de‡
LIBFT_H


14 
	#LIBFT_H


	)

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	#ABS
(
x
Ë((xË< 0 ? -(xË: (x))

	)

19 
	ss_li°


21 *
	mc⁄ã¡
;

22 
size_t
 
	mc⁄ã¡_size
;

23 
s_li°
 *
	m√xt
;

24 } 
	tt_li°
;

26 
·_©oi
(*
°r
);

27 
·_bzîo
(*
s
, 
size_t
 
n
);

28 
size_t
 
·_cou¡w‹ds
(c⁄° *
s
, 
c
);

29 
·_ißÕha
(
c
);

30 
·_isdigô
(
c
);

31 
·_iß um
(
c
);

32 
·_ißscii
(
c
);

33 
·_i•röt
(
c
);

34 *
·_ôﬂ
(
n
);

35 
t_li°
 *
·_l°√w
(c⁄° *
c⁄ã¡
, 
size_t
 
c⁄ã¡_size
);

36 *
·_memÆloc
(
size_t
 
size
);

37 *
·_memc˝y
(*
d°
, c⁄° *
§c
, 
c
, 
size_t
 
n
);

38 *
·_memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

39 
·_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

40 *
·_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

41 
·_memdñ
(**
≠
);

42 *
·_memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

43 *
·_mem£t
(*
b
, 
c
, 
size_t
 
Àn
);

44 
·_putch¨
(
c
);

45 
·_putch¨_fd
(
c
, 
fd
);

46 
·_puãndl
(*
°r
);

47 
·_puãndl_fd
(*
°r
, 
fd
);

48 
·_puäbr
(
n
);

49 
·_puäbr_fd
(
n
, 
fd
);

50 
·_put°r
(*
°r
);

51 
·_put°r_fd
(*
°r
, 
fd
);

52 *
·_°rˇt
(*
s1
, c⁄° *
s2
);

53 *
·_°rchr
(c⁄° *
s
, 
c
);

54 
size_t
 
·_°rchr_Àn
(c⁄° *
s
, 
c
);

55 *
·_°r˛r
(*
°r
);

56 
·_°rcmp
(*
s1
, *
s2
);

57 *
·_°r˝y
(*
d°
, c⁄° *
§c
);

58 
·_°rdñ
(**
as
);

59 *
·_°rdup
(*
°r
);

60 
·_°ªqu
(c⁄° *
s1
, c⁄° *
s2
);

61 
·_°rôî
(*
s
, (*
f
)(*));

62 
	`·_°rôîi
(*
s
, (*
f
)(, *));

63 *
	`·_°rjoö
(c⁄° *
s1
, c⁄° *
s2
);

64 
size_t
 
	`·_°æˇt
(*
s1
, c⁄° *
s2
, size_à
size
);

65 
size_t
 
	`·_°æí
(*
s
);

66 *
	`·_°rm≠
(c⁄° *
s
, (*
f
)());

67 *
	`·_°rm≠i
(c⁄° *
s
, (*
f
)(, ));

68 *
	`·_°∫ˇt
(*
s1
, c⁄° *
s2
, 
size_t
 
n
);

69 
	`·_°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

70 *
	`·_°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

71 
	`·_°∫equ
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

72 *
	`·_°∫ew
(
size_t
 
n
);

73 *
	`·_°∫°r
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

74 *
	`·_°ºchr
(c⁄° *
s
, 
c
);

75 
	`·_°ºchr_Àn
(c⁄° *
s
, 
c
);

76 **
	`·_°r•lô
(c⁄° *
s
, 
c
);

77 *
	`·_°r°r
(c⁄° *
s1
, c⁄° *
s2
);

78 *
	`·_°rsub
(c⁄° *
s
, 
°¨t
, 
size_t
 
Àn
);

79 *
	`·_°πrim
(c⁄° *
s
);

80 *
	`·_°πrim_ch¨
(c⁄° *
s
, 
c
);

81 
	`·_sw≠
(*
a
, *
b
);

82 **
	`·_èbmÆloc
(
size_t
 
nb°r
, size_à
¶í
);

83 
	`·_touµî
(
c
);

84 
	`·_tﬁowî
(
c
);

85 
	`is_öt_ovî_Êow
(*
numbî
);

	@c_maths/matrix_add.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$m©rix_add
(
t_m©rix
 *
a
,Å_m©rix *
b
)

17 
t_m©rix
 *
c
;

18 
i
;

19 
size
;

21 i‡(!
a
 || !
b
)

22  (
NULL
);

23 i‡(
a
->
x
 !
b
->x ||á->
y
 != b->y)

24  (
NULL
);

25 i‡((!(
c
 = 
	`m©rix_öô
(
a
->
x
,á->
y
))))

26  (
NULL
);

27 
c
->
x
 = 
a
->x;

28 
c
->
y
 = 
a
->y;

29 
size
 = 
c
->
x
 * c->
y
;

30 
i
 = 0;

31 
i
 < 
size
)

33 
c
->
m
[
i
] = 
a
->m[i] + 
b
->m[i];

34 
i
++;

36  (
c
);

37 
	}
}

39 
t_m©rix
 *
	$m©rix_add_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
)

41 
i
;

42 
size
;

44 i‡(!
a
 || !
b
 || !
c
)

45  (
NULL
);

46 i‡(
a
->
x
 !
b
->x ||á->
y
 != b->y)

47  (
NULL
);

48 
c
->
x
 = 
a
->x;

49 
c
->
y
 = 
a
->y;

50 
size
 = 
c
->
x
 * c->
y
;

51 
i
 = 0;

52 
i
 < 
size
)

54 
c
->
m
[
i
] = 
a
->m[i] + 
b
->m[i];

55 
i
++;

57  (
c
);

58 
	}
}

	@c_maths/matrix_buffer.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$m©rix_buf„r
(
t_m©rix
 *
m©
)

17 
t_m©rix
 *
buff
;

19 i‡(!
m©
)

20  (
buff
);

22  (
buff
 = 
m©
);

23 
	}
}

	@c_maths/matrix_copy.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$m©rix_c›y
(
t_m©rix
 *
§c
)

17 
t_m©rix
 *
c›y
;

18 
i
;

19 
size
;

21 
c›y
 = 
NULL
;

22 i‡(
§c
 && !(
c›y
 = 
	`m©rix_öô
(§c->
x
, src->
y
)))

23  (
NULL
);

24 
i
 = 0;

25 
c›y
->
x
 = 
§c
->x;

26 
c›y
->
y
 = 
§c
->y;

27 
size
 = 
§c
->
x
 * src->
y
;

28 
i
 < 
size
)

30 
c›y
->
m
[
i
] = 
§c
->m[i];

31 
i
++;

33  (
c›y
);

34 
	}
}

	@c_maths/matrix_det.c

13 
	~"c_m©hs.h
"

15 
	$m©rix_dë
(
t_m©rix
 *
a
)

17 
i
;

18 
j
;

19 
d
;

21 i‡(!
a
)

23 
d
 = 0;

24 
j
 = -1;

25 ++
j
 < 
a
->
y
)

27 
i
 = -1;

28 ++
i
 < 
a
->
x
)

30 
d
 +
a
->
m
[
i
 + 
j
 *á->
x
] * d;

33  (
d
);

34 
	}
}

	@c_maths/matrix_display.c

13 
	~<°dio.h
>

14 
	~"c_m©hs.h
"

16 
	$m©rix_di•œy
(
t_m©rix
 *
a
)

18 
i
;

19 
j
;

21 i‡(!
a
)

23 
i
 = 0;

24 
i
 < 
a
->
y
)

26 
j
 = 0;

27 
j
 < 
a
->
x
)

29 
	`·_puäbr
(
a
->
m
[
j
 +á->
x
 * 
i
]);

30 
	`·_putch¨
(' ');

31 
j
++;

33 
	`·_putch¨
('\n');

34 
i
++;

36 
	}
}

	@c_maths/matrix_dot_product.c

13 
	~"c_m©hs.h
"

15 
	$m©rix_dŸ_¥odu˘
(
t_m©rix
 *
a
,Å_m©rix *
b
)

17 
sum
;

18 
i
;

19 
size
;

21 i‡(
a
->
x
 *á->
y
 !
b
->y * b->x)

23 
i
 = 0;

24 
sum
 = 0;

25 
size
 = 
a
->
x
 *á->
y
;

26 
i
 < 
size
)

28 
sum
 +
a
->
m
[
i
] * 
b
->m[i];

29 
i
++;

31  (
sum
);

32 
	}
}

	@c_maths/matrix_init.c

13 
	~"c_m©hs.h
"

14 
	~<°dio.h
>

16 
t_m©rix
 *
	$m©rix_öô
(
x
, 
y
)

18 
t_m©rix
 *
m©
;

19 *
m
;

20 
i
;

21 
max
;

23 
max
 = 
x
 * 
y
;

24 i‡(!(
m©
 = 
	`mÆloc
((
t_m©rix
))))

25  (
NULL
);

26 i‡(!(
m
 = 
	`mÆloc
((Ë* 
max
)))

27  (
NULL
);

28 
m©
->
x
 = x;

29 
m©
->
y
 = y;

30 
m©
->
m
 = m;

31 
i
 = 0;

32 
i
 < 
max
)

34 
m©
->
m
[
i
] = 0;

35 
i
++;

37  (
m©
);

38 
	}
}

	@c_maths/matrix_inverse.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$m©rix_å™•o£
(
t_m©rix
 *
a
,Å_m©rix *
b
)

17 i‡(!
a
 || !
b
)

18  (
NULL
);

19  (
	`m©rix_öô
(1, 1));

20 
	}
}

	@c_maths/matrix_new.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$ve˘_√w_vîtfd
(
a
, 
b
, 
c
)

17 
t_m©rix
 *
ve˘
;

19 i‡(!(
ve˘
 = 
	`m©rix_öô
(1, 3)))

20  (
NULL
);

21 
ve˘
->
m
[0] = 
a
;

22 
ve˘
->
m
[1] = 
b
;

23 
ve˘
->
m
[2] = 
c
;

24  (
ve˘
);

25 
	}
}

27 
t_m©rix
 *
	$ve˘_√w_vîtfi
(
a
, 
b
, 
c
)

29 
t_m©rix
 *
ve˘
;

31 i‡(!(
ve˘
 = 
	`m©rix_öô
(1, 3)))

32  (
NULL
);

33 
ve˘
->
m
[0] = ()
a
;

34 
ve˘
->
m
[1] = ()
b
;

35 
ve˘
->
m
[2] = ()
c
;

36  (
ve˘
);

37 
	}
}

39 
t_m©rix
 *
	$ve˘_√w_vît
(*
èb
, 
size
)

41 
i
;

42 
t_m©rix
 *
ve˘
;

44 i‡(!(
ve˘
 = 
	`m©rix_öô
(1, 
size
)))

45  (
NULL
);

46 
i
 = 0;

47 
i
 < 
size
)

49 
ve˘
->
m
[
i
] = 
èb
[i];

50 
i
++;

52  (
ve˘
);

53 
	}
}

55 
t_m©rix
 *
	$ve˘_√w_h‹z
(*
èb
, 
size
)

57 
i
;

58 
t_m©rix
 *
ve˘
;

60 i‡(!(
ve˘
 = 
	`m©rix_öô
(
size
, 1)))

61  (
NULL
);

62 
i
 = 0;

63 
i
 < 
size
)

65 
ve˘
->
m
[
i
] = 
èb
[i];

66 
i
++;

68  (
ve˘
);

69 
	}
}

71 
t_m©rix
 *
	$ve˘_√w_vîti
(*
èb
, 
size
)

73 
i
;

74 
t_m©rix
 *
ve˘
;

76 i‡(!(
ve˘
 = 
	`m©rix_öô
(1, 
size
)))

77  (
NULL
);

78 
i
 = 0;

79 
i
 < 
size
)

81 
ve˘
->
m
[
i
] = ()
èb
[i];

82 
i
++;

84  (
ve˘
);

85 
	}
}

	@c_maths/matrix_product.c

13 
	~"c_m©hs.h
"

15 
	$m©rix_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
)

17 
i
;

18 
j
;

19 
k
;

21 i‡(!
a
 || !
b
)

23 i‡(
a
->
x
 !
b
->
y
)

25 
j
 = -1;

26 ++
j
 < 
c
->
y
)

28 
i
 = -1;

29 ++
i
 < 
c
->
x
)

31 
k
 = -1;

32 
c
->
m
[
i
 + (
j
 * c->
x
)] = 0;

33 ++
k
 < 
a
->
x
)

34 
c
->
m
[
i
 + (
j
 * c->
x
)] +=

35 
a
->
m
[
k
 + (
j
 *á->
x
)] * 
b
->m[
i
 + (k * b->x)];

38 
	}
}

40 
t_m©rix
 *
	$m©rix_¥odu˘
(
t_m©rix
 *
a
,Å_m©rix *
b
)

42 
i
;

43 
j
;

44 
k
;

45 
t_m©rix
 *
c
;

47 i‡(!
a
 || !
b
)

48  (
NULL
);

49 i‡(
a
->
x
 !
b
->
y
)

50  (
NULL
);

51 i‡(!(
c
 = 
	`m©rix_öô
(
b
->
x
, 
a
->
y
)))

52  (
NULL
);

53 
j
 = -1;

54 ++
j
 < 
c
->
y
)

56 
i
 = -1;

57 ++
i
 < 
c
->
x
)

59 
k
 = -1;

60 ++
k
 < 
a
->
x
)

61 
c
->
m
[
i
 + (
j
 * c->
x
)] +=

62 
a
->
m
[
k
 + (
j
 *á->
x
)] * 
b
->m[
i
 + (k * b->x)];

65  (
c
);

66 
	}
}

	@c_maths/matrix_put_in.c

13 
	~"c_m©hs.h
"

15 
	$m©rix_put_ö
(
a
, 
b
, 
c
, 
d
)

17 
t_m©rix
 *
m©
;

19 i‡(!(
m©
 = 
	`m©rix_buf„r
(
NULL
)))

21 
m©
->
m
[0] = 
a
;

22 
m©
->
m
[1] = 
b
;

23 
m©
->
m
[2] = 
c
;

24 
m©
->
m
[3] = 
d
;

25 
	}
}

27 
t_m©rix
 *
	$m©rix_put_ö_√w
(
a
, 
b
, 
c
, 
d
)

29 
t_m©rix
 *
m©
;

31 i‡(!(
m©
 = 
	`m©rix_öô
(1, 4)))

32  (
NULL
);

33 
m©
->
m
[0] = 
a
;

34 
m©
->
m
[1] = 
b
;

35 
m©
->
m
[2] = 
c
;

36 
m©
->
m
[3] = 
d
;

37  (
m©
);

38 
	}
}

	@c_maths/matrix_scalar_product.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$m©rix_sˇœr_¥odu˘
(
t_m©rix
 *
a
, 
d
)

17 
i
;

18 
size
;

20 i‡(!
a
)

21  (
NULL
);

22 
i
 = 0;

23 
size
 = 
a
->
x
 *á->
y
;

24 
i
 < 
size
)

26 
a
->
m
[
i
] *
d
;

27 
i
++;

29  (
a
);

30 
	}
}

32 
t_m©rix
 *
	$m©rix_sˇœr_¥odu˘_√w
(
t_m©rix
 *
a
, 
d
)

34 
i
;

35 
size
;

36 
t_m©rix
 *
ªsu…
;

38 i‡(!
a
 || !(
ªsu…
 = 
	`m©rix_öô
◊->
x
,á->
y
)))

39  (
NULL
);

40 
i
 = 0;

41 
size
 = 
a
->
x
 *á->
y
;

42 
i
 < 
size
)

44 
ªsu…
->
m
[
i
] = 
a
->m[i] * 
d
;

45 
i
++;

47  (
ªsu…
);

48 
	}
}

	@c_maths/matrix_sub.c

13 
	~"c_m©hs.h
"

15 
	$m©rix_sub_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
)

17 
i
;

18 
size
;

20 i‡(!
a
 || !
b
 || !
c
)

22 i‡(
a
->
x
 !
b
->x ||á->
y
 !b->y || 
c
->x !=á->x || c->y !=á->y)

24 
size
 = 
c
->
x
 * c->
y
;

25 
i
 = 0;

26 
i
 < 
size
)

28 
c
->
m
[
i
] = 
a
->m[i] - 
b
->m[i];

29 
i
++;

32 
	}
}

34 
t_m©rix
 *
	$m©rix_sub
(
t_m©rix
 *
a
,Å_m©rix *
b
)

36 
t_m©rix
 *
c
;

37 
i
;

38 
size
;

40 i‡(!
a
 || !
b
)

41  (
NULL
);

42 i‡(
a
->
x
 !
b
->x ||á->
y
 != b->y)

43  (
NULL
);

44 
c
 = 
	`m©rix_öô
(
a
->
x
,á->
y
);

45 
size
 = 
c
->
x
 * c->
y
;

46 
i
 = 0;

47 
i
 < 
size
)

49 
c
->
m
[
i
] = 
a
->m[i] - 
b
->m[i];

50 
i
++;

52  (
c
);

53 
	}
}

	@c_maths/matrix_transpose.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$m©rix_å™•o£
(
t_m©rix
 *
a
,Å_m©rix *
b
)

17 i‡(!
a
 || !
b
)

18  (
NULL
);

19  (
	`m©rix_öô
(1, 1));

20 
	}
}

	@c_maths/set_rotate.c

13 
	~<m©h.h
>

14 
	~"c_m©hs.h
"

16 
t_m©rix
 *
	$öô_xrŸ_m©rix
(
thëx
)

18 
t_m©rix
 *
r
;

20 
r
 = 
	`m©rix_öô
(3, 3);

21 
r
->
m
[4] = 
	`cos
(
thëx
);

22 
r
->
m
[5] = 
	`sö
(
thëx
);

23 
r
->
m
[7] = -
	`sö
(
thëx
);

24 
r
->
m
[8] = 
	`cos
(
thëx
);

25 
r
->
m
[0] = 1;

26  (
r
);

27 
	}
}

29 
t_m©rix
 *
	$öô_yrŸ_m©rix
(
thëy
)

31 
t_m©rix
 *
r
;

33 
r
 = 
	`m©rix_öô
(3, 3);

34 
r
->
m
[0] = 
	`cos
(
thëy
);

35 
r
->
m
[2] = -
	`sö
(
thëy
);

36 
r
->
m
[4] = 1;

37 
r
->
m
[6] = 
	`sö
(
thëy
);

38 
r
->
m
[8] = 
	`cos
(
thëy
);

39  (
r
);

40 
	}
}

42 
t_m©rix
 *
	$öô_zrŸ_m©rix
(
thëz
)

44 
t_m©rix
 *
r
;

46 
r
 = 
	`m©rix_öô
(3, 3);

47 
r
->
m
[0] = 
	`cos
(
thëz
);

48 
r
->
m
[1] = 
	`sö
(
thëz
);

49 
r
->
m
[3] = -
	`sö
(
thëz
);

50 
r
->
m
[4] = 
	`cos
(
thëz
);

51 
r
->
m
[8] = 1;

52  (
r
);

53 
	}
}

55 
t_m©rix
 *
	$£t_rŸ©e
(
thëx
, 
thëy
, 
thëz
)

57 
t_m©rix
 *
rx
;

58 
t_m©rix
 *
ry
;

59 
t_m©rix
 *
rz
;

60 
t_m©rix
 *
r
;

62 
rx
 = 
	`öô_xrŸ_m©rix
(
thëx
);

63 
ry
 = 
	`öô_yrŸ_m©rix
(
thëy
);

64 
rz
 = 
	`öô_zrŸ_m©rix
(
thëz
);

65 
r
 = 
	`m©rix_¥odu˘
(
ry
, 
rx
);

66 
	`m©rix_‰ì
(&
rx
);

67 
	`m©rix_‰ì
(&
ry
);

68 
ry
 = 
r
;

69 
r
 = 
	`m©rix_¥odu˘
(
rz
,Ñ);

70 
	`m©rix_‰ì
(&
ry
);

71 
	`m©rix_‰ì
(&
rz
);

72  (
r
);

73 
	}
}

	@c_maths/set_scale.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$£t_sˇÀ
(
sx
, 
sy
, 
sz
)

17 
t_m©rix
 *
s
;

19 
s
 = 
	`m©rix_öô
(4, 4);

20 
s
->
m
[0] = 
sx
;

21 
s
->
m
[5] = 
sy
;

22 
s
->
m
[10] = 
sz
;

23 
s
->
m
[15] = 1;

24  (
s
);

25 
	}
}

	@c_maths/set_translate.c

13 
	~"c_m©hs.h
"

15 
t_m©rix
 *
	$£t_å™¶©e
(
dx
, 
dy
, 
dz
)

17 
t_m©rix
 *
t
;

19 
t
 = 
	`m©rix_öô
(4, 4);

20 
t
->
m
[0] = 1;

21 
t
->
m
[3] = 
dx
;

22 
t
->
m
[5] = 1;

23 
t
->
m
[7] = 
dy
;

24 
t
->
m
[10] = 1;

25 
t
->
m
[11] = 
dz
;

26 
t
->
m
[15] = 1;

27  (
t
);

28 
	}
}

	@c_maths/sin.c

13 
	~"c_m©hs.h
"

15 
	$·_sö
(
deg
)

17 
èb
[
TRIGO_ACCURACY
];

18 
öô
 = 1;

19 
i
;

21 i‡(
öô
)

23 
i
 = 0;

24 
öô
 = 0;

25 
i
 < 
TRIGO_ACCURACY
)

27 
èb
[
i
] = 
	`sö
(((()iË/ (()
TRIGO_ACCURACY
)Ë* 2 * 
M_PI
);

28 
i
++;

31  (
èb
[(()((
deg
 / 360.0Ë* 
TRIGO_ACCURACY
) % TRIGO_ACCURACY)]);

32 
	}
}

	@c_maths/vector_product.c

13 
	~"c_m©hs.h
"

15 
	#X
 0

	)

16 
	#Y
 1

	)

17 
	#Z
 2

	)

19 
	$ve˘‹_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
ªsu…
)

21 i‡(!
a
 || !
b
 || !
ªsu…
)

25 i‡(
	`MIN
(
a
->
x
 *á->
y
, 
b
->x * b->y) < 3)

29 
ªsu…
->
m
[
X
] = (
a
->m[
Y
] * 
b
->m[
Z
]) - (a->m[Z] * b->m[Y]);

30 
ªsu…
->
m
[
Y
] = (
a
->m[
Z
] * 
b
->m[
X
]) - (a->m[X] * b->m[Z]);

31 
ªsu…
->
m
[
Z
] = (
a
->m[
X
] * 
b
->m[
Y
]) - (a->m[Y] * b->m[X]);

32 
	}
}

34 
t_m©rix
 *
	$ve˘‹_¥odu˘_s
(
t_m©rix
 *
a
,Å_m©rix *
b
, 
x
, 
y
)

36 
t_m©rix
 *
ªsu…
;

38 i‡(!
a
 || !
b
 || 
x
 * 
y
 < 3 || x < 0)

40  (
NULL
);

42 i‡(
	`MIN
(
a
->
x
 *á->
y
, 
b
->x * b->y) < 3

43 || !(
ªsu…
 = 
	`m©rix_öô
(
x
, 
y
)))

44  (
NULL
);

45 
	`ve˘‹_¥odu˘_ö
(
a
, 
b
, 
ªsu…
);

46  (
ªsu…
);

47 
	}
}

49 
t_m©rix
 *
	$ve˘‹_¥odu˘
(
t_m©rix
 *
a
,Å_m©rix *
b
)

51 
t_m©rix
 *
ªsu…
;

53 i‡(!
a
 || !
b
)

55  (
NULL
);

57 i‡(
	`MIN
(
a
->
x
 *á->
y
, 
b
->x * b->y) < 3

58 || !(
ªsu…
 = 
	`m©rix_öô
(3, 1)))

59  (
NULL
);

60 
	`ve˘‹_¥odu˘_ö
(
a
, 
b
, 
ªsu…
);

61  (
ªsu…
);

62 
	}
}

	@includes/c_maths.h

13 #i‚de‡
C_MATHS_H


14 
	#C_MATHS_H


	)

15 
	~"lib·.h
"

16 
	~<m©h.h
>

17 
	~<°dio.h
>

18 
	#TRIGO_FACT
 3

	)

19 
	#TRIGO_ACCURACY
 (
TRIGO_FACT
 * 360)

	)

21 
	#MIN
(
A
, 
B
Ë((AË< (BË? (AË: (B))

	)

22 
	#MAX
(
A
, 
B
Ë((AË< (BË? (BË: (A))

	)

24 
	ss_m©rix


26 *
	mm
;

27 
	mx
;

28 
	my
;

29 } 
	tt_m©rix
;

31 
	ss_roŸs


33 
	mx1
;

34 
	mx2
;

35 
	mx3
;

36 
	mx4
;

37 
	mis_ªÆ
;

38 } 
	tt_roŸs
;

40 
	ss_c€fs


42 
	ma
;

43 
	mb
;

44 
	mc
;

45 
	md
;

46 
	me
;

47 } 
	tt_c€fs
;

49 
t_m©rix
 *
ve˘_√w_vîtfd
(
a
, 
b
, 
c
);

50 
t_m©rix
 *
ve˘_√w_vîtfi
(
a
, 
b
, 
c
);

51 
t_m©rix
 *
ve˘_√w_vît
(*
èb
, 
size
);

52 
t_m©rix
 *
ve˘_√w_h‹z
(*
èb
, 
size
);

53 
t_m©rix
 *
ve˘_√w_vîti
(*
èb
, 
size
);

54 
t_m©rix
 *
ve˘_√w_h‹zi
(*
èb
, 
size
);

56 
t_m©rix
 *
m©rix_öô
(
x
, 
y
);

57 
m©rix_di•œy
(
t_m©rix
 *
a
);

58 
t_m©rix
 *
m©rix_add
—_m©rix *
a
,Å_m©rix *
b
);

59 
t_m©rix
 *
m©rix_add_ö
—_m©rix *
a
,Å_m©rix *
b
,Å_m©rix *
c
);

60 
t_m©rix
 *
m©rix_sub
—_m©rix *
a
,Å_m©rix *
b
);

61 
m©rix_sub_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
);

62 
t_m©rix
 *
m©rix_¥odu˘
—_m©rix *
a
,Å_m©rix *
b
);

63 
m©rix_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
c
);

64 
ve˘‹_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
ªsu…
);

65 
t_m©rix
 *
m©rix_sˇœr_¥odu˘
—_m©rix *
a
, 
d
);

66 
t_m©rix
 *
m©rix_sˇœr_¥odu˘_√w
—_m©rix *
a
, 
d
);

67 
m©rix_dë
(
t_m©rix
 *
a
);

68 
t_m©rix
 *
m©rix_å™•o£
—_m©rix *
a
,Å_m©rix *
b
);

69 
m©rix_n‹me
(
t_m©rix
 *
a
);

70 
t_m©rix
 *
ve˘‹_¥odu˘
—_m©rix *
a
,Å_m©rix *
b
);

71 
t_m©rix
 *
ve˘‹_¥odu˘_s
—_m©rix *
a
,Å_m©rix *
b
, 
x
, 
y
);

72 
ve˘‹_¥odu˘_ö
(
t_m©rix
 *
a
,Å_m©rix *
b
,Å_m©rix *
ªsu…
);

73 
m©rix_dŸ_¥odu˘
(
t_m©rix
 *
a
,Å_m©rix *
b
);

75 
t_m©rix
 *
m©rix_c›y
—_m©rix *
§c
);

76 
‰ì_m©rix
(
t_m©rix
 *
m©
);

77 
m©rix_‰ì
(
t_m©rix
 **
m©
);

79 
·_cos
(
deg
);

80 
·_sö
(
deg
);

82 
t_roŸs
 
eq_sﬁve_2nd
(
t_c€fs
 
c€fs
);

83 
t_roŸs
 
eq_sﬁve_3rd
(
t_c€fs
 
c€fs
);

84 
t_roŸs
 
eq_sﬁve_4th
(
t_c€fs
 
c€fs
);

86 
t_m©rix
 *
m©rix_buf„r
—_m©rix *
m©
);

87 
m©rix_put_ö
(
a
, 
b
, 
c
, 
d
);

88 
t_m©rix
 *
m©rix_put_ö_√w
(
a
, 
b
, 
c
, 
d
);

90 
t_m©rix
 *
£t_rŸ©e
(
thëx
, 
thëy
, 
thëz
);

91 
t_m©rix
 *
£t_å™¶©e
(
dx
, 
dy
, 
dz
);

92 
t_m©rix
 *
£t_sˇÀ
(
sx
, 
sy
, 
sz
);

94 
¥öt_löe
(
t_m©rix
 *
±1
,Å_m©rix *
c1
,Å_m©rix *
±2
,

95 
t_m©rix
 *
c2
);

	@includes/fdf.h

13 #i‚de‡
FDF_H


14 
	#FDF_H


	)

16 
	~"c_m©hs.h
"

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

20 
	#R
 0

	)

21 
	#G
 1

	)

22 
	#B
 2

	)

24 
	#X
 0

	)

25 
	#Y
 1

	)

26 
	#Z
 2

	)

28 
	#BEG_X
 0

	)

29 
	#END_X
 1

	)

30 
	#DELTA_Y
 2

	)

31 
	#BEG_Y
 3

	)

32 
	#MAX_Y
 4

	)

33 
	#MIN_Y
 5

	)

35 
	#X
 0

	)

36 
	#Y1
 1

	)

37 
	#Y2
 2

	)

39 
	#BEG_Z
 0

	)

40 
	#DELTA_Z
 1

	)

42 
	#X1
 0

	)

43 
	#Y1
 1

	)

44 
	#Z1
 2

	)

45 
	#DX
 3

	)

46 
	#DY
 4

	)

47 
	#DZ
 5

	)

48 
	#R1
 6

	)

49 
	#G1
 7

	)

50 
	#B1
 8

	)

51 
	#DR
 9

	)

52 
	#DG
 10

	)

53 
	#DB
 11

	)

54 
	#NORME
 12

	)

56 
	#BETA
 
e
->
bëa


	)

58 
	ss_key


60 
	mech≠
;

61 
	mdeˇl_down
;

62 
	mdeˇl_up
;

63 
	mdeˇl_right
;

64 
	mdeˇl_À·
;

65 
	mzoom
;

66 
	mzoom_back
;

67 
	m˘e1_ö¸ó£
;

68 
	m˘e1_de¸ó£
;

69 
	misomëric
;

70 
	m∑øŒñ
;

71 
	mc⁄ic
;

72 
	msˇÀ_ö¸ó£
;

73 
	msˇÀ_de¸ó£
;

74 
	mr
;

75 
	mg
;

76 
	mb
;

77 
	mrŸ_x1
;

78 
	mrŸ_y1
;

79 
	mrŸ_z1
;

80 
	mrŸ_x2
;

81 
	mrŸ_y2
;

82 
	mrŸ_z2
;

83 
	mrŸ_ˇm_x1
;

84 
	mrŸ_ˇm_x2
;

85 
	mrŸ_ˇm_y1
;

86 
	mrŸ_ˇm_y2
;

87 
	mrŸ_ˇm_z1
;

88 
	mrŸ_ˇm_z2
;

89 
	m•ìd_up
;

90 
	m•ìd_down
;

91 
	m•ìd_°›
;

92 
	mfi1
;

93 
	mfi_1
;

94 
	mfi2
;

95 
	mfi_2
;

96 
	mvõw
;

97 
	mdøw
;

98 
	mswôch_™ime
;

99 
	mz_up
;

100 
	mz_down
;

101 } 
	tt_key
;

103 
	#TOP_LEFT
 0

	)

104 
	#BOTOM_LEFT
 1

	)

105 
	#BOTOM_RIGHT
 2

	)

106 
	#TOP_RIGHT
 3

	)

108 
	#LEFT
 0

	)

109 
	#BOTOM
 1

	)

110 
	#RIGHT
 2

	)

111 
	#TOP
 3

	)

113 
	ss_ˇm


115 
t_m©rix
 **
	mc‹√r
;

116 
t_m©rix
 **
	mba£
;

117 
t_m©rix
 *
	mpos
;

118 
t_m©rix
 *
	mdú
;

119 
t_m©rix
 *
	mrŸ
;

120 } 
	tt_ˇm
;

122 
	#SIZE_Y
 1900

	)

123 
	#SIZE_X
 1200

	)

124 
	#PRINT_DIAG
 0

	)

126 
	ss_ív


128 *
	mmlx
;

129 *
	mwö
;

130 *
	mimg
;

131 *
	md©a
;

132 *
	mz_buf„r
;

133 
	msize_löe
;

134 
	me¸_x
;

135 
	me¸_y
;

136 
	mdïth
;

137 
	mídün
;

138 **
	mm≠
;

139 **
	mm≠_d
;

140 
t_m©rix
 ***
	mcﬁ‹_m≠
;

141 
t_m©rix
 ***
	mve˘_m≠
;

142 
	m¥oj
;

143 
	msˇÀ
;

144 
	m˘e1
;

145 
	mdeˇlx
;

146 
	mdeˇly
;

147 
	mzoom
;

148 
	mr
;

149 
	mg
;

150 
	mb
;

151 
t_key
 
	mkey
;

152 
	msize_m≠_x
;

153 
	msize_m≠_y
;

154 
	mz_mö
;

155 
	mz_max
;

156 
	mrŸ_x
;

157 
	mrŸ_y
;

158 
	mrŸ_z
;

159 
	m•ìd
;

160 
t_ˇm
 *
	mˇm
;

161 
	mdr1
;

162 
	mdr2
;

163 
	mvõw
;

164 
	mvõw_sw
;

165 
	mdøw
;

166 
	mdøw_sw
;

167 
	mk
;

168 
	mphi1
;

169 
	mphi2
;

170 
	mbëa
;

171 
	mö¸em
;

172 
	mnb_‰ame
;

173 
	madví˚
;

174 
	mmu…_z
;

175 
	m™ime_adví˚
;

176 } 
	tt_ív
;

178 
	ss_poöt


180 
	mx
;

181 
	my
;

182 
	mz
;

183 
	mcﬁ‹
;

184 } 
	tt_poöt
;

189 
öô_t_key
(
t_key
 *
key
);

190 
key_¥ess
(
keycode
, 
t_ív
 *
e
);

191 
key_ªÀa£
(
keycode
, 
t_ív
 *
e
);

193 
öô_t_key_2
(
t_key
 *
key
);

194 
öô_t_key
(
t_key
 *
key
);

195 
key_¥ess_íd
(
keycode
, 
t_ív
 *
e
);

196 
key_¥ess
(
keycode
, 
t_ív
 *
e
);

198 
key_ªÀa£_íd
(
keycode
, 
t_ív
 *
e
);

199 
key_ªÀa£
(
keycode
, 
t_ív
 *
e
);

200 
ö¸em_dú_ˇm
(
t_ív
 *
e
);

201 
ö¸em_pos_ˇm
(
t_ív
 *
e
);

202 
m™age_ˇm_rŸ
(
t_ív
 *
e
);

204 
lo›_hook
(
t_ív
 *
e
);

209 
t_m©rix
 *
föishe_cﬁ‹
(
t_ív
 *
e
, *
∑k
);

210 
t_m©rix
 *
gë_max_zdim
(**
m≠
, 
size_x
, 
size_y
);

211 
px_to_img
(
t_ív
 *
e
, 
x
, 
y
, 
cﬁ‹
);

212 
ve˘px_to_img
(
t_ív
 *
e
, 
t_m©rix
 *
pos_cﬁ‹
);

213 
¥öt_°©e
(
t_ív
 *
e
);

215 
ív
(**
m≠
, 
size_x
, 
size_y
, *
m≠_«me
);

223 
t_ˇm
 *
öô_ˇm
(
fov_y
, 
fov_x
, 
t_ív
 *
e
);

224 
des¸ibe_ˇm
(
t_ˇm
 *
ˇm
);

228 
deföe_cﬁ‹
(
t_m©rix
 *
poöt
,Å_m©rix *
cﬁ‹
);

229 
gë_poöt
(
t_m©rix
 ***
m≠
,Å_m©rix **
poöt
,

230 
i
, 
j
);

231 
¥öt_m≠
(
t_ív
 *
e
, 
t_ˇm
 *
ˇm
, 
t_m©rix
 ***
m≠
);

236 
døw_poöt
(
t_ív
 *
e
);

240 **
∑r£
(
fd
);

241 *
m≠s_«me
(*
°r
);

246 
døw_löe
(
t_ív
 *
e
, 
t_m©rix
 *
m©_löe
);

247 
t_m©rix
 *
öô_m©_löe
—_m©rix *
±1
,Å_m©rix *
±2
,

248 
t_m©rix
 *
c1
,Å_m©rix *
c2
);

249 
t_m©rix
 *
öô_m©_löe2
—_m©rix *
±_cﬁ‹
,Å_m©rix *
±3
,

250 
t_m©rix
 *
c3
);

251 
døw_åüngÀ
(
t_ív
 *
e
, 
t_m©rix
 *
m©_löe
,

252 
t_m©rix
 *
±3
,Å_m©rix *
c3
);

257 
døw_lök_m≠2
(
t_ív
 *
e
, 
t_m©rix
 ***
m≠
,

258 
t_m©rix
 *
c1
,Å_m©rix *
c2
);

259 
døw_lök_m≠
(
t_ív
 *
e
, 
t_m©rix
 ***
m≠
);

260 
døw_Á˚_m≠
(
t_ív
 *
e
, 
t_m©rix
 ***
m≠
,

261 
t_m©rix
 *
m©_l
);

266 
c⁄ique_ad≠ã
(
t_m©rix
 *
ve˘
);

267 
is_out
(
t_m©rix
 *
ve˘
, 
t_ív
 *
e
);

268 
©o
(
t_m©rix
 *
ve˘1
,Å_m©rix *
ve˘2
, 
t_ív
 *
e
);

269 
t_m©rix
 *
ba£_ch™ge_sˇœr
(
t_ˇm
 *
ˇm
,Å_m©rix *
ve˘
);

270 
ba£_ch™ge
(
t_ív
 *
e
, 
t_ˇm
 *
c
, 
t_m©rix
 ***
m≠
,

271 
t_m©rix
 *
rŸ_ˇm
);

276 
t_li°
 *
ªad_löe_numbî
(
fd
);

277 
·_ª∂a˚
(*
°r
, *
to_föd
, 
ª∂a˚
);

278 
·_ª∂a˚
(*
°r
, *
to_föd
, 
ª∂a˚
);

279 *
gë_numbî_‰om_°r
(**
ch¨_nb
, *
size
);

280 
‰ì_ch¨_•lô
(**
èb
);

281 
t_li°
 *
ªad_löe_numbî
(
fd
);

283 
t_m©rix
 ***
gë_m≠
(
t_ív
 *
e
);

284 **
gë_the_m≠
(
fd
, *
x_max
, *
y_max
);

286 
‰ì_m≠
(
t_m©rix
 ****
m≠
, 
t_ív
 *
e
);

287 
‰ì_öt_m≠
(
t_ív
 *
e
);

288 
‰ì_ˇm
(
t_ív
 *
e
);

289 
·_exô
(
t_ív
 **
e
);

291 
døw_poöt_ﬁd
(
t_ív
 *
e
);

292 
maö_w‹k
(
t_ív
 *
e
);

293 **
ˇ°_èb
(**
èb
, 
x
, 
y
);

	@includes/get_next_line.h

13 #i‚de‡
GET_NEXT_LINE_H


14 
	#GET_NEXT_LINE_H


	)

15 
	#BUFF_SIZE
 256

	)

16 
	#MIN
(
A
, 
B
Ë((AË< (B)Ë? (AË: (B)

	)

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<f˙é.h
>

20 
	~"lib·.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

25 
	ss_fdg∆


27 
	mfd
;

28 *
	mª°
;

29 
s_fdg∆
 *
	m√xt
;

30 } 
	tt_fdg∆
;

31 
‰ì_⁄e_node
(
t_fdg∆
 **
begö
, 
fd
);

32 
gë_√xt_löe
(
fd
, **
löe
);

	@includes/libft.h

13 #i‚de‡
LIBFT_H


14 
	#LIBFT_H


	)

15 
	#ABS
(
x
Ë(x >0Ë? x : -
	)
x

17 
	~<°rög.h
>

18 
	~<°dlib.h
>

19 
	~<˘y≥.h
>

20 
	~<uni°d.h
>

22 *
m≠s_«me
(*
°r
);

23 *
·_mem£t
(*
s
, 
c
, 
size_t
 
n
);

24 
·_bzîo
(*
s
, 
size_t
 
n
);

25 *
·_mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

26 *
·_memc˝y
(*
de°
, c⁄° *
§c
, 
c
, 
size_t
 
n
);

27 *
·_memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

28 *
·_memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

29 
·_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

30 
size_t
 
·_°æí
(*
s
);

31 *
·_°rdup
(*
s
);

32 *
·_°r˝y
(*
de°
, c⁄° *
§c
);

33 *
·_°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

34 *
·_°rˇt
(*
de°
, c⁄° *
§c
);

35 *
·_°∫ˇt
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

36 
size_t
 
·_°æˇt
(*
d°
, c⁄° *
§c
, size_à
size
);

37 *
·_°rchr
(c⁄° *
s
, 
c
);

38 *
·_°ºchr
(c⁄° *
s
, 
c
);

39 *
·_°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

40 *
·_°∫°r
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

41 
·_°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

42 
·_°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

43 
·_©oi
(c⁄° *
≈å
);

44 
·_ißÕha
(
c
);

45 
·_isdigô
(
c
);

46 
·_iß um
(
c
);

47 
·_ißscii
(
c
);

48 
·_i•röt
(
c
);

49 
·_touµî
(
c
);

50 
·_tﬁowî
(
c
);

52 *
·_memÆloc
(
size_t
 
size
);

53 
·_memdñ
(**
≠
);

54 *
·_°∫ew
(
size_t
 
size
);

55 
·_°rdñ
(**
as
);

56 *
·_°r˛r
(*
s
);

57 
·_°rôî
(*
s
, (*
f
)(*));

58 
	`·_°rôîi
(*
s
, (*
f
)(, *));

59 *
	`·_°rm≠
(c⁄° *
s
, (*
f
)());

60 *
	`·_°rm≠i
(c⁄° *
s
, (*
f
)(, ));

61 
	`·_°ªqu
(c⁄° *
s1
, c⁄° *
s2
);

62 
	`·_°∫equ
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

63 *
	`·_°rsub
(c⁄° *
s
, 
°¨t
, 
size_t
 
Àn
);

64 *
	`·_°rjoö
(c⁄° *
s1
, c⁄°*
s2
);

65 *
	`·_°πrim
(c⁄° *
s
);

66 **
	`·_°r•lô
(c⁄° *
s
, 
c
);

67 *
	`·_ôﬂ
(
n
);

68 
	`·_putch¨
(
c
);

69 
	`·_put°r
(*
s
);

70 
	`·_puãndl
(*
s
);

71 
	`·_puäbr
(
n
);

72 
	`·_putch¨_fd
(
c
, 
fd
);

73 
	`·_put°r_fd
(*
s
, 
fd
);

74 
	`·_puãndl_fd
(*
s
, 
fd
);

75 
	`·_puäbr_fd
(
n
, 
fd
);

77 
	ss_li°


79 *
c⁄ã¡
;

80 
size_t
 
c⁄ã¡_size
;

81 
s_li°
 *
√xt
;

82 } 
	tt_li°
;

84 
t_li°
 *
	`·_l°√w
(c⁄° *
c⁄ã¡
, 
size_t
 
c⁄ã¡_size
);

85 
	`·_l°dñ⁄e
(
t_li°
 **
Æ°
, (*
dñ
)(*, 
size_t
));

86 
	`·_l°dñ
(
t_li°
 **
Æ°
, (*
dñ
)(*, 
size_t
));

87 
	`·_l°add
(
t_li°
 **
Æ°
,Å_li° *
√w
);

88 
	`·_l°add_back
(
t_li°
 **
Æ°
,Å_li° *
√w
);

89 
	`·_l°ôî
(
t_li°
 *
l°
, (*
f
)—_li° *
ñem
));

90 
t_li°
 *
	`·_l°m≠
—_li° *
l°
,Å_li° *(*
f
)—_li° *
ñem
));

92 
t_li°
 *
	`ªad_löe_numbî
(
fd
);

94 
	`is_öt_ovî_Êow
(*
numbî
);

	@includes/mlx.h

45 #i‚de‡
MLX_H


47 
	#MLX_H


	)

50 *
mlx_öô
();

61 *
mlx_√w_wödow
(*
mlx_±r
, 
size_x
, 
size_y
, *
tôÀ
);

65 
mlx_˛ór_wödow
(*
mlx_±r
, *
wö_±r
);

66 
mlx_pixñ_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
);

78 *
mlx_√w_image
(*
mlx_±r
,
width
,
height
);

82 *
mlx_gë_d©a_addr
(*
img_±r
, *
bôs_≥r_pixñ
,

83 *
size_löe
, *
ídün
);

88 
mlx_put_image_to_wödow
(*
mlx_±r
, *
wö_±r
, *
img_±r
,

89 
x
, 
y
);

90 
mlx_gë_cﬁ‹_vÆue
(*
mlx_±r
, 
cﬁ‹
);

97 
mlx_mou£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

98 
mlx_key_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

99 
mlx_expo£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

101 
mlx_lo›_hook
 (*
mlx_±r
, (*
fun˘_±r
)(), *
∑øm
);

102 
mlx_lo›
 (*
mlx_±r
);

120 
mlx_°rög_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
,

121 *
°rög
);

122 *
mlx_xpm_to_image
(*
mlx_±r
, **
xpm_d©a
,

123 *
width
, *
height
);

124 *
mlx_xpm_fûe_to_image
(*
mlx_±r
, *
fûíame
,

125 *
width
, *
height
);

126 
mlx_de°roy_wödow
(*
mlx_±r
, *
wö_±r
);

128 
mlx_de°roy_image
(*
mlx_±r
, *
img_±r
);

135 
mlx_hook
(*
wö_±r
, 
x_evít
, 
x_mask
,

136 (*
fun˘
)(), *
∑øm
);

138 
mlx_do_key_aut‹ïótoff
(*
mlx_±r
);

139 
mlx_do_key_aut‹ïót⁄
(*
mlx_±r
);

140 
mlx_do_sync
(*
mlx_±r
);

	@includes/mlx_int.h

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<f˙é.h
>

23 
	~<sys/mm™.h
>

24 
	~<X11/Xlib.h
>

25 
	~<X11/Xutû.h
>

26 
	~<sys/ùc.h
>

27 
	~<sys/shm.h
>

28 
	~<X11/exãnsi⁄s/XShm.h
>

32 
	#MLX_TYPE_SHM_PIXMAP
 3

	)

33 
	#MLX_TYPE_SHM
 2

	)

34 
	#MLX_TYPE_XIMAGE
 1

	)

36 
	#MLX_MAX_EVENT
 
LASTEvít


	)

39 
	#ENV_DISPLAY
 "DISPLAY"

	)

40 
	#LOCALHOST
 "loˇlho°"

	)

41 
	#ERR_NO_TRUECOLOR
 "MöûibX Eº‹ : NÿTrueCﬁ‹ VisuÆávaûabÀ.\n"

	)

42 
	#WARN_SHM_ATTACH
 "MöûibX W¨nög : X sîvî c™'à©èch sh¨ed mem‹y.\n"

	)

45 
	ss_xpm_cﬁ


47 
	m«me
;

48 
	mcﬁ
;

49 } 
	tt_xpm_cﬁ
;

52 
	ss_cﬁ_«me


54 *
	m«me
;

55 
	mcﬁ‹
;

58 
	ss_evít_li°


60 
	mmask
;

61 (*
	mhook
)();

62 *
	m∑øm
;

63 } 
	tt_evít_li°
;

66 
	ss_wö_li°


68 
Wödow
 
	mwödow
;

69 
GC
 
	mgc
;

70 
s_wö_li°
 *
	m√xt
;

71 (*
	mmou£_hook
)();

72 (*
	mkey_hook
)();

73 (*
	mexpo£_hook
)();

74 *
	mmou£_∑øm
;

75 *
	mkey_∑øm
;

76 *
	mexpo£_∑øm
;

77 
t_evít_li°
 
	mhooks
[
MLX_MAX_EVENT
];

78 } 
	tt_wö_li°
;

81 
	ss_img


83 
XImage
 *
	mimage
;

84 
Pixm≠
 
	mpix
;

85 
GC
 
	mgc
;

86 
	msize_löe
;

87 
	mbµ
;

88 
	mwidth
;

89 
	mheight
;

90 
	mty≥
;

91 
	mf‹m©
;

92 *
	md©a
;

93 
XShmSegmítInfo
 
	mshm
;

94 } 
	tt_img
;

96 
	ss_xv¨


98 
Di•œy
 *
	mdi•œy
;

99 
Wödow
 
	mroŸ
;

100 
	ms¸ìn
;

101 
	mdïth
;

102 
VisuÆ
 *
	mvisuÆ
;

103 
Cﬁ‹m≠
 
	mcm≠
;

104 
	m¥iv©e_cm≠
;

105 
t_wö_li°
 *
	mwö_li°
;

106 (*
	mlo›_hook
)();

107 *
	mlo›_∑øm
;

108 
	mu£_xshm
;

109 
	mpshm_f‹m©
;

110 
	mdo_Êush
;

111 
	mde¸gb
[6];

112 } 
	tt_xv¨
;

115 
mlx_öt_do_nŸhög
();

116 
mlx_öt_gë_good_cﬁ‹
();

117 
mlx_öt_föd_ö_pcm
();

118 
mlx_öt_™ti_ªsize_wö
();

119 
mlx_öt_waô_fú°_expo£
();

120 
mlx_öt_rgb_c⁄vîsi⁄
();

121 
mlx_öt_dól_shm
();

122 *
mlx_öt_√w_xshm_image
();

123 **
mlx_öt_°r_to_w‹dèb
();

124 *
mlx_√w_image
();

125 
shm_©t_pb
();

	@libft/ft_atoi.c

13 
	$·_©oi
(*
°r
)

15 
i
;

16 
nb
;

17 
Á˘‹
;

19 i‡(
°r
)

21 
i
 = 0;

22 
Á˘‹
 = 1;

23 
nb
 = 0;

24 (
°r
[
i
] >= 9 && str[i] <= 13) || str[i] == 32)

25 
i
++;

26 i‡(
°r
[
i
] == 45 || str[i] == 43)

28 
Á˘‹
 = 44 - 
°r
[
i
];

29 
i
++;

31 
°r
[
i
] >= 48 && str[i] <= 57)

33 
nb
 =Çb * 10 + 
°r
[
i
] - 48;

34 
i
++;

36  (
nb
 * 
Á˘‹
);

39 
	}
}

	@libft/ft_bzero.c

13 
	~"lib·.h
"

15 
	$·_bzîo
(*
s
, 
size_t
 
n
)

17 
	`·_mem£t
(
s
, 0, 
n
);

18 
	}
}

	@libft/ft_countwords.c

13 
	~"lib·.h
"

15 
size_t
 
	$·_cou¡w‹ds
(c⁄° *
s
, 
c
)

17 
i
;

18 
size_t
 
n
;

20 
i
 = 0;

21 
n
 = 0;

22 
s
[
i
] != '\0')

24 i‡((
s
[
i
] =
c
 || i == 0) && s[i + 1] != c && s[i + 1] != '\0')

25 
n
++;

26 
i
++;

28  (
n
);

29 
	}
}

	@libft/ft_isalnum.c

13 
	~"lib·.h
"

15 
	$·_iß um
(
c
)

17 i‡((
c
 >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57))

21 
	}
}

	@libft/ft_isalpha.c

13 
	~"lib·.h
"

15 
	$·_ißÕha
(
c
)

17 i‡((
c
 >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))

21 
	}
}

	@libft/ft_isascii.c

13 
	~"lib·.h
"

15 
	$·_ißscii
(
c
)

17 i‡(
c
 >= 0 && c <= 127)

21 
	}
}

	@libft/ft_isdigit.c

13 
	~"lib·.h
"

15 
	$·_isdigô
(
c
)

17 i‡(
c
 >= '0' && c <= '9')

21 
	}
}

	@libft/ft_isprint.c

13 
	~"lib·.h
"

15 
	$·_i•röt
(
c
)

17 i‡(
c
 < 32 || c >= 127)

21 
	}
}

	@libft/ft_itoa.c

13 
	~"lib·.h
"

15 *
	$ªvî£
(*
s
)

17 
i
;

18 
j
;

19 
c
;

21 
i
 = 0;

22 
j
 = 
	`·_°æí
(
s
) - 1;

23 
i
 < 
j
)

25 
c
 = 
s
[
i
];

26 
s
[
i
] = s[
j
];

27 
s
[
j
] = 
c
;

28 
i
++;

29 
j
--;

31  (
s
);

32 
	}
}

34 *
	$·_ôﬂ
(
n
)

36 
i
;

37 
sign
;

38 *
s
;

40 
s
 = 
	`·_°∫ew
(11);

41 
	`·_bzîo
(
s
, 11);

42 i‡(
n
 == -2147483648)

43  (
	`·_°r˝y
(
s
, "-2147483648"));

44 i‡(
n
 == 0)

45  (
	`·_°r˝y
(
s
, "0"));

46 i‡((
sign
 = 
n
) < 0)

47 
n
 = -n;

48 
i
 = 0;

49 
n
 > 0)

51 
s
[
i
++] = 
n
 % 10 + '0';

52 
n
 /= 10;

54 i‡(
sign
 < 0)

55 
s
[
i
++] = '-';

56 
s
[
i
] = '\0';

57  (
	`ªvî£
(
s
));

58 
	}
}

	@libft/ft_lstnew.c

13 
	~"lib·.h
"

15 
t_li°
 *
	$·_l°√w
(c⁄° *
c⁄ã¡
, 
size_t
 
c⁄ã¡_size
)

17 
t_li°
 *
√w
;

19 i‡(!(
√w
 = (
t_li°
*)
	`·_memÆloc
((t_list))))

20  (
NULL
);

21 i‡(!(
√w
->
c⁄ã¡
 = 
	`·_memÆloc
(
c⁄ã¡_size
)))

22  (
NULL
);

23 i‡(!
c⁄ã¡
)

25 
√w
->
c⁄ã¡
 = 
NULL
;

26 
√w
->
c⁄ã¡_size
 = 0;

30 
√w
->
c⁄ã¡
 = 
	`·_mem˝y
“ew->c⁄ã¡, c⁄ã¡, 
c⁄ã¡_size
);

31 
√w
->
c⁄ã¡_size
 = content_size;

33 
√w
->
√xt
 = 
NULL
;

34  (
√w
);

35 
	}
}

	@libft/ft_memalloc.c

13 
	~"lib·.h
"

15 *
	$·_memÆloc
(
size_t
 
size
)

17 *
mem
;

19 i‡(!(
mem
 = 
	`mÆloc
((Ë* 
size
)))

20  (
NULL
);

21 *
mem
 = '\0';

22  ((*)
mem
);

23 
	}
}

	@libft/ft_memccpy.c

13 
	~"lib·.h
"

15 *
	$·_memc˝y
(*
d°
, c⁄° *
§c
, 
c
, 
size_t
 
n
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
i
 < 
n
)

22 ((*)
d°
)[
i
] = ((*)
§c
)[i];

23 i‡(((*)
§c
)[
i
] =()
c
)

25 ((*)
d°
)[
i
] = ((*)
§c
)[i];

26  (
d°
 + 
i
 + 1);

28 
i
++;

30  (
NULL
);

31 
	}
}

	@libft/ft_memchr.c

13 
	~"lib·.h
"

15 *
	$·_memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
i
 < 
n
)

22 i‡(*(*)
s
 =()
c
)

23  ((*)
s
);

24 
s
 = (*)s + 1;

25 
i
++;

27  (
NULL
);

28 
	}
}

	@libft/ft_memcmp.c

13 
	~"lib·.h
"

15 
	$·_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

17 
n
--)

19 i‡(*(*)
s1
 !*(*)
s2
)

20  (*(*)
s1
 - *(*)
s2
);

21 
s1
 = (*)s1 + 1;

22 
s2
 = (*)s2 + 1;

25 
	}
}

	@libft/ft_memcpy.c

13 
	~"lib·.h
"

15 *
	$·_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
i
 < 
n
)

22 ((*)
d°
)[
i
] = ((*)
§c
)[i];

23 
i
++;

25  (
d°
);

26 
	}
}

	@libft/ft_memdel.c

13 
	~"lib·.h
"

15 
	$·_memdñ
(**
≠
)

17 i‡(!
≠
)

19 
	`‰ì
(*
≠
);

20 *
≠
 = 
NULL
;

21 
	}
}

	@libft/ft_memmove.c

13 
	~"lib·.h
"

15 *
	$·_memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

17 i‡(
§c
 <
d°
)

18 
Àn
--)

19 ((*)
d°
)[
Àn
] = ((*)
§c
)[len];

21 
	`·_mem˝y
(
d°
, 
§c
, 
Àn
);

22  (
d°
);

23 
	}
}

	@libft/ft_memset.c

13 
	~"lib·.h
"

15 *
	$·_mem£t
(*
b
, 
c
, 
size_t
 
Àn
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
i
 < 
Àn
)

22 ((*)
b
)[
i
] = ()
c
;

23 
i
++;

25  (
b
);

26 
	}
}

	@libft/ft_putchar.c

13 
	~"lib·.h
"

15 
	$·_putch¨
(
c
)

17 
	`wrôe
(1, &
c
, 1);

18 
	}
}

	@libft/ft_putchar_fd.c

13 
	~"lib·.h
"

15 
	$·_putch¨_fd
(
c
, 
fd
)

17 
	`wrôe
(
fd
, &
c
, 1);

18 
	}
}

	@libft/ft_putendl.c

13 
	~"lib·.h
"

15 
	$·_puãndl
(*
°r
)

17 
ídl
;

19 
ídl
 = '\n';

20 
	`wrôe
(1, 
°r
, 
	`·_°æí
(str));

21 
	`wrôe
(1, &
ídl
, 1);

22 
	}
}

	@libft/ft_putendl_fd.c

13 
	~"lib·.h
"

15 
	$·_puãndl_fd
(*
°r
, 
fd
)

17 
ídl
;

19 
ídl
 = '\n';

20 
	`wrôe
(
fd
, 
°r
, 
	`·_°æí
(str));

21 
	`wrôe
(
fd
, &
ídl
, 1);

22 
	}
}

	@libft/ft_putnbr.c

13 
	~"lib·.h
"

15 
	$·_puäbr
(
n
)

17 i‡(
n
 < 0 &&Ç != -2147483648)

19 
	`·_putch¨
('-');

20 
	`·_puäbr
(-
n
);

22 i‡(
n
 == -2147483648)

23 
	`·_put°r
("-2147483648");

24 i‡(
n
 > 9)

26 
	`·_puäbr
(
n
 / 10);

27 
	`·_putch¨
((
n
 % 10) + '0');

30 
	`·_putch¨
((
n
 % 10) + '0');

31 
	}
}

	@libft/ft_putnbr_fd.c

13 
	~"lib·.h
"

15 
	$·_puäbr_fd
(
n
, 
fd
)

17 i‡(
n
 < 0 &&Ç != -2147483648)

19 
	`·_putch¨_fd
('-', 
fd
);

20 
	`·_puäbr_fd
(-
n
, 
fd
);

22 i‡(
n
 == -2147483648)

23 
	`·_put°r_fd
("-2147483648", 
fd
);

24 i‡(
n
 > 9)

26 
	`·_puäbr_fd
(
n
 / 10, 
fd
);

27 
	`·_putch¨_fd
((
n
 % 10Ë+ '0', 
fd
);

30 
	`·_putch¨_fd
((
n
 % 10Ë+ '0', 
fd
);

31 
	}
}

	@libft/ft_putstr.c

13 
	~"lib·.h
"

15 
	$·_put°r
(*
°r
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
°r
[
i
])

21 
i
++;

22 
	`wrôe
(1, 
°r
, 
i
);

23 
	}
}

	@libft/ft_putstr_fd.c

13 
	~"lib·.h
"

15 
	$·_put°r_fd
(*
°r
, 
fd
)

17 
	`wrôe
(
fd
, 
°r
, 
	`·_°æí
(str));

18 
	}
}

	@libft/ft_strcat.c

13 
	~"lib·.h
"

15 *
	$·_°rˇt
(*
s1
, c⁄° *
s2
)

17 
i
;

18 
n
;

20 
i
 = 0;

21 
n
 = 0;

22 
s1
[
n
])

23 
n
++;

24 
s2
[
i
])

26 
s1
[
n
 + 
i
] = 
s2
[i];

27 
i
++;

29 
s1
[
n
 + 
i
] = '\0';

30  (
s1
);

31 
	}
}

	@libft/ft_strchr.c

13 
	~"lib·.h
"

15 *
	$·_°rchr
(c⁄° *
s
, 
c
)

17 *
s
)

19 i‡(*
s
 =()
c
)

20  ((*)
s
);

21 
s
++;

23 i‡(*
s
 =()
c
)

24  ((*)
s
);

25  (
NULL
);

26 
	}
}

	@libft/ft_strchr_len.c

13 
	~"lib·.h
"

15 
size_t
 
	$·_°rchr_Àn
(c⁄° *
s
, 
c
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
s
[
i
])

22 i‡(
s
[
i
] =()
c
)

23  (
i
);

24 
i
++;

26 i‡(
s
[
i
] =()
c
)

27  (
i
);

29 
	}
}

	@libft/ft_strclr.c

13 
	~"lib·.h
"

15 *
	$·_°r˛r
(*
°r
)

17 i‡(!
°r
)

18  (
NULL
);

19 *
°r
)

21 *
°r
 = '\0';

22 
°r
++;

24 *
°r
 = '\0';

25  (
°r
);

26 
	}
}

	@libft/ft_strcmp.c

13 
	$·_°rcmp
(c⁄° *
s1
, c⁄° *
s2
)

15 *
s1
 =*
s2
 && *s1 && *s2)

17 
s1
++;

18 
s2
++;

20  (*(*)
s1
 - *(*)
s2
);

21 
	}
}

	@libft/ft_strcpy.c

13 
	~"lib·.h
"

15 *
	$·_°r˝y
(*
d°
, c⁄° *
§c
)

17 
i
;

19 
i
 = 0;

20 
§c
[
i
])

22 
d°
[
i
] = 
§c
[i];

23 
i
++;

24 i‡(!
§c
[
i
])

25 
d°
[
i
] = 
§c
[i];

27  (
d°
);

28 
	}
}

	@libft/ft_strdel.c

13 
	~"lib·.h
"

15 
	$·_°rdñ
(**
as
)

17 i‡(!
as
)

19 
	`‰ì
(*
as
);

20 *
as
 = 
NULL
;

21 
	}
}

	@libft/ft_strdup.c

13 
	~"lib·.h
"

15 *
	$·_°rdup
(*
°r
)

17 *
c›y
;

18 
i
;

20 
c›y
 = 
	`mÆloc
((Ë* 
	`·_°æí
(
°r
) + 1);

21 
i
 = 0;

22 
°r
[
i
])

24 
c›y
[
i
] = 
°r
[i];

25 
i
++;

27 
c›y
[
i
] = '\0';

28  (
c›y
);

29 
	}
}

	@libft/ft_strequ.c

13 
	~"lib·.h
"

15 
	$·_°ªqu
(c⁄° *
s1
, c⁄° *
s2
)

17 
size_t
 
i
;

18 
size_t
 
j
;

20 
i
 = 0;

21 i‡(!
s1
 || !
s2
)

23 
j
 = 
	`·_°æí
((*)
s1
);

24 i‡(
	`·_°æí
((*)
s2
Ë!
j
)

26 *
s1
 =*
s2
)

28 i‡(
i
 =
j
)

30 
i
++;

31 
s1
++;

32 
s2
++;

35 
	}
}

	@libft/ft_striter.c

13 
	~"lib·.h
"

15 
	$·_°rôî
(*
s
, (*
f
)(*))

17 i‡(!
s
)

19 i‡(!
f
)

21 *
s
)

23 
	`f
(
s
);

24 
s
++;

26 
	}
}

	@libft/ft_striteri.c

13 
	~"lib·.h
"

15 
	$·_°rôîi
(*
s
, (*
f
)(, *))

17 
size_t
 
i
;

19 
i
 = 0;

20 i‡(!
s
)

22 i‡(!
f
)

24 *
s
)

26 
	`f
(
i
, 
s
);

27 
s
++;

28 
i
++;

30 
	}
}

	@libft/ft_strjoin.c

13 
	~"lib·.h
"

15 *
	$·_°rjoö
(c⁄° *
s1
, c⁄° *
s2
)

17 
size_t
 
size
;

18 *
°r
;

20 i‡(!
s1
 || !
s2
)

21  (
NULL
);

22 
size
 = (
	`·_°æí
((*)
s1
Ë+ ft_°æí((*)
s2
));

23 i‡(!(
°r
 = 
	`·_°∫ew
(
size
 + 1)))

24  (
NULL
);

25 *
s1
)

27 *
°r
 = *(*)
s1
;

28 
s1
++;

29 
°r
++;

31 *
s2
)

33 *
°r
 = *(*)
s2
;

34 
s2
++;

35 
°r
++;

37 
°r
[1] = '\0';

38  (
°r
 - 
size
);

39 
	}
}

	@libft/ft_strlcat.c

13 
	~"lib·.h
"

15 
size_t
 
	$·_°æˇt
(*
s1
, c⁄° *
s2
, 
size_t
 
size
)

17 *
d
;

18 c⁄° *
s
;

19 
size_t
 
n
;

20 
size_t
 
dÀn
;

22 
d
 = 
s1
;

23 
s
 = 
s2
;

24 
n
 = 
size
;

25 
n
-- && *
d
)

26 
d
++;

27 
dÀn
 = 
d
 - 
s1
;

28 
n
 = 
size
 - 
dÀn
;

29 i‡(!
n
)

30  (
dÀn
 + 
	`·_°æí
((*)
s
));

31 *
s
 != '\0')

33 i‡(
n
 != 1)

35 *
d
++ = *
s
;

36 
n
--;

38 
s
++;

40 *
d
 = '\0';

41  (
dÀn
 + (
s
 - 
s2
));

42 
	}
}

	@libft/ft_strlen.c

13 
	~"lib·.h
"

15 
size_t
 
	$·_°æí
(*
°r
)

17 
i
;

19 
i
 = 0;

20 
°r
[
i
])

21 
i
++;

22  (
i
);

23 
	}
}

	@libft/ft_strmap.c

13 
	~"lib·.h
"

15 *
	$·_°rm≠
(c⁄° *
s
, (*
f
)())

17 
size_t
 
i
;

18 *
°r
;

20 
i
 = 0;

21 i‡(!(
°r
 = 
	`·_°∫ew
((
s
))Ë|| !†|| !
f
)

22  (
NULL
);

23 *
s
)

25 *
°r
 = 
	`f
(*(*)
s
);

26 
s
++;

27 
°r
++;

28 
i
++;

30  (
°r
 - 
i
);

31 
	}
}

	@libft/ft_strmapi.c

13 
	~"lib·.h
"

15 *
	$·_°rm≠i
(c⁄° *
s
, (*
f
)(, ))

17 
size_t
 
i
;

18 *
°r
;

20 
i
 = 0;

21 
°r
 = 
	`·_°∫ew
((
s
));

22 i‡(!
s
)

23  (
NULL
);

24 i‡(!
f
)

25  (
NULL
);

26 *
s
)

28 *
°r
 = 
	`f
(
i
, *(*)
s
);

29 
s
++;

30 
°r
++;

31 
i
++;

33  (
°r
 - 
i
);

34 
	}
}

	@libft/ft_strncat.c

13 
	~"lib·.h
"

15 *
	$·_°∫ˇt
(*
s1
, c⁄° *
s2
, 
size_t
 
n
)

17 
size_t
 
i
;

18 
size_t
 
j
;

20 
i
 = 0;

21 
j
 = 0;

22 
s1
[
j
])

23 
j
++;

24 
s2
[
i
] && i < 
n
)

26 
s1
[
j
 + 
i
] = 
s2
[i];

27 
i
++;

29 
s1
[
j
 + 
i
] = 0;

30  (
s1
);

31 
	}
}

	@libft/ft_strncmp.c

13 
	~"lib·.h
"

15 
	$·_°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
s1
[
i
] && 
s2
[i] && i < 
n
)

22 i‡(
s1
[
i
] !
s2
[i])

23  (((*)
s1
)[
i
] - ((*)
s2
)[i]);

24 
i
++;

26 i‡(
s1
[
i
] ='\0' && 
s2
[i] !'\0' && 
n
 > 0)

28 i‡(
s2
[
i
] ='\0' && 
s1
[i] !'\0' && 
n
 > 0)

31 
	}
}

	@libft/ft_strncpy.c

13 
	~"lib·.h
"

15 *
	$·_°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

17 
size_t
 
i
;

19 
i
 = 0;

20 
i
 < 
n
 && *
§c
)

22 *
d°
 = *
§c
;

23 
i
++;

24 
§c
++;

25 
d°
++;

27 
i
 < 
n
)

29 
	`·_bzîo
(
d°
, 1);

30 
i
++;

31 
d°
++;

33  (
d°
 - 
n
);

34 
	}
}

	@libft/ft_strnequ.c

13 
	~"lib·.h
"

15 
	$·_°∫equ
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

17 
size_t
 
i
;

18 
size_t
 
j
;

20 
i
 = 1;

21 i‡(!
s1
 || !
s2
)

23 
j
 = 
	`·_°æí
((*)
s1
) - 1;

24 i‡(
	`·_°æí
((*)
s2
Ë- 1 !
j
)

26 *
s1
 =*
s2
 && 
i
 <
n
)

28 i‡(
i
 =
j
 || i =
n
)

30 
s1
++;

31 
s2
++;

32 
i
++;

35 
	}
}

	@libft/ft_strnew.c

13 
	~"lib·.h
"

15 *
	$·_°∫ew
(
size_t
 
size
)

17 *
°r
;

19 i‡(!(
°r
 = 
	`·_memÆloc
(
size
)) || !size)

20  (
NULL
);

21 
	`·_bzîo
(
°r
, 
size
);

22  (
°r
);

23 
	}
}

	@libft/ft_strnstr.c

13 
	~"lib·.h
"

15 *
	$·_°∫°r
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

17 
size_t
 
i
;

18 
size_t
 
j
;

19 
size_t
 
k
;

21 
i
 = 0;

22 
j
 = 
	`·_°æí
((*)
s2
) - 1;

23 
k
 = 0;

24 i‡(!*
s2
)

25  ((*)
s1
);

26 *
s1
 && 
k
 < 
n
)

28 
s1
[
i
] =
s2
[i] && (ò+ 
k
Ë< 
n
)

30 i‡(
i
 =
j
)

31  ((*)
s1
);

32 
i
++;

34 
i
 = 0;

35 
k
++;

36 
s1
++;

38  (
NULL
);

39 
	}
}

	@libft/ft_strrchr.c

13 
	~"lib·.h
"

15 *
	$·_°ºchr
(c⁄° *
s
, 
c
)

17 
n
;

19 
n
 = 
	`·_°æí
((*)
s
);

20 
s
 +
n
;

21 
n
 + 1)

23 i‡(*
s
 =()
c
)

24  ((*)
s
);

25 
s
--;

26 
n
--;

28  (
NULL
);

29 
	}
}

	@libft/ft_strrchr_len.c

13 
	~"lib·.h
"

15 
	$·_°ºchr_Àn
(c⁄° *
s
, 
c
)

17 
size_t
 
n
;

18 
size_t
 
i
;

20 
n
 = 
	`·_°æí
((*)
s
);

21 
i
 = 0;

22 
i
 < 
n
 + 1)

24 i‡(
s
[
n
 - 
i
] =()
c
)

25  (
n
 - 
i
);

26 
i
++;

29 
	}
}

	@libft/ft_strsplit.c

13 
	~"lib·.h
"

15 
	$gë_w_nbr
(c⁄° *
°r
, 
c
)

17 
nbr
;

18 
i
;

20 
i
 = 1;

21 
nbr
 = 0;

22 i‡(
°r
[0] !
c
)

23 
nbr
++;

24 
°r
[
i
])

26 i‡(
°r
[
i
] !
c
 && str[i - 1] == c)

27 
nbr
++;

28 
i
++;

30  (
nbr
);

31 
	}
}

33 **
	$·_fû…ab
(c⁄° *
°r
, 
c
, **
èb
, 
nbr
)

35 
i
;

36 
j
;

37 
k
;

38 
l
;

40 
j
 = -1;

41 
i
 = 0;

42 ++
j
 < 
nbr
)

44 
°r
[
i
] && så[i] =
c
)

45 
i
++;

46 
k
 = 
i
;

47 
°r
[
i
] && !(°r[i] !
c
 && str[i + 1] == c))

48 
i
++;

49 
èb
[
j
] = (*)
	`mÆloc
((
i
 - 
k
 + 2) * ());

50 
l
 = 
k
;

51 
k
 <
i
)

53 
èb
[
j
][
k
 - 
l
] = 
°r
[k];

54 
k
++;

56 
èb
[
j
][
k
 - 
l
] = '\0';

57 
i
++;

59  (
èb
);

60 
	}
}

62 **
	$·_°r•lô
(c⁄° *
°r
, 
c
)

64 **
èb
;

65 
nbr
;

67 
èb
 = 
NULL
;

68 
nbr
 = 
	`gë_w_nbr
(
°r
, 
c
);

69 
èb
 = (**)
	`mÆloc
((
nbr
 + 1) * (*));

70 i‡(
èb
 =
NULL
)

71  (
NULL
);

72 
èb
[
nbr
] = 
NULL
;

73 i‡(*
°r
 == '\0')

74  (
èb
);

75 
èb
 = 
	`·_fû…ab
(
°r
, 
c
,Åab, 
nbr
);

76  (
èb
);

77 
	}
}

	@libft/ft_strstr.c

13 
	~"lib·.h
"

15 *
	$·_°r°r
(c⁄° *
s1
, c⁄° *
s2
)

17 
i
;

18 
j
;

20 
i
 = 0;

21 
j
 = 
	`·_°æí
((*)
s2
) - 1;

22 i‡(!*
s2
)

23  ((*)
s1
);

24 *
s1
)

26 
s1
[
i
] =
s2
[i])

28 i‡(
i
 =
j
)

29  ((*)
s1
);

30 
i
++;

32 
i
 = 0;

33 
s1
++;

35  (
NULL
);

36 
	}
}

	@libft/ft_strsub.c

13 
	~"lib·.h
"

15 *
	$·_°rsub
(c⁄° *
s
, 
°¨t
, 
size_t
 
Àn
)

17 
size_t
 
i
;

18 *
°r
;

20 
i
 = 0;

21 i‡(!
s
 || !
Àn
)

22  (
NULL
);

23 i‡(!(
°r
 = 
	`·_°∫ew
(
Àn
)))

24  (
NULL
);

25 
s
 +
°¨t
;

26 
Àn
--)

28 
°r
[
i
] = 
s
[i];

29 i‡(
°r
[
i
] == '\0')

30  (
°r
);

31 
i
++;

33 
°r
[
i
] = '\0';

34  (
°r
);

35 
	}
}

	@libft/ft_strtrim.c

13 
	~"lib·.h
"

15 *
	$·_°r˛ó√r
(c⁄° *
s
, 
size_t
 
°¨tbœnks
, size_à
ídbœnks
)

17 *
°r
;

18 
size_t
 
size
;

19 
size_t
 
i
;

21 
i
 = 0;

22 
°r
 = 
	`·_°rdup
((*)
s
);

23 i‡(!
°¨tbœnks
 && !
ídbœnks
)

24  (
°r
);

26 
size
 = 
	`·_°æí
((*)
s
Ë- 
°¨tbœnks
 - 
ídbœnks
 + 1;

27 i‡(!(
°r
 = 
	`·_°∫ew
(
size
 + 1)))

28  (
NULL
);

29 *
s
 == ' ' || *s == '\n' || *s == '\t')

30 
s
++;

31 *
s
 && 
i
 < 
size
 - 1)

33 
°r
[
i
] = *
s
;

34 
s
++;

35 
i
++;

37 
°r
[
i
] = '\0';

38  (
°r
);

39 
	}
}

41 *
	$·_cou¡bœnks
(c⁄° *
s
, 
size_t
 
lo›s
, size_à
¶í
)

43 
size_t
 
°¨tbœnks
;

44 
size_t
 
ídbœnks
;

46 
°¨tbœnks
 = 0;

47 
ídbœnks
 = 0;

48 *
s
)

50 
lo›s
 =0 && (*
s
 == ' ' || *s == '\n' || *s == '\t'))

52 
s
++;

53 
°¨tbœnks
++;

55 i‡(*
s
 != ' ' && *s != '\n' && *s != '\t')

57 
lo›s
 = 1;

58 
ídbœnks
 = 0;

59 
s
++;

61 *
s
 == ' ' || *s == '\n' || *s == '\t')

63 
ídbœnks
++;

64 
s
++;

67  (
	`·_°r˛ó√r
(
s
 - 
¶í
, 
°¨tbœnks
, 
ídbœnks
));

68 
	}
}

70 *
	$·_°πrim
(c⁄° *
s
)

72 *
°r
;

74 i‡(!
s
)

75  (
NULL
);

76 i‡(!(
°r
 = 
	`·_cou¡bœnks
(
s
, 0, 
	`·_°æí
((*)s))))

77  (
NULL
);

78  (
°r
);

79 
	}
}

	@libft/ft_strtrim_char.c

13 
	~"lib·.h
"

15 *
	$·_°r˛ó√r
(c⁄° *
s
, 
size_t
 
°¨tbœnks
, size_à
ídbœnks
)

17 *
°r
;

18 
size_t
 
size
;

19 
size_t
 
i
;

21 
i
 = 0;

22 i‡(!
°¨tbœnks
 && !
ídbœnks
)

23  ((*)
s
);

25 
size
 = 
	`·_°æí
((*)
s
Ë- 
°¨tbœnks
 - 
ídbœnks
 + 1;

26 i‡(!(
°r
 = 
	`·_°∫ew
(
size
 + 1)))

27  (
NULL
);

28 *
s
 == ' ' || *s == '\n' || *s == '\t')

29 
s
++;

30 *
s
 && 
i
 < 
size
 - 1)

32 
°r
[
i
] = *
s
;

33 
s
++;

34 
i
++;

36 
°r
[
i
] = '\0';

37  (
°r
);

38 
	}
}

40 *
	$·_cou¡bœnks
(c⁄° *
s
, 
size_t
 
lo›s
, size_à
¶í
, 
c
)

42 
size_t
 
°¨tbœnks
;

43 
size_t
 
ídbœnks
;

45 
°¨tbœnks
 = 0;

46 
ídbœnks
 = 0;

47 *
s
)

49 
lo›s
 =0 && *
s
 =
c
)

51 
s
++;

52 
°¨tbœnks
++;

54 i‡(*
s
 !
c
)

56 
lo›s
 = 1;

57 
ídbœnks
 = 0;

58 
s
++;

60 *
s
 =
c
)

62 
ídbœnks
++;

63 
s
++;

66  (
	`·_°r˛ó√r
(
s
 - 
¶í
, 
°¨tbœnks
, 
ídbœnks
));

67 
	}
}

69 *
	$·_°πrim_ch¨
(c⁄° *
s
, 
c
)

71 *
°r
;

73 i‡(!
s
)

74  (
NULL
);

75 i‡(!(
°r
 = 
	`·_cou¡bœnks
(
s
, 0, 
	`·_°æí
((*)s), 
c
)))

76  (
NULL
);

77  (
°r
);

78 
	}
}

	@libft/ft_swap.c

13 
	$·_sw≠
(*
a
, *
b
)

15 
c
;

17 
c
 = *
a
;

18 *
a
 = *
b
;

19 *
b
 = 
c
;

20 
	}
}

	@libft/ft_tabmalloc.c

13 
	~"lib·.h
"

15 **
	$·_èbmÆloc
(
size_t
 
nb°r
, size_à
¶í
)

17 **
°ab
;

18 
size_t
 
i
;

20 
i
 = 0;

21 i‡(!(
°ab
 = 
	`mÆloc
((*Ë* 
nb°r
)))

22  (
NULL
);

23 
	`·_bzîo
(
°ab
, 
nb°r
);

24 
i
 < 
nb°r
)

26 i‡(!(
°ab
[
i
] = (*)
	`mÆloc
((*Ë* 
¶í
)))

27  (
NULL
);

28 
	`·_bzîo
(
°ab
[
i
], 
¶í
);

29 
i
++;

31  (
°ab
);

32 
	}
}

	@libft/ft_tolower.c

13 
	~"lib·.h
"

15 
	$·_tﬁowî
(
c
)

17 i‡(
c
 >= 'A' && c <= 'Z')

18  (
c
 + 32);

20  (
c
);

21 
	}
}

	@libft/ft_toupper.c

13 
	~"lib·.h
"

15 
	$·_touµî
(
c
)

17 i‡(
c
 >= 'a' && c <= 'z')

18  (
c
 - 32);

20  (
c
);

21 
	}
}

	@libft/get_next_line.c

13 
	~"gë_√xt_löe.h
"

15 
	$·_°rmchr
(*
s
, 
c
)

17 *
p
;

19 i‡(!
s
)

21 i‡(
c
 == 0)

22  (
	`·_°æí
(
s
));

23 
p
 = 
	`·_°rchr
(
s
, 
c
);

24 i‡(
p
)

26  (()(
p
 - 
s
));

28  (
	`·_°æí
(
s
));

29 
	}
}

31 *
	$·_°r_magic
(*
°r1
, *
°r2
)

33 
max1
;

34 
max2
;

35 *
ªsu…
;

37 i‡(!
°r1
 || !
°r2
)

38  (
NULL
);

39 
max1
 = 
	`·_°rmchr
(
°r1
, '\n');

40 
max2
 = 
	`·_°rmchr
(
°r2
, '\n');

41 i‡(!(
ªsu…
 = 
	`·_°∫ew
(1 + 
	`·_°æí
(
°r1
Ë+ ft_°æí(
°r2
))))

42  (
NULL
);

43 
	`·_°∫ˇt
(
ªsu…
, 
°r1
, 
max1
);

44 
	`·_°∫ˇt
(
ªsu…
 + 
	`·_°æí
(
°r1
), 
°r2
, 
max2
);

45 
	`‰ì
(
°r1
);

46  (
ªsu…
);

47 
	}
}

49 *
	$°r_löe
(
fd
, **
ª°
, *
ªt
)

51 
agaö
;

52 *
löe
;

53 *
buf„r
;

54 *
tmp
;

56 
löe
 = 
	`·_°∫ew
(
BUFF_SIZE
 + 1);

57 
buf„r
 = 
	`·_°∫ew
(
BUFF_SIZE
 + 1);

58 
	`·_memmove
(
buf„r
, *
ª°
, 
	`MIN
(
	`·_°æí
(*ª°), 
BUFF_SIZE
));

59 
buf„r
 = 
	`·_°r˝y
(buf„r, *
ª°
);

60 
agaö
 = (!(
	`·_°rchr
(
buf„r
, '\n')));

61 
löe
 = 
	`·_°∫˝y
÷öe, 
buf„r
, 
	`·_°rmchr
(buffer, '\n'));

62 *
ªt
 = 1;

63 
agaö
 == 1)

65 
	`·_bzîo
(
buf„r
, 
BUFF_SIZE
);

66 *
ªt
 = 
	`ªad
(
fd
, 
buf„r
, 
BUFF_SIZE
);

67 
löe
 = 
	`·_°r_magic
÷öe, 
buf„r
);

68 
agaö
 = ((!(
	`·_°rchr
(
buf„r
, '\n'))Ë&& *
ªt
 =
BUFF_SIZE
);

70 
	`‰ì
(*
ª°
);

71 *
ª°
 = 
	`·_°∫ew
(
BUFF_SIZE
 + 1);

72 
tmp
 = 
	`·_°∫ew
(
BUFF_SIZE
 + 1);

73 *
ª°
 = 
	`·_°r˝y
(
tmp
, 
buf„r
 + 1 + 
	`·_°rmchr
(buffer, '\n'));

74 
	`‰ì
(
buf„r
);

75  (
löe
);

76 
	}
}

78 
t_fdg∆
 *
	$gë_¸ót_ñem
(
t_fdg∆
 **
begö
, 
fd
)

80 
t_fdg∆
 *
ñem
;

82 i‡(!
begö
)

83  (
NULL
);

84 
ñem
 = *
begö
;

85 
ñem
 &&ÉÀm->
fd
 != fd)

86 
ñem
 =ÉÀm->
√xt
;

87 i‡(!
ñem
)

89 i‡(!(
ñem
 = (
t_fdg∆
*)
	`mÆloc
((t_fdgnl))))

90  (
NULL
);

91 
ñem
->
fd
 = fd;

92 
ñem
->
ª°
 = 
	`·_°∫ew
(1 + 
BUFF_SIZE
);

93 
ñem
->
√xt
 = *
begö
;

94 *
begö
 = 
ñem
;

96  (
ñem
);

97 
	}
}

99 
	$gë_√xt_löe
(
fd
, **
löe
)

101 
t_fdg∆
 *
begö
 = 
NULL
;

102 
t_fdg∆
 *
ñem
;

103 *
°r
;

104 
ªt
;

106 
ªt
 = -1;

107 i‡(
fd
 < 0 || !
löe
)

109 
ñem
 = 
	`gë_¸ót_ñem
(&
begö
, 
fd
);

110 
°r
 = 
	`°r_löe
(
ñem
->
fd
, &”Àm->
ª°
), &
ªt
);

111 *
löe
 = 
°r
;

112 i‡(
ªt
 < 0)

114  (*
löe
 !
NULL
 && ((
ªt
 > 0Ë&& (
	`·_°æí
(*line) > 0)));

115 
	}
}

	@libft/gnl_anti_leaks.c

13 
	~"gë_√xt_löe.h
"

15 
	$‰ì_⁄e_node
(
t_fdg∆
 **
begö
, 
fd
)

17 
t_fdg∆
 *
¥ev
;

18 
t_fdg∆
 *
ñem
;

20 
ñem
 = *
begö
;

21 
¥ev
 = 
NULL
;

22 
ñem
->
√xt
 &&ÉÀm->
fd
 != fd)

24 
¥ev
 = 
ñem
;

25 
ñem
 =ÉÀm->
√xt
;

27 i‡(
ñem
->
fd
 == fd)

29 i‡(!
¥ev
)

31 *
begö
 = 
ñem
->
√xt
;

32 
	`‰ì
(
ñem
->
ª°
);

33 
	`‰ì
(
ñem
);

37 
¥ev
->
√xt
 = 
ñem
->next;

38 
	`‰ì
(
ñem
->
ª°
);

39 
	`‰ì
(
ñem
);

42 
	}
}

	@libft/overflow_test.c

13 
	~"lib·.h
"

15 *
	$˛ón_°r
(*
nb
)

17 
i
;

18 *
nbr
;

20 i‡((
i
 = 0Ë|| !
nb


21 || !(
nbr
 = 
	`·_°rdup
(
nb
)))

22  (
NULL
);

23 
nb
[
i
])

25 i‡(!(
nb
[
i
] == '-' ||Çb[i] == '+' || !(nb[i] >= 0 &&Çb[i] <= 9)))

26 
nbr
[
i
++] = ' ';

28 
i
 = 0;

29 
nbr
[
i
] == ' ')

30 
i
++;

31 i‡(
nbr
[
i
] == '+')

32 
i
++;

33 i‡(
i
)

34 
	`·_memmove
(
nbr
,Çb∏+ 
i
, 
	`·_°æí
(nbr) - i);

35 
i
 = 0;

36 i‡(
nbr
[
i
] == '-')

37 
i
++;

38 
nbr
[
i
] >= '0' &&Çbr[i] <= '9')

39 
i
++;

40 
nbr
[
i
] = '\0';

41  (
nbr
);

42 
	}
}

44 
	$is_öt_ovî_Êow
(*
numbî
)

46 *
tmp
;

47 *
˛ó√d
;

48 
vÆue
;

50 i‡(!(
˛ó√d
 = 
	`˛ón_°r
(
numbî
)))

52 
vÆue
 = 
	`·_©oi
(
˛ó√d
);

53 i‡(!(
tmp
 = 
	`·_ôﬂ
(
vÆue
)))

55 i‡(
tmp
[0] ='0' && 
˛ó√d
[0] != '0')

56 
tmp
[0] = '\0';

57 i‡(
	`·_°rcmp
(
˛ó√d
, 
tmp
) != 0)

59 
	`‰ì
(
tmp
);

62 
	`‰ì
(
tmp
);

64 
	}
}

	@minilibx/minilibx/mlx.h

30 #i‚de‡
MLX_H


32 
	#MLX_H


	)

35 *
mlx_öô
();

46 *
mlx_√w_wödow
(*
mlx_±r
, 
size_x
, 
size_y
, *
tôÀ
);

50 
mlx_˛ór_wödow
(*
mlx_±r
, *
wö_±r
);

51 
mlx_pixñ_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
);

63 *
mlx_√w_image
(*
mlx_±r
,
width
,
height
);

69 *
mlx_gë_d©a_addr
(*
img_±r
, *
bôs_≥r_pixñ
,

70 *
size_löe
, *
ídün
);

75 
mlx_put_image_to_wödow
(*
mlx_±r
, *
wö_±r
, *
img_±r
,

76 
x
, 
y
);

77 
mlx_gë_cﬁ‹_vÆue
(*
mlx_±r
, 
cﬁ‹
);

84 
mlx_mou£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

85 
mlx_key_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

86 
mlx_expo£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

88 
mlx_lo›_hook
 (*
mlx_±r
, (*
fun˘_±r
)(), *
∑øm
);

89 
mlx_lo›
 (*
mlx_±r
);

107 
mlx_°rög_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
,

108 *
°rög
);

109 *
mlx_xpm_to_image
(*
mlx_±r
, **
xpm_d©a
,

110 *
width
, *
height
);

111 *
mlx_xpm_fûe_to_image
(*
mlx_±r
, *
fûíame
,

112 *
width
, *
height
);

113 
mlx_de°roy_wödow
(*
mlx_±r
, *
wö_±r
);

115 
mlx_de°roy_image
(*
mlx_±r
, *
img_±r
);

122 
mlx_hook
(*
wö_±r
, 
x_evít
, 
x_mask
,

123 (*
fun˘
)(), *
∑øm
);

125 
mlx_do_key_aut‹ïótoff
(*
mlx_±r
);

126 
mlx_do_key_aut‹ïót⁄
(*
mlx_±r
);

127 
mlx_do_sync
(*
mlx_±r
);

	@minilibx/minilibx/mlx_clear_window.c

13 
	~"mlx_öt.h
"

16 
	$mlx_˛ór_wödow
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
)

18 
	`XCÀ¨Wödow
(
xv¨
->
di•œy
,
wö
->
wödow
);

19 i‡(
xv¨
->
do_Êush
)

20 
	`XFlush
(
xv¨
->
di•œy
);

21 
	}
}

	@minilibx/minilibx/mlx_destroy_image.c

12 
	~"mlx_öt.h
"

15 
	$mlx_de°roy_image
(
t_xv¨
 *
xv¨
, 
t_img
 *
img
)

17 i‡(
img
->
ty≥
 =
MLX_TYPE_SHM_PIXMAP
 ||

18 
img
->
ty≥
 =
MLX_TYPE_SHM
)

20 
	`XShmDëach
(
xv¨
->
di•œy
, &(
img
->
shm
));

21 
	`shmdt
(
img
->
shm
.
shmaddr
);

24 
	`XDe°royImage
(
img
->
image
);

25 
	`XFªePixm≠
(
xv¨
->
di•œy
, 
img
->
pix
);

26 i‡(
img
->
gc
)

27 
	`XFªeGC
(
xv¨
->
di•œy
, 
img
->
gc
);

28 
	`‰ì
(
img
);

29 i‡(
xv¨
->
do_Êush
)

30 
	`XFlush
(
xv¨
->
di•œy
);

31 
	}
}

	@minilibx/minilibx/mlx_destroy_window.c

12 
	~"mlx_öt.h
"

15 
	$mlx_de°roy_wödow
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
)

17 
t_wö_li°
 *
w
;

18 
t_wö_li°
 *
¥ev
;

19 
t_wö_li°
 
fú°
;

21 
fú°
.
√xt
 = 
xv¨
->
wö_li°
;

22 
¥ev
 = &
fú°
;

23 
w
 = 
¥ev
->
√xt
;

24 
w
)

26 i‡(
w
==
wö
)

27 
¥ev
->
√xt
 = 
w
->next;

29 
¥ev
 = 
w
;

30 
w
 = w->
√xt
;

32 
xv¨
->
wö_li°
 = 
fú°
.
√xt
;

33 
	`XDe°royWödow
(
xv¨
->
di•œy
,
wö
->
wödow
);

34 
	`XFªeGC
(
xv¨
->
di•œy
,
wö
->
gc
);

35 
	`‰ì
(
wö
);

36 i‡(
xv¨
->
do_Êush
)

37 
	`XFlush
(
xv¨
->
di•œy
);

38 
	}
}

	@minilibx/minilibx/mlx_expose_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_expo£_hook
(
t_wö_li°
 *
wö
,(*
fun˘
)(),*
∑øm
)

19 
wö
->
hooks
[
Expo£
].
hook
 = 
fun˘
;

20 
wö
->
hooks
[
Expo£
].
∑øm
 =Öaram;

21 
wö
->
hooks
[
Expo£
].
mask
 = 
ExposuªMask
;

22 
	}
}

	@minilibx/minilibx/mlx_flush_event.c

12 
	~"mlx_öt.h
"

17 
	$mlx_Êush_evít
(
t_xv¨
 *
xv¨
)

19 
XEvít
 
ev
;

21 
	`XPídög
(
xv¨
->
di•œy
))

23 
	`XNextEvít
(
xv¨
->
di•œy
,&
ev
);

25 
	}
}

	@minilibx/minilibx/mlx_get_color_value.c

12 
	~"mlx_öt.h
"

15 
	$mlx_gë_cﬁ‹_vÆue
(
t_xv¨
 *
xv¨
,
cﬁ‹
)

17 (
	`mlx_öt_gë_good_cﬁ‹
(
xv¨
,
cﬁ‹
));

18 
	}
}

20 
	$mlx_öt_gë_good_cﬁ‹
(
t_xv¨
 *
xv¨
,
cﬁ‹
)

22 
XCﬁ‹
 
xc
;

24 i‡(
xv¨
->
dïth
>=24)

25  (
cﬁ‹
);

26 
xc
.
ªd
 = (
cﬁ‹
>>8)&0xFF00;

27 
xc
.
gªí
 = 
cﬁ‹
&0xFF00;

28 
xc
.
blue
 = (
cﬁ‹
<<8)&0xFF00;

29 
xc
.
pixñ
 = ((xc.
ªd
>>(16-
xv¨
->
de¸gb
[1]))<<xvar->decrgb[0])+

30 ((
xc
.
gªí
>>(16-
xv¨
->
de¸gb
[3]))<<xvar->decrgb[2])+

31 ((
xc
.
blue
>>(16-
xv¨
->
de¸gb
[5]))<<xvar->decrgb[4]);

32  (
xc
.
pixñ
);

33 
	}
}

	@minilibx/minilibx/mlx_get_data_addr.c

13 
	~"mlx_öt.h
"

16 *
	$mlx_gë_d©a_addr
(
t_img
 *
img
,*
bôs_≥r_pixñ
,

17 *
size_löe
,*
ídün
)

19 *
bôs_≥r_pixñ
 = 
img
->
bµ
;

20 *
size_löe
 = 
img
->size_line;

21 *
ídün
 = 
img
->
image
->
byã_‹dî
;

22  (
img
->
d©a
);

23 
	}
}

	@minilibx/minilibx/mlx_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_hook
(
t_wö_li°
 *
wö
, 
x_evít
, 
x_mask
,

18 (*
fun˘
)(),*
∑øm
)

20 
wö
->
hooks
[
x_evít
].
hook
 = 
fun˘
;

21 
wö
->
hooks
[
x_evít
].
∑øm
 =Öaram;

22 
wö
->
hooks
[
x_evít
].
mask
 = 
x_mask
;

23 
	}
}

26 
	$mlx_do_key_aut‹ïótoff
(
t_xv¨
 *
xv¨
)

28 
	`XAutoRïótOff
(
xv¨
->
di•œy
);

29 
	}
}

31 
	$mlx_do_key_aut‹ïót⁄
(
t_xv¨
 *
xv¨
)

33 
	`XAutoRïótOn
(
xv¨
->
di•œy
);

34 
	}
}

37 
	$mlx_do_sync
(
t_xv¨
 *
xv¨
)

39 
	`XSync
(
xv¨
->
di•œy
, 
FÆ£
);

40 
	}
}

	@minilibx/minilibx/mlx_init.c

12 
	~"mlx_öt.h
"

16 *
	$mlx_öô
()

18 
t_xv¨
 *
xv¨
;

20 i‡(!(
xv¨
 = 
	`mÆloc
((*xv¨))Ë|| (xv¨->
di•œy
 = 
	`XO≥nDi•œy
(""))==0)

22 
xv¨
->
s¸ìn
 = 
	`DeÁu…S¸ìn
(xv¨->
di•œy
);

23 
xv¨
->
roŸ
 = 
	`DeÁu…RoŸWödow
(xv¨->
di•œy
);

24 
xv¨
->
cm≠
 = 
	`DeÁu…Cﬁ‹m≠
(xv¨->
di•œy
,xv¨->
s¸ìn
);

25 
xv¨
->
dïth
 = 
	`DeÁu…Dïth
(xv¨->
di•œy
,xv¨->
s¸ìn
);

26 i‡(
	`mlx_öt_gë_visuÆ
(
xv¨
)==-1)

28 
	`¥ötf
(
ERR_NO_TRUECOLOR
);

29 
	`exô
(1);

31 
xv¨
->
wö_li°
 = 0;

32 
xv¨
->
lo›_hook
 = 0;

33 
xv¨
->
lo›_∑øm
 = (*)0;

34 
xv¨
->
do_Êush
 = 1;

35 
	`mlx_öt_dól_shm
(
xv¨
);

36 i‡(
xv¨
->
¥iv©e_cm≠
)

37 
xv¨
->
cm≠
 = 
	`XCª©eCﬁ‹m≠
(xv¨->
di•œy
,xv¨->
roŸ
,

38 
xv¨
->
visuÆ
,
AŒocN⁄e
);

39 
	`mlx_öt_rgb_c⁄vîsi⁄
(
xv¨
);

40  (
xv¨
);

41 
	}
}

50 
	$mlx_öt_dól_shm
(
t_xv¨
 *
xv¨
)

52 
u£_pshm
;

53 
bid⁄
;

54 *
dpy
;

55 
buff
[33];

57 
xv¨
->
u£_xshm
 = 
	`XShmQuîyVîsi⁄
(xv¨->
di•œy
,&
bid⁄
,&bid⁄,&(
u£_pshm
));

58 i‡(
xv¨
->
u£_xshm
 && 
u£_pshm
)

59 
xv¨
->
pshm_f‹m©
 = 
	`XShmPixm≠F‹m©
(xv¨->
di•œy
);

61 
xv¨
->
pshm_f‹m©
 = -1;

62 
	`gëho°«me
(
buff
,32);

63 
dpy
 = 
	`gëív
(
ENV_DISPLAY
);

64 i‡(
dpy
 && 
	`°æí
(dpyË&& *dpy!=':' && 
	`°∫cmp
(dpy,
buff
,strlen(buff)) &&

65 
	`°∫cmp
(
dpy
,
LOCALHOST
,
	`°æí
(LOCALHOST)) )

67 
xv¨
->
pshm_f‹m©
 = -1;

68 
xv¨
->
u£_xshm
 = 0;

70 
	}
}

76 
	$mlx_öt_rgb_c⁄vîsi⁄
(
t_xv¨
 *
xv¨
)

78 
	`bzîo
(
xv¨
->
de¸gb
,()*6);

79 !(
xv¨
->
visuÆ
->
ªd_mask
&1))

80 { 
xv¨
->
visuÆ
->
ªd_mask
 >>1; xv¨->
de¸gb
[0] ++; }

81 
xv¨
->
visuÆ
->
ªd_mask
&1)

82 { 
xv¨
->
visuÆ
->
ªd_mask
 >>1; xv¨->
de¸gb
[1] ++; }

83 !(
xv¨
->
visuÆ
->
gªí_mask
&1))

84 { 
xv¨
->
visuÆ
->
gªí_mask
 >>1; xv¨->
de¸gb
[2] ++; }

85 
xv¨
->
visuÆ
->
gªí_mask
&1)

86 { 
xv¨
->
visuÆ
->
gªí_mask
 >>1; xv¨->
de¸gb
[3] ++; }

87 !(
xv¨
->
visuÆ
->
blue_mask
&1))

88 { 
xv¨
->
visuÆ
->
blue_mask
 >>1; xv¨->
de¸gb
[4] ++; }

89 
xv¨
->
visuÆ
->
blue_mask
&1)

90 { 
xv¨
->
visuÆ
->
blue_mask
 >>1; xv¨->
de¸gb
[5] ++; }

91 
	}
}

	@minilibx/minilibx/mlx_int.h

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<f˙é.h
>

23 
	~<sys/mm™.h
>

24 
	~<X11/Xlib.h
>

25 
	~<X11/Xutû.h
>

26 
	~<sys/ùc.h
>

27 
	~<sys/shm.h
>

28 
	~<X11/exãnsi⁄s/XShm.h
>

32 
	#MLX_TYPE_SHM_PIXMAP
 3

	)

33 
	#MLX_TYPE_SHM
 2

	)

34 
	#MLX_TYPE_XIMAGE
 1

	)

36 
	#MLX_MAX_EVENT
 
LASTEvít


	)

39 
	#ENV_DISPLAY
 "DISPLAY"

	)

40 
	#LOCALHOST
 "loˇlho°"

	)

41 
	#ERR_NO_TRUECOLOR
 "MöûibX Eº‹ : NÿTrueCﬁ‹ VisuÆávaûabÀ.\n"

	)

42 
	#WARN_SHM_ATTACH
 "MöûibX W¨nög : X sîvî c™'à©èch sh¨ed mem‹y.\n"

	)

45 
	ss_xpm_cﬁ


47 
	m«me
;

48 
	mcﬁ
;

49 } 
	tt_xpm_cﬁ
;

52 
	ss_cﬁ_«me


54 *
	m«me
;

55 
	mcﬁ‹
;

58 
	ss_evít_li°


60 
	mmask
;

61 (*
	mhook
)();

62 *
	m∑øm
;

63 } 
	tt_evít_li°
;

66 
	ss_wö_li°


68 
Wödow
 
	mwödow
;

69 
GC
 
	mgc
;

70 
s_wö_li°
 *
	m√xt
;

71 (*
	mmou£_hook
)();

72 (*
	mkey_hook
)();

73 (*
	mexpo£_hook
)();

74 *
	mmou£_∑øm
;

75 *
	mkey_∑øm
;

76 *
	mexpo£_∑øm
;

77 
t_evít_li°
 
	mhooks
[
MLX_MAX_EVENT
];

78 } 
	tt_wö_li°
;

81 
	ss_img


83 
XImage
 *
	mimage
;

84 
Pixm≠
 
	mpix
;

85 
GC
 
	mgc
;

86 
	msize_löe
;

87 
	mbµ
;

88 
	mwidth
;

89 
	mheight
;

90 
	mty≥
;

91 
	mf‹m©
;

92 *
	md©a
;

93 
XShmSegmítInfo
 
	mshm
;

94 } 
	tt_img
;

96 
	ss_xv¨


98 
Di•œy
 *
	mdi•œy
;

99 
Wödow
 
	mroŸ
;

100 
	ms¸ìn
;

101 
	mdïth
;

102 
VisuÆ
 *
	mvisuÆ
;

103 
Cﬁ‹m≠
 
	mcm≠
;

104 
	m¥iv©e_cm≠
;

105 
t_wö_li°
 *
	mwö_li°
;

106 (*
	mlo›_hook
)();

107 *
	mlo›_∑øm
;

108 
	mu£_xshm
;

109 
	mpshm_f‹m©
;

110 
	mdo_Êush
;

111 
	mde¸gb
[6];

112 } 
	tt_xv¨
;

115 
mlx_öt_do_nŸhög
();

116 
mlx_öt_gë_good_cﬁ‹
();

117 
mlx_öt_föd_ö_pcm
();

118 
mlx_öt_™ti_ªsize_wö
();

119 
mlx_öt_waô_fú°_expo£
();

120 
mlx_öt_rgb_c⁄vîsi⁄
();

121 
mlx_öt_dól_shm
();

122 *
mlx_öt_√w_xshm_image
();

123 **
mlx_öt_°r_to_w‹dèb
();

124 *
mlx_√w_image
();

125 
shm_©t_pb
();

	@minilibx/minilibx/mlx_int_anti_resize_win.c

11 
	~"mlx_öt.h
"

14 
	$mlx_öt_™ti_ªsize_wö
(
t_xv¨
 *
xv¨
,
Wödow
 
wö
,
w
,
h
)

16 
XSizeHöts
 
höts
;

17 
tŸo
;

19 
	`XGëWMN‹mÆHöts
(
xv¨
->
di•œy
,
wö
,&
höts
,&
tŸo
);

20 
höts
.
width
 = 
w
;

21 
höts
.
height
 = 
h
;

22 
höts
.
mö_width
 = 
w
;

23 
höts
.
mö_height
 = 
h
;

24 
höts
.
max_width
 = 
w
;

25 
höts
.
max_height
 = 
h
;

26 
höts
.
Êags
 = 
PPosôi⁄
 | 
PSize
 | 
PMöSize
 | 
PMaxSize
;

27 
	`XSëWMN‹mÆHöts
(
xv¨
->
di•œy
,
wö
,&
höts
);

28 
	}
}

	@minilibx/minilibx/mlx_int_do_nothing.c

13 
	$mlx_öt_do_nŸhög
(*
∑øm
)

16 
	}
}

	@minilibx/minilibx/mlx_int_get_visual.c

13 
	~"mlx_öt.h
"

21 
	$mlx_öt_gë_visuÆ
(
t_xv¨
 *
xv¨
)

23 
XVisuÆInfo
 *
vi
;

24 
XVisuÆInfo
 
ãm∂©e
;

25 
nb_ôem
;

27 
xv¨
->
¥iv©e_cm≠
 = 0;

28 
xv¨
->
visuÆ
 = 
	`DeÁu…VisuÆ
(xv¨->
di•œy
,xv¨->
s¸ìn
);

29 i‡(
xv¨
->
visuÆ
->
˛ass
 =
TrueCﬁ‹
)

31 
ãm∂©e
.
˛ass
 = 
TrueCﬁ‹
;

32 
ãm∂©e
.
dïth
 = 
xv¨
->depth;

33 i‡(!(
vi
 = 
	`XGëVisuÆInfo
(
xv¨
->
di•œy
,
VisuÆDïthMask
|
VisuÆCœssMask
,

34 &
ãm∂©e
,&
nb_ôem
)) )

36 
xv¨
->
visuÆ
 = 
vi
->visual;

37 
xv¨
->
¥iv©e_cm≠
 = 1;

39 
	}
}

	@minilibx/minilibx/mlx_int_param_event.c

11 
	~"mlx_öt.h
"

13 
	$mlx_öt_∑øm_undef
()

15 
	}
}

17 
	$mlx_öt_∑øm_KeyPªss
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

19 
wö
->
hooks
[
KeyPªss
].
	`hook
(
	`XkbKeycodeToKeysym
(
xv¨
->
di•œy
,

20 
ev
->
xkey
.
keycode
, 0, 0),

21 
wö
->
hooks
[
KeyPªss
].
∑øm
);

22 
	}
}

24 
	$mlx_öt_∑øm_KeyRñó£
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

26 
wö
->
hooks
[
KeyRñó£
].
	`hook
(
	`XkbKeycodeToKeysym
(
xv¨
->
di•œy
,

27 
ev
->
xkey
.
keycode
, 0, 0),

28 
wö
->
hooks
[
KeyRñó£
].
∑øm
);

29 
	}
}

31 
	$mlx_öt_∑øm_Buâ⁄Pªss
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

33 
wö
->
hooks
[
Buâ⁄Pªss
].
	`hook
(
ev
->
xbuâ⁄
.
buâ⁄
,ev->xbuâ⁄.
x
,ev->xbuâ⁄.
y
,

34 
wö
->
hooks
[
Buâ⁄Pªss
].
∑øm
);

35 
	}
}

37 
	$mlx_öt_∑øm_Buâ⁄Rñó£
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

39 
wö
->
hooks
[
Buâ⁄Rñó£
].
	`hook
(
ev
->
xbuâ⁄
.
buâ⁄
,

40 
ev
->
xbuâ⁄
.
x
,Év->xbuâ⁄.
y
,

41 
wö
->
hooks
[
Buâ⁄Rñó£
].
∑øm
);

42 
	}
}

44 
	$mlx_öt_∑øm_MŸi⁄NŸify
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

46 
wö
->
hooks
[
MŸi⁄NŸify
].
	`hook
(
ev
->
xbuâ⁄
.
x
,ev->xbuâ⁄.
y
,

47 
wö
->
hooks
[
MŸi⁄NŸify
].
∑øm
);

48 
	}
}

50 
	$mlx_öt_∑øm_Expo£
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

52 i‡(!
ev
->
xexpo£
.
cou¡
)

53 
wö
->
hooks
[
Expo£
].
	`hook
(wö->hooks[Expo£].
∑øm
);

54 
	}
}

57 
	$mlx_öt_∑øm_gíîic
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

59 
wö
->
hooks
[
ev
->
ty≥
].
	`hook
(wö->hooks[ev->ty≥].
∑øm
);

60 
	}
}

62 (*(
	gmlx_öt_∑øm_evít
[]))() =

64 
mlx_öt_∑øm_undef
,

65 
mlx_öt_∑øm_undef
,

66 
mlx_öt_∑øm_KeyPªss
,

67 
mlx_öt_∑øm_KeyRñó£
,

68 
mlx_öt_∑øm_Buâ⁄Pªss
,

69 
mlx_öt_∑øm_Buâ⁄Rñó£
,

70 
mlx_öt_∑øm_MŸi⁄NŸify
,

71 
mlx_öt_∑øm_gíîic
,

72 
mlx_öt_∑øm_gíîic
,

73 
mlx_öt_∑øm_gíîic
,

74 
mlx_öt_∑øm_gíîic
,

75 
mlx_öt_∑øm_gíîic
,

76 
mlx_öt_∑øm_Expo£
,

77 
mlx_öt_∑øm_gíîic
,

78 
mlx_öt_∑øm_gíîic
,

79 
mlx_öt_∑øm_gíîic
,

80 
mlx_öt_∑øm_gíîic
,

81 
mlx_öt_∑øm_gíîic
,

82 
mlx_öt_∑øm_gíîic
,

83 
mlx_öt_∑øm_gíîic
,

84 
mlx_öt_∑øm_gíîic
,

85 
mlx_öt_∑øm_gíîic
,

86 
mlx_öt_∑øm_gíîic
,

87 
mlx_öt_∑øm_gíîic
,

88 
mlx_öt_∑øm_gíîic
,

89 
mlx_öt_∑øm_gíîic
,

90 
mlx_öt_∑øm_gíîic
,

91 
mlx_öt_∑øm_gíîic
,

92 
mlx_öt_∑øm_gíîic
,

93 
mlx_öt_∑øm_gíîic
,

94 
mlx_öt_∑øm_gíîic
,

95 
mlx_öt_∑øm_gíîic
,

96 
mlx_öt_∑øm_gíîic
,

97 
mlx_öt_∑øm_gíîic
,

98 
mlx_öt_∑øm_gíîic
,

99 
mlx_öt_∑øm_gíîic


	@minilibx/minilibx/mlx_int_set_win_event_mask.c

12 
	~"mlx_öt.h
"

17 
	$mlx_öt_£t_wö_evít_mask
(
t_xv¨
 *
xv¨
)

19 
t_wö_li°
 *
wö
;

20 
mask
;

21 
i
;

22 
XSëWödowAâribuãs
 
xwa
;

24 
wö
 = 
xv¨
->
wö_li°
;

25 
wö
)

27 
xwa
.
evít_mask
 = 0;

28 
i
 = 
MLX_MAX_EVENT
;

29 
i
--)

30 
xwa
.
evít_mask
 |
wö
->
hooks
[
i
].
mask
;

31 
	`XCh™geWödowAâribuãs
(
xv¨
->
di•œy
, 
wö
->
wödow
, 
CWEvítMask
, &
xwa
);

32 
wö
 = wö->
√xt
;

34 
	}
}

	@minilibx/minilibx/mlx_int_str_to_wordtab.c

12 
	~"mlx_öt.h
"

15 
	$mlx_öt_°r_°r
(*
°r
,*
föd
,
Àn
)

17 
Àn_f
;

18 
pos
;

19 *
s
;

20 *
f
;

22 
Àn_f
 = 
	`°æí
(
föd
);

23 i‡(
Àn_f
>
Àn
)

25 
pos
 = 0;

26 *(
°r
+
Àn_f
-1))

28 
s
 = 
°r
;

29 
f
 = 
föd
;

30 *(
f
++Ë=*(
s
++))

31 i‡(!*
f
)

32  (
pos
);

33 
°r
 ++;

34 
pos
 ++;

37 
	}
}

41 
	$mlx_öt_°r_°r_cŸe
(*
°r
,*
föd
,
Àn
)

43 
Àn_f
;

44 
pos
;

45 *
s
;

46 *
f
;

47 
cŸe
;

49 
Àn_f
 = 
	`°æí
(
föd
);

50 i‡(
Àn_f
>
Àn
)

52 
cŸe
 = 0;

53 
pos
 = 0;

54 *(
°r
+
Àn_f
-1))

56 i‡(*
°r
=='"')

57 
cŸe
 = 1-cote;

58 i‡(!
cŸe
)

60 
s
 = 
°r
;

61 
f
 = 
föd
;

62 *(
f
++Ë=*(
s
++))

63 i‡(!*
f
)

64  (
pos
);

66 
°r
 ++;

67 
pos
 ++;

70 
	}
}

73 **
	$mlx_öt_°r_to_w‹dèb
(*
°r
)

75 **
èb
;

76 
pos
;

77 
nb_w‹d
;

78 
Àn
;

80 
Àn
 = 
	`°æí
(
°r
);

81 
nb_w‹d
 = 0;

82 
pos
 = 0;

83 
pos
<
Àn
)

85 *(
°r
+
pos
)==' ' || *(str+pos)=='\t')

86 
pos
 ++;

87 i‡(*(
°r
+
pos
))

88 
nb_w‹d
 ++;

89 *(
°r
+
pos
) && *(str+pos)!=' ' && *(str+pos)!='\t')

90 
pos
 ++;

92 i‡(!(
èb
 = 
	`mÆloc
((1+
nb_w‹d
)*(*tab))))

94 
nb_w‹d
 = 0;

95 
pos
 = 0;

96 
pos
<
Àn
)

98 *(
°r
+
pos
)==' ' || *(str+pos)=='\t')

100 *(
°r
+
pos
) = 0;

101 
pos
 ++;

103 i‡(*(
°r
+
pos
))

105 
èb
[
nb_w‹d
] = 
°r
+
pos
;

106 
nb_w‹d
 ++;

108 *(
°r
+
pos
) && *(str+pos)!=' ' && *(str+pos)!='\t')

109 
pos
 ++;

111 
èb
[
nb_w‹d
] = 0;

112  (
èb
);

113 
	}
}

	@minilibx/minilibx/mlx_int_wait_first_expose.c

13 
	~"mlx_öt.h
"

17 
	$mlx_öt_waô_fú°_expo£
(
t_xv¨
 *
xv¨
,
Wödow
 
wö
)

19 
XEvít
 
ev
;

21 
	`XWödowEvít
(
xv¨
->
di•œy
,
wö
,
ExposuªMask
,&
ev
);

22 
	`XPutBackEvít
(
xv¨
->
di•œy
,&
ev
);

23 
	}
}

	@minilibx/minilibx/mlx_key_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_key_hook
(
t_wö_li°
 *
wö
,(*
fun˘
)(),*
∑øm
)

19 
wö
->
hooks
[
KeyRñó£
].
hook
 = 
fun˘
;

20 
wö
->
hooks
[
KeyRñó£
].
∑øm
 =Öaram;

21 
wö
->
hooks
[
KeyRñó£
].
mask
 = 
KeyRñó£Mask
;

22 
	}
}

	@minilibx/minilibx/mlx_lib_xpm.c

12 
	~"mlx_öt.h
"

17 *
	$mlx_öt_xpm_f_image
(
t_xv¨
 *
xv¨
,*
width
,*
height
,

18 (*
xpm_func
)(),*
∑øm
)

20 
XImage
 *
img1
;

21 
XImage
 *
img2
;

22 
t_img
 *
im2
;

23 
XpmAâribuãs
 
xpm_©t
;

25 
xpm_©t
.
visuÆ
 = 
xv¨
->visual;

26 
xpm_©t
.
cﬁ‹m≠
 = 
xv¨
->
cm≠
;

27 
xpm_©t
.
dïth
 = 
xv¨
->depth;

28 
xpm_©t
.
bôm≠_f‹m©
 = 
ZPixm≠
;

29 
xpm_©t
.
vÆuemask
 = 
XpmDïth
|
XpmBôm≠F‹m©
|
XpmVisuÆ
|
XpmCﬁ‹m≠
;

30 i‡(
	`xpm_func
(
xv¨
->
di•œy
,
∑øm
,&
img1
,&
img2
,&
xpm_©t
))

32 i‡(
img2
)

33 
	`XDe°royImage
(
img2
);

35 i‡(!(
im2
 = (*)
	`mlx_√w_image
(
xv¨
,
img1
->
width
,img1->
height
)))

37 
	`XDe°royImage
(
img1
);

40 *
width
 = 
img1
->width;

41 *
height
 = 
img1
->height;

42 i‡(
	`mlx_öt_egÆ_img
(
im2
->
image
,
img1
))

44 
	`bc›y
(
img1
->
d©a
,
im2
->d©a,img1->
height
*img1->
byãs_≥r_löe
);

45 
	`XDe°royImage
(
img1
);

46  (
im2
);

48 i‡(
im2
->
ty≥
==
MLX_TYPE_SHM_PIXMAP
)

50 
	`XFªePixm≠
(
xv¨
->
di•œy
,
im2
->
pix
);

51 
im2
->
pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,

52 *
width
,*
height
,
xv¨
->
dïth
);

54 i‡(
im2
->
ty≥
>
MLX_TYPE_XIMAGE
)

56 
	`XShmDëach
(
xv¨
->
di•œy
,&(
im2
->
shm
));

57 
	`shmdt
(
im2
->
d©a
);

59 
	`XDe°royImage
(
im2
->
image
);

60 
im2
->
image
 = 
img1
;

61 
im2
->
d©a
 = 
img1
->data;

62 
im2
->
ty≥
 = 
MLX_TYPE_XIMAGE
;

63 
im2
->
size_löe
 = 
img1
->
byãs_≥r_löe
;

64 
im2
->
bµ
 = 
img1
->
bôs_≥r_pixñ
;

65  (
im2
);

66 
	}
}

69 
	$mlx_öt_egÆ_img
(
XImage
 *
img1
,XImagê*
img2
)

71 i‡(
img1
->
width
!=
img2
->width || img1->
height
!=img2->height ||

72 
img1
->
xoff£t
!=
img2
->xoff£à|| img1->
f‹m©
!=img2->format ||

73 
img1
->
byã_‹dî
!=
img2
->byte_order ||

74 
img1
->
bôm≠_unô
!=
img2
->bitmap_unit ||

75 
img1
->
bôm≠_bô_‹dî
!=
img2
->bitmap_bit_order ||

76 
img1
->
bôm≠_∑d
!=
img2
->bôm≠_∑d || img1->
dïth
!=img2->depth ||

77 
img1
->
byãs_≥r_löe
!=
img2
->bytes_per_line ||

78 
img1
->
bôs_≥r_pixñ
!=
img2
->bits_per_pixel ||

79 
img1
->
ªd_mask
!=
img2
->ªd_mask || img1->
gªí_mask
!=img2->green_mask ||

80 
img1
->
blue_mask
!=
img2
->blue_mask )

83 
	}
}

86 *
	$mlx_xpm_fûe_to_image
(
t_xv¨
 *
xv¨
,*
fûíame
,

87 *
width
,*
height
)

89  (
	`mlx_öt_xpm_f_image
(
xv¨
,
width
,
height
,
XpmRódFûeToImage
,
fûíame
));

90 
	}
}

93 *
	$mlx_xpm_to_image
(
t_xv¨
 *
xv¨
,**
d©a
,*
width
,*
height
)

95  (
	`mlx_öt_xpm_f_image
(
xv¨
,
width
,
height
,
XpmCª©eImageFromD©a
,(*)
d©a
));

96 
	}
}

	@minilibx/minilibx/mlx_loop.c

12 
	~"mlx_öt.h
"

14 (*(
mlx_öt_∑øm_evít
[]))();

17 
	$mlx_lo›
(
t_xv¨
 *
xv¨
)

19 
XEvít
 
ev
;

20 
t_wö_li°
 *
wö
;

22 
	`mlx_öt_£t_wö_evít_mask
(
xv¨
);

23 
xv¨
->
do_Êush
 = 0;

26 !
xv¨
->
lo›_hook
 || 
	`XPídög
(xv¨->
di•œy
))

28 
	`XNextEvít
(
xv¨
->
di•œy
,&
ev
);

29 
wö
 = 
xv¨
->
wö_li°
;

30 
wö
 && (wö->
wödow
!=
ev
.
x™y
.window))

31 
wö
 = wö->
√xt
;

32 i‡(
wö
 && 
ev
.
ty≥
 < 
MLX_MAX_EVENT
)

33 i‡(
wö
->
hooks
[
ev
.
ty≥
].
hook
)

34 
mlx_öt_∑øm_evít
[
ev
.
ty≥
](
xv¨
, &ev, 
wö
);

36 
xv¨
->
	`lo›_hook
(xv¨->
lo›_∑øm
);

38 
	}
}

	@minilibx/minilibx/mlx_loop_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_lo›_hook
(
t_xv¨
 *
xv¨
,(*
fun˘
)(),*
∑øm
)

19 
xv¨
->
lo›_hook
 = 
fun˘
;

20 
xv¨
->
lo›_∑øm
 = 
∑øm
;

21 
	}
}

	@minilibx/minilibx/mlx_mouse_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_mou£_hook
(
t_wö_li°
 *
wö
,(*
fun˘
)(),*
∑øm
)

19 
wö
->
hooks
[
Buâ⁄Pªss
].
hook
 = 
fun˘
;

20 
wö
->
hooks
[
Buâ⁄Pªss
].
∑øm
 =Öaram;

21 
wö
->
hooks
[
Buâ⁄Pªss
].
mask
 = 
Buâ⁄PªssMask
;

22 
	}
}

	@minilibx/minilibx/mlx_new_image.c

14 
	~"mlx_öt.h
"

20 
	#X_ShmAâach
 1

	)

22 
	gmlx_X_îr‹
;

24 
	$shm_©t_pb
(
Di•œy
 *
d
,
XEº‹Evít
 *
ev
)

26 i‡(
ev
->
ªque°_code
==146 &&Év->
mö‹_code
==
X_ShmAâach
)

27 
	`wrôe
(2,
WARN_SHM_ATTACH
,
	`°æí
(WARN_SHM_ATTACH));

28 
mlx_X_îr‹
 = 1;

29 
	}
}

37 *
	$mlx_öt_√w_xshm_image
(
t_xv¨
 *
xv¨
,
width
,
height
,
f‹m©
)

39 
t_img
 *
img
;

40 (*
ßve_h™dÀr
)();

42 i‡(!(
img
 = 
	`mÆloc
((*img))))

44 
	`bzîo
(
img
,(*img));

45 
img
->
d©a
 = 0;

46 
img
->
image
 = 
	`XShmCª©eImage
(
xv¨
->
di•œy
,xv¨->
visuÆ
,xv¨->
dïth
,

47 
f‹m©
,
img
->
d©a
,&(img->
shm
),
width
,
height
);

48 i‡(!
img
->
image
)

50 
	`‰ì
(
img
);

53 
img
->
width
 = width;

54 
img
->
height
 = height;

55 
img
->
size_löe
 = img->
image
->
byãs_≥r_löe
;

56 
img
->
bµ
 = img->
image
->
bôs_≥r_pixñ
;

57 
img
->
f‹m©
 = format;

58 
img
->
shm
.
shmid
 = 
	`shmgë
(
IPC_PRIVATE
,(
width
+32)*
height
*4,
IPC_CREAT
|0777);

59 i‡(
img
->
shm
.
shmid
==-1)

61 
	`XDe°royImage
(
img
->
image
);

62 
	`‰ì
(
img
);

65 
img
->
d©a
 = img->
shm
.
shmaddr
 = img->
image
->d©®
	`shm©
(img->shm.
shmid
,0,0);

66 i‡(
img
->
d©a
==(*)-1)

68 
	`shm˘l
(
img
->
shm
.
shmid
,
IPC_RMID
,0);

69 
	`XDe°royImage
(
img
->
image
);

70 
	`‰ì
(
img
);

73 
img
->
shm
.
ªadO∆y
 = 
FÆ£
;

74 
mlx_X_îr‹
 = 0;

75 
ßve_h™dÀr
 = 
	`XSëEº‹H™dÀr
(
shm_©t_pb
);

76 i‡(!
	`XShmAâach
(
xv¨
->
di•œy
,&(
img
->
shm
)) ||

77 0&
	`XSync
(
xv¨
->
di•œy
,
FÆ£
Ë|| 
mlx_X_îr‹
)

79 
	`XSëEº‹H™dÀr
(
ßve_h™dÀr
);

80 
	`shmdt
(
img
->
d©a
);

81 
	`shm˘l
(
img
->
shm
.
shmid
,
IPC_RMID
,0);

82 
	`XDe°royImage
(
img
->
image
);

83 
	`‰ì
(
img
);

86 
	`XSëEº‹H™dÀr
(
ßve_h™dÀr
);

87 
	`shm˘l
(
img
->
shm
.
shmid
,
IPC_RMID
,0);

88 i‡(
xv¨
->
pshm_f‹m©
==
f‹m©
)

90 
img
->
pix
 = 
	`XShmCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,img->
shm
.
shmaddr
,

91 &(
img
->
shm
),
width
,
height
,
xv¨
->
dïth
);

92 
img
->
ty≥
 = 
MLX_TYPE_SHM_PIXMAP
;

96 
img
->
pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,

97 
width
,
height
,
xv¨
->
dïth
);

98 
img
->
ty≥
 = 
MLX_TYPE_SHM
;

100 i‡(
xv¨
->
do_Êush
)

101 
	`XFlush
(
xv¨
->
di•œy
);

102  (
img
);

103 
	}
}

107 *
	$mlx_öt_√w_image
(
t_xv¨
 *
xv¨
,
width
, 
height
,
f‹m©
)

109 
t_img
 *
img
;

111 i‡(!(
img
 = 
	`mÆloc
((*img))) ||

112 !(
img
->
d©a
 = 
	`mÆloc
((
width
+32)*
height
*4)))

114 
	`bzîo
(
img
->
d©a
,(
width
+32)*
height
*4);

115 
img
->
image
 = 
	`XCª©eImage
(
xv¨
->
di•œy
,xv¨->
visuÆ
,xv¨->
dïth
,
f‹m©
,0,

116 
img
->
d©a
,
width
,
height
,32,0);

117 i‡(!
img
->
image
)

119 
	`‰ì
(
img
->
d©a
);

120 
	`‰ì
(
img
);

123 
img
->
gc
 = 0;

124 
img
->
size_löe
 = img->
image
->
byãs_≥r_löe
;

125 
img
->
bµ
 = img->
image
->
bôs_≥r_pixñ
;

126 
img
->
width
 = width;

127 
img
->
height
 = height;

128 
img
->
pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,
width
,
height
,xv¨->
dïth
);

129 
img
->
f‹m©
 = format;

130 
img
->
ty≥
 = 
MLX_TYPE_XIMAGE
;

131 i‡(
xv¨
->
do_Êush
)

132 
	`XFlush
(
xv¨
->
di•œy
);

133  (
img
);

134 
	}
}

137 *
	$mlx_√w_image
(
t_xv¨
 *
xv¨
,
width
, 
height
)

139 
t_img
 *
img
;

141 i‡(
xv¨
->
u£_xshm
)

142 i‡(
img
 = 
	`mlx_öt_√w_xshm_image
(
xv¨
,
width
,
height
,
ZPixm≠
))

143  (
img
);

144  (
	`mlx_öt_√w_image
(
xv¨
,
width
,
height
,
ZPixm≠
));

145 
	}
}

147 *
	$mlx_√w_image2
(
t_xv¨
 *
xv¨
,
width
, 
height
)

149 
t_img
 *
img
;

151 i‡(
xv¨
->
u£_xshm
)

152 i‡(
img
 = 
	`mlx_öt_√w_xshm_image
(
xv¨
,
width
,
height
,
XYPixm≠
))

153  (
img
);

154  (
	`mlx_öt_√w_image
(
xv¨
,
width
,
height
,
XYPixm≠
));

155 
	}
}

	@minilibx/minilibx/mlx_new_window.c

19 
	~"mlx_öt.h
"

22 *
	$mlx_√w_wödow
(
t_xv¨
 *
xv¨
,
size_x
,
size_y
,*
tôÀ
)

24 
t_wö_li°
 *
√w_wö
;

25 
XSëWödowAâribuãs
 
xswa
;

26 
XGCVÆues
 
xgcv
;

28 
xswa
.
background_pixñ
 = 0;

29 
xswa
.
b‹dî_pixñ
 = -1;

30 
xswa
.
cﬁ‹m≠
 = 
xv¨
->
cm≠
;

36 
xswa
.
evít_mask
 = 0xFFFFFF;

37 i‡(!(
√w_wö
 = 
	`mÆloc
((*new_win))))

39 
√w_wö
->
wödow
 = 
	`XCª©eWödow
(
xv¨
->
di•œy
,xv¨->
roŸ
,0,0,
size_x
,
size_y
,

40 0,
C›yFromP¨ít
,
I≈utOuçut
,
xv¨
->
visuÆ
,

41 
CWEvítMask
|
CWBackPixñ
|
CWB‹dîPixñ
|

42 
CWCﬁ‹m≠
,&
xswa
);

43 
	`mlx_öt_™ti_ªsize_wö
(
xv¨
,
√w_wö
->
wödow
,
size_x
,
size_y
);

44 
	`XSt‹eName
(
xv¨
->
di•œy
,
√w_wö
->
wödow
,
tôÀ
);

45 
xgcv
.
f‹eground
 = -1;

46 
xgcv
.
fun˘i⁄
 = 
GXc›y
;

47 
xgcv
.
∂™e_mask
 = 
AŒPœ√s
;

48 
√w_wö
->
gc
 = 
	`XCª©eGC
(
xv¨
->
di•œy
,√w_wö->
wödow
,

49 
GCFun˘i⁄
|
GCPœ√Mask
|
GCF‹eground
,&
xgcv
);

50 
√w_wö
->
√xt
 = 
xv¨
->
wö_li°
;

51 
xv¨
->
wö_li°
 = 
√w_wö
;

57 
	`bzîo
(&(
√w_wö
->
hooks
), (new_win->hooks));

58 
	`XM≠Rai£d
(
xv¨
->
di•œy
,
√w_wö
->
wödow
);

59 
	`mlx_öt_waô_fú°_expo£
(
xv¨
,
√w_wö
->
wödow
);

60  (
√w_wö
);

61 
	}
}

	@minilibx/minilibx/mlx_pixel_put.c

12 
	~"mlx_öt.h
"

16 
	$mlx_pixñ_put
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
,

17 
x
,
y
,
cﬁ‹
)

19 
XGCVÆues
 
xgcv
;

21 
xgcv
.
f‹eground
 = 
	`mlx_öt_gë_good_cﬁ‹
(
xv¨
,
cﬁ‹
);

22 
	`XCh™geGC
(
xv¨
->
di•œy
,
wö
->
gc
,
GCF‹eground
,&
xgcv
);

23 
	`XDøwPoöt
(
xv¨
->
di•œy
,
wö
->
wödow
,wö->
gc
,
x
,
y
);

24 i‡(
xv¨
->
do_Êush
)

25 
	`XFlush
(
xv¨
->
di•œy
);

26 
	}
}

	@minilibx/minilibx/mlx_put_image_to_window.c

13 
	~"mlx_öt.h
"

16 
	$mlx_put_image_to_wödow
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
,
t_img
 *
img
,

17 
x
,
y
)

19 
GC
 
gc
;

21 
gc
 = 
wö
->gc;

22 i‡(
img
->
gc
)

24 
gc
 = 
img
->gc;

25 
	`XSëClùOrigö
(
xv¨
->
di•œy
, 
gc
, 
x
, 
y
);

27 i‡(
img
->
ty≥
==
MLX_TYPE_SHM
)

28 
	`XShmPutImage
(
xv¨
->
di•œy
,
img
->
pix
, 
wö
->
gc
, img->
image
,0,0,0,0,

29 
img
->
width
,img->
height
,
FÆ£
);

30 i‡(
img
->
ty≥
==
MLX_TYPE_XIMAGE
)

31 
	`XPutImage
(
xv¨
->
di•œy
,
img
->
pix
, 
wö
->
gc
, img->
image
,0,0,0,0,

32 
img
->
width
,img->
height
);

33 
	`XC›yAªa
(
xv¨
->
di•œy
,
img
->
pix
,
wö
->
wödow
, 
gc
,

34 0,0,
img
->
width
,img->
height
,
x
,
y
);

35 i‡(
xv¨
->
do_Êush
)

36 
	`XFlush
(
xv¨
->
di•œy
);

37 
	}
}

	@minilibx/minilibx/mlx_rgb.c

6 
	~"mlx_öt.h
"

8 
s_cﬁ_«me
 
	gmlx_cﬁ_«me
[] =

	@minilibx/minilibx/mlx_string_put.c

12 
	~"mlx_öt.h
"

16 
	$mlx_°rög_put
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
,

17 
x
,
y
,
cﬁ‹
,*
°rög
)

19 
XGCVÆues
 
xgcv
;

21 
xgcv
.
f‹eground
 = 
	`mlx_öt_gë_good_cﬁ‹
(
xv¨
,
cﬁ‹
);

22 
	`XCh™geGC
(
xv¨
->
di•œy
,
wö
->
gc
,
GCF‹eground
,&
xgcv
);

23 
	`XDøwSåög
(
xv¨
->
di•œy
,
wö
->
wödow
,wö->
gc
,
x
,
y
,
°rög
,
	`°æí
(string));

24 i‡(
xv¨
->
do_Êush
)

25 
	`XFlush
(
xv¨
->
di•œy
);

26 
	}
}

	@minilibx/minilibx/mlx_xpm.c

12 
	~"mlx_öt.h
"

14 
s_cﬁ_«me
 
mlx_cﬁ_«me
[];

17 
	#RETURN
 { i‡(
cﬁ‹s
Ë
	`‰ì
(cﬁ‹s); i‡(
èb
) free(tab); \

18 i‡(
cﬁ‹s_dúe˘
Ë
	`‰ì
(colors_direct); \

19 i‡(
img
Ë{
	`XDe°royImage
(img->
image
); \

20 
	`XFªePixm≠
(
xv¨
->
di•œy
,
img
->
pix
);
	`‰ì
(img);} \

21  ((*)0);}

	)

26 *
	$mlx_öt_gë_löe
(*
±r
,*
pos
,
size
)

28 
pos2
;

29 
pos3
;

30 
pos4
;

32 i‡((
pos2
 = 
	`mlx_öt_°r_°r
(
±r
+*
pos
,"\"",
size
-*pos))==-1)

34 i‡((
pos3
 = 
	`mlx_öt_°r_°r
(
±r
+*
pos
+
pos2
+1,"\"",
size
-*pos-pos2-1))==-1)

36 *(
±r
+*
pos
+
pos2
) = 0;

37 *(
±r
+*
pos
+
pos2
+1+
pos3
) = 0;

38 
pos4
 = *
pos
+
pos2
+1;

39 *
pos
 +
pos2
+
pos3
+2;

40  (
±r
+
pos4
);

41 
	}
}

45 *
	$mlx_öt_°©ic_löe
(**
xpm_d©a
,*
pos
,
size
)

47 *
c›y
 = 0;

48 
Àn
 = 0;

49 
Àn2
;

50 *
°r
;

52 
°r
 = 
xpm_d©a
[(*
pos
)++];

53 i‡((
Àn2
 = 
	`°æí
(
°r
))>
Àn
)

55 i‡(
c›y
)

56 
	`‰ì
(
c›y
);

57 i‡(!(
c›y
 = 
	`mÆloc
(
Àn2
+1)))

59 
Àn
 = 
Àn2
;

61 
	`°r˝y
(
c›y
,
°r
);

63  (
c›y
);

64 
	}
}

67 
	$mlx_öt_gë_cﬁ_«me
(*
°r
,
size
)

69 
ªsu…
;

71 
ªsu…
 = 0;

72 
size
--)

73 
ªsu…
 = (ªsu…<<8)+*(
°r
++);

74  (
ªsu…
);

75 
	}
}

77 
	$mlx_öt_gë_ãxt_rgb
(*
«me
, *
íd
)

79 
i
;

80 
buff
[64];

82 i‡(*
«me
 == '#')

83  (
	`°πﬁ
(
«me
+1,0,16));

84 i‡(
íd
)

86 
	`¢¥ötf
(
buff
, 64, "%†%s", 
«me
, 
íd
);

87 
«me
 = 
buff
;

89 
i
 = 0;

90 
mlx_cﬁ_«me
[
i
].
«me
)

92 i‡(!
	`°rˇ£cmp
(
mlx_cﬁ_«me
[
i
].
«me
,Çame))

93  (
mlx_cﬁ_«me
[
i
].
cﬁ‹
);

94 
i
 ++;

97 
	}
}

100 
	$mlx_öt_xpm_£t_pixñ
(
t_img
 *
img
, *
d©a
, 
›p
, 
cﬁ
, 
x
)

102 
dec
;

104 
dec
 = 
›p
;

105 
dec
--)

107 i‡(
img
->
image
->
byã_‹dî
)

108 *(
d©a
+
x
*
›p
+
dec
Ë
cﬁ
&0xFF;

110 *(
d©a
+
x
*
›p
+›p-
dec
-1Ë
cﬁ
&0xFF;

111 
cﬁ
 >>= 8;

113 
	}
}

116 *
	$mlx_öt_∑r£_xpm
(
t_xv¨
 *
xv¨
,*
öfo
,
öfo_size
,*(*
f
)())

118 
pos
;

119 *
löe
;

120 **
èb
;

121 *
d©a
;

122 *
˛ù_d©a
;

123 
nc
;

124 
›p
;

125 
˝p
;

126 
cﬁ
;

127 
rgb_cﬁ
;

128 
cﬁ_«me
;

129 
mëhod
;

130 
x
;

131 
i
;

132 
j
;

133 
t_img
 *
img
;

134 
t_xpm_cﬁ
 *
cﬁ‹s
;

135 *
cﬁ‹s_dúe˘
;

136 
width
;

137 
height
;

138 
XImage
 *
˛ù_img
;

139 
XGCVÆues
 
xgcv
;

140 
Pixm≠
 
˛ù_pix
;

142 
cﬁ‹s
 = 0;

143 
cﬁ‹s_dúe˘
 = 0;

144 
img
 = 0;

145 
èb
 = 0;

146 
pos
 = 0;

147 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)) ||

148 !(
èb
 = 
	`mlx_öt_°r_to_w‹dèb
(
löe
)Ë|| !(
width
 = 
	`©oi
(tab[0])) ||

149 !(
height
 = 
	`©oi
(
èb
[1])Ë|| !(
nc
 =átoi(tab[2])) ||

150 !(
˝p
 = 
	`©oi
(
èb
[3])) )

151 
RETURN
;

152 
	`‰ì
(
èb
);

153 
èb
 = 0;

155 
mëhod
 = 0;

156 i‡(
˝p
<=2)

158 
mëhod
 = 1;

159 i‡(!(
cﬁ‹s_dúe˘
 = 
	`mÆloc
((
˝p
==2?65536:256)*())))

160 
RETURN
;

163 i‡(!(
cﬁ‹s
 = 
	`mÆloc
(
nc
*(*colors))))

164 
RETURN
;

166 
˛ù_d©a
 = 0;

168 
i
 = 
nc
;

169 
i
--)

171 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)) ||

172 !(
èb
 = 
	`mlx_öt_°r_to_w‹dèb
(
löe
+
˝p
)) )

173 
RETURN
;

174 
j
 = 0;

175 
èb
[
j
] && 
	`°rcmp
(tab[j++],"c"));

177 i‡(!
èb
[
j
])

178 
RETURN
;

180 i‡((
rgb_cﬁ
 = 
	`mlx_öt_gë_ãxt_rgb
(
èb
[
j
],Åab[j+1]))==-1)

182 i‡(!(
˛ù_d©a
 = 
	`mÆloc
(4*
width
*
height
)) ||

183 !(
˛ù_img
 = 
	`XCª©eImage
(
xv¨
->
di•œy
, xv¨->
visuÆ
,

184 1, 
XYPixm≠
, 0, 
˛ù_d©a
,

185 
width
, 
height
, 8, (width+7)/8)) )

186 
RETURN
;

187 
	`mem£t
(
˛ù_d©a
, 0xFF, 4*
width
*
height
);

190 i‡(
mëhod
)

191 
cﬁ‹s_dúe˘
[
	`mlx_öt_gë_cﬁ_«me
(
löe
,
˝p
)] =

192 
rgb_cﬁ
>=0?
	`mlx_gë_cﬁ‹_vÆue
(
xv¨
,Ñgb_col):rgb_col;

195 
cﬁ‹s
[
i
].
«me
 = 
	`mlx_öt_gë_cﬁ_«me
(
löe
,
˝p
);

196 
cﬁ‹s
[
i
].
cﬁ
 = 
rgb_cﬁ
>=0?
	`mlx_gë_cﬁ‹_vÆue
(
xv¨
,rgb_col):rgb_col;

198 
	`‰ì
(
èb
);

201 i‡(!(
img
 = 
	`mlx_√w_image
(
xv¨
,
width
,
height
)))

202 
RETURN
;

203 
›p
 = 
img
->
bµ
/8;

206 
i
 = 
height
;

207 
d©a
 = 
img
->data;

208 
i
--)

210 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)))

211 
RETURN
;

212 
x
 = 0;

213 
x
<
width
)

215 
cﬁ
 = 0;

216 
cﬁ_«me
 = 
	`mlx_öt_gë_cﬁ_«me
(
löe
+
˝p
*
x
,cpp);

217 i‡(
mëhod
)

218 
cﬁ
 = 
cﬁ‹s_dúe˘
[
cﬁ_«me
];

221 
j
 = 
nc
;

222 
j
--)

223 i‡(
cﬁ‹s
[
j
].
«me
==
cﬁ_«me
)

225 
cﬁ
 = 
cﬁ‹s
[
j
].col;

226 
j
 = 0;

229 i‡(
cﬁ
==-1)

230 
	`XPutPixñ
(
˛ù_img
, 
x
, 
height
-1-
i
, 0);

232 
	`mlx_öt_xpm_£t_pixñ
(
img
, 
d©a
, 
›p
, 
cﬁ
, 
x
);

233 
x
 ++;

235 
d©a
 +
img
->
size_löe
;

237 i‡(
˛ù_d©a
)

239 i‡(!(
˛ù_pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
, xv¨->
roŸ
,

240 
width
, 
height
, 1)) )

241 
RETURN
;

242 
img
->
gc
 = 
	`XCª©eGC
(
xv¨
->
di•œy
, 
˛ù_pix
, 0, &
xgcv
);

243 
	`XPutImage
(
xv¨
->
di•œy
, 
˛ù_pix
, 
img
->
gc
, 
˛ù_img
,

244 0, 0, 0, 0, 
width
, 
height
);

245 
	`XFªeGC
(
xv¨
->
di•œy
, 
img
->
gc
);

246 
xgcv
.
˛ù_mask
 = 
˛ù_pix
;

247 
xgcv
.
fun˘i⁄
 = 
GXc›y
;

248 
xgcv
.
∂™e_mask
 = 
AŒPœ√s
;

249 
img
->
gc
 = 
	`XCª©eGC
(
xv¨
->
di•œy
, xv¨->
roŸ
, 
GCClùMask
|
GCFun˘i⁄
|

250 
GCPœ√Mask
, &
xgcv
);

251 
	`XSync
(
xv¨
->
di•œy
, 
FÆ£
);

252 
	`XDe°royImage
(
˛ù_img
);

254 i‡(
cﬁ‹s
)

255 
	`‰ì
(
cﬁ‹s
);

256 i‡(
cﬁ‹s_dúe˘
)

257 
	`‰ì
(
cﬁ‹s_dúe˘
);

258  (
img
);

259 
	}
}

262 
	$mlx_öt_fûe_gë_rid_commít
(*
±r
, 
size
)

264 
com_begö
;

265 
com_íd
;

267 (
com_begö
 = 
	`mlx_öt_°r_°r_cŸe
(
±r
,"/*",
size
))!=-1)

269 
com_íd
 = 
	`mlx_öt_°r_°r
(
±r
+
com_begö
+2,"*/",
size
-com_begin-2);

270 
	`mem£t
(
±r
+
com_begö
,' ',
com_íd
+4);

272 (
com_begö
 = 
	`mlx_öt_°r_°r_cŸe
(
±r
,"//",
size
))!=-1)

274 
com_íd
 = 
	`mlx_öt_°r_°r
(
±r
+
com_begö
+2,"\n",
size
-com_begin-2);

275 
	`mem£t
(
±r
+
com_begö
,' ',
com_íd
+3);

277 
	}
}

280 *
	$mlx_xpm_fûe_to_image
(
t_xv¨
 *
xv¨
,*
fûe
,*
width
,*
height
)

282 
fd
;

283 
size
;

284 *
±r
;

285 
t_img
 *
img
;

287 
fd
 = -1;

288 i‡((
fd
 = 
	`›í
(
fûe
,
O_RDONLY
))==-1 || (
size
 = 
	`l£ek
(fd,0,
SEEK_END
))==-1 ||

289 (
±r
 = 
	`mm≠
(0,
size
,
PROT_WRITE
|
PROT_READ
,
MAP_PRIVATE
,
fd
,0))==

290 (*)
MAP_FAILED
)

292 i‡(
fd
>=0)

293 
	`˛o£
(
fd
);

296 
	`mlx_öt_fûe_gë_rid_commít
(
±r
, 
size
);

297 i‡(
img
 = 
	`mlx_öt_∑r£_xpm
(
xv¨
,
±r
,
size
,
mlx_öt_gë_löe
))

299 *
width
 = 
img
->width;

300 *
height
 = 
img
->height;

302 
	`munm≠
(
±r
,
size
);

303 
	`˛o£
(
fd
);

304  (
img
);

305 
	}
}

307 *
	$mlx_xpm_to_image
(
t_xv¨
 *
xv¨
,**
xpm_d©a
,*
width
,*
height
)

309 
t_img
 *
img
;

311 i‡(
img
 = 
	`mlx_öt_∑r£_xpm
(
xv¨
,
xpm_d©a
,0,
mlx_öt_°©ic_löe
))

313 *
width
 = 
img
->width;

314 *
height
 = 
img
->height;

316  (
img
);

317 
	}
}

	@minilibx/minilibx/test/main.c

2 
	~"mlx.h
"

3 
	~"mlx_öt.h
"

5 
	#WIN1_SX
 242

	)

6 
	#WIN1_SY
 242

	)

7 
	#IM1_SX
 42

	)

8 
	#IM1_SY
 42

	)

9 
	#IM3_SX
 242

	)

10 
	#IM3_SY
 242

	)

12 *
	gmlx
;

13 *
	gwö1
;

14 *
	gwö2
;

15 *
	gwö3
;

16 *
	gim1
;

17 *
	gim2
;

18 *
	gim3
;

19 *
	gim4
;

20 
	gbµ1
;

21 
	gbµ2
;

22 
	gbµ3
;

23 
	gbµ4
;

24 
	g¶1
;

25 
	g¶2
;

26 
	g¶3
;

27 
	g¶4
;

28 
	gídün1
;

29 
	gídün2
;

30 
	gídün3
;

31 
	gídün4
;

32 *
	gd©a1
;

33 *
	gd©a2
;

34 *
	gd©a3
;

35 *
	gd©a4
;

36 
	gxpm1_x
;

37 
	gxpm1_y
;

39 
	gloˇl_ídün
;

41 
	$expo£_wö1
(*
p
)

43 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im3
,0,0);

44 
	}
}

46 
	$expo£_wö2
(*
p
)

48 
	`mlx_put_image_to_wödow
(
mlx
,
wö2
,
im4
,0,0);

49 
	`mlx_put_image_to_wödow
(
mlx
,
wö2
,
im2
,0,0);

50 
	}
}

52 
	$key_wö1
(
key
,*
p
)

54 
	`¥ötf
("Key i¿Wö1 : %d\n",
key
);

55 i‡(
key
==0xFF1B)

56 
	`exô
(0);

57 
	}
}

59 
	$key_wö2
(
key
,*
p
)

61 
	`¥ötf
("Key i¿Wö2 : %d\n",
key
);

62 i‡(
key
==0xFF1B)

63 
	`exô
(0);

64 
	}
}

66 
	$key_wö3
(
key
,*
p
)

68 
	`¥ötf
("Key i¿Wö3 : %d\n",
key
);

69 i‡(
key
==0xFF1B)

70 
	`mlx_de°roy_wödow
(
mlx
,
wö3
);

71 
	}
}

73 
	$mou£_wö1
(
buâ⁄
,
x
,
y
, *
p
)

75 
	`¥ötf
("Mou£ i¿Wö1, buâ⁄ %dáà%dx%d.\n",
buâ⁄
,
x
,
y
);

76 
	}
}

78 
	$mou£_wö2
(
buâ⁄
,
x
,
y
, *
p
)

80 
	`¥ötf
("Mou£ i¿Wö2, buâ⁄ %dáà%dx%d.\n",
buâ⁄
,
x
,
y
);

81 
	}
}

83 
	$mou£_wö3
(
x
,
y
, *
p
)

85 
	`¥ötf
("Mou£ movög i¿Wö3,áà%dx%d.\n",
x
,
y
);

86 
	}
}

89 
	$maö
()

91 
a
;

93 
	`¥ötf
("MinilibX Test Program\n");

94 
a
 = 0x11223344;

95 i‡(((*)&
a
)[0] == 0x11)

96 
loˇl_ídün
 = 1;

98 
loˇl_ídün
 = 0;

99 
	`¥ötf
(" => Loˇ»Endü¿: %d\n",
loˇl_ídün
);

101 
	`¥ötf
(" => Connection ...");

102 i‡(!(
mlx
 = 
	`mlx_öô
()))

104 
	`¥ötf
(" !! KO !!\n");

105 
	`exô
(1);

107 
	`¥ötf
("OK (u£_xshm %dÖshm_f‹m© %d)\n",((
t_xv¨
 *)
mlx
)->
u£_xshm
,(—_xv¨ *)mlx)->
pshm_f‹m©
);

109 
	`¥ötf
(" => Wödow1 %dx%d \"TôÀ 1\" ...",
WIN1_SX
,
WIN1_SY
);

110 i‡(!(
wö1
 = 
	`mlx_√w_wödow
(
mlx
,
WIN1_SX
,
WIN1_SY
,"Title1")))

112 
	`¥ötf
(" !! KO !!\n");

113 
	`exô
(1);

115 
	`¥ötf
("OK\n");

117 
	`¥ötf
(" => Colormap sansÉvent ...");

118 
	`cﬁ‹_m≠_1
(
wö1
,
WIN1_SX
,
WIN1_SY
);

119 
	`¥ötf
("OK\n");

120 
	`¶ìp
(2);

122 
	`¥ötf
(" => Clear Window ...");

123 
	`mlx_˛ór_wödow
(
mlx
,
wö1
);

124 
	`¥ötf
("OK\n");

125 
	`¶ìp
(2);

127 
	`¥ötf
(" => Image1 ZPixm≠ %dx%d ...",
IM1_SX
,
IM1_SY
);

128 i‡(!(
im1
 = 
	`mlx_√w_image
(
mlx
,
IM1_SX
,
IM1_SY
)))

130 
	`¥ötf
(" !! KO !!\n");

131 
	`exô
(1);

133 
d©a1
 = 
	`mlx_gë_d©a_addr
(
im1
,&
bµ1
,&
¶1
,&
ídün1
);

134 
	`¥ötf
("OK (bµ1: %d, sizñöe1: %dÉndün: %dÅy≥: %d)\n",
bµ1
,
¶1
,
ídün1
,

135 ((
t_img
 *)
im1
)->
ty≥
);

137 
	`¥ötf
(" => Fill Image1 ...");

138 
	`cﬁ‹_m≠_2
(
d©a1
,
bµ1
,
¶1
,
IM1_SX
,
IM1_SY
,
ídün1
, 1);

139 
	`¥ötf
("OK (pixm≠ : %d)\n",()((
t_img
 *)
im1
)->
pix
);

141 
	`¥ötf
(" => Put Image1 ...");

142 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im1
,20,20);

143 
	`¥ötf
("OK\n");

144 
	`¶ìp
(2);

146 
	`¥ötf
(" => Destroy Image1 ... ");

147 
	`mlx_de°roy_image
(
mlx
, 
im1
);

148 
	`¥ötf
("OK\n");

149 
	`¶ìp
(2);

151 
	`¥ötf
(" => Image3 ZPixm≠ %dx%d ...",
IM3_SX
,
IM3_SY
);

152 i‡(!(
im3
 = 
	`mlx_√w_image
(
mlx
,
IM3_SX
,
IM3_SY
)))

154 
	`¥ötf
(" !! KO !!\n");

155 
	`exô
(1);

157 
d©a3
 = 
	`mlx_gë_d©a_addr
(
im3
,&
bµ3
,&
¶3
,&
ídün3
);

158 
	`¥ötf
("OK (bµ3 %d, sizñöe3 %dÉndün3 %dÅy≥ %d)\n",
bµ3
,
¶3
,
ídün3
,

159 ((
t_img
 *)
im3
)->
ty≥
);

161 
	`¥ötf
(" => Fill Image3 ...");

162 
	`cﬁ‹_m≠_2
(
d©a3
,
bµ3
,
¶3
,
IM3_SX
,
IM3_SY
,
ídün3
, 1);

163 
	`¥ötf
("OK (pixm≠ : %d)\n",()((
t_img
 *)
im3
)->
pix
);

165 
	`¥ötf
(" => Put Image3 ...");

166 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im3
,20,20);

167 
	`¥ötf
("OK\n");

168 
	`¶ìp
(2);

170 
	`¥ötf
(" => String ...");

171 
	`mlx_°rög_put
(
mlx
,
wö1
,5,
WIN1_SY
/2,0xFF99FF,"String output");

172 
	`mlx_°rög_put
(
mlx
,
wö1
,15,
WIN1_SY
/2+20,0x00FFFF,"MinilibXÅest");

173 
	`¥ötf
("OK\n");

174 
	`¶ìp
(2);

176 
	`¥ötf
(" => Xpm from file ...");

177 i‡(!(
im2
 = 
	`mlx_xpm_fûe_to_image
(
mlx
,"›í.xpm",&
xpm1_x
,&
xpm1_y
)))

179 
	`¥ötf
(" !! KO !!\n");

180 
	`exô
(1);

182 
d©a2
 = 
	`mlx_gë_d©a_addr
(
im2
,&
bµ2
,&
¶2
,&
ídün2
);

183 
	`¥ötf
("OK (xpm %dx%d)(img bpp2: %d, sizeline2: %dÉndian: %dÅype: %d)\n",

184 
xpm1_x
,
xpm1_y
,
bµ2
,
¶2
,
ídün2
,((
t_img
 *)
im2
)->
ty≥
);

185 
	`¶ìp
(2);

187 
	`¥ötf
(" => Put xpm ...");

188 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im2
,0,0);

189 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im2
,100,100);

190 
	`¥ötf
("OK\n");

191 
	`¶ìp
(2);

193 
	`¥ötf
(" => 2nd window,");

194 
wö2
 = 
	`mlx_√w_wödow
(
mlx
,
WIN1_SX
,
WIN1_SY
,"Title2");

195 i‡(!(
im4
 = 
	`mlx_√w_image
(
mlx
,
IM3_SX
, 
IM3_SY
)))

197 
	`¥ötf
(" !! KO !!\n");

198 
	`exô
(1);

200 
d©a4
 = 
	`mlx_gë_d©a_addr
(
im4
,&
bµ4
,&
¶4
,&
ídün4
);

201 
	`cﬁ‹_m≠_2
(
d©a4
,
bµ4
,
¶4
,
IM3_SX
,
IM3_SY
,
ídün4
, 2);

203 
	`¥ötf
(" 3rd window, Installing hooks ...");

204 
wö3
 = 
	`mlx_√w_wödow
(
mlx
,
WIN1_SX
,
WIN1_SY
,"Title3");

205 
	`mlx_expo£_hook
(
wö1
,
expo£_wö1
,0);

206 
	`mlx_mou£_hook
(
wö1
,
mou£_wö1
,0);

207 
	`mlx_key_hook
(
wö1
,
key_wö1
,0);

208 
	`mlx_expo£_hook
(
wö2
,
expo£_wö2
,0);

209 
	`mlx_mou£_hook
(
wö2
,
mou£_wö2
,0);

210 
	`mlx_key_hook
(
wö2
,
key_wö2
,0);

211 
	`mlx_key_hook
(
wö3
,
key_wö3
,0);

213 
	`mlx_hook
(
wö3
, 
MŸi⁄NŸify
, 
PoöãrMŸi⁄Mask
, 
mou£_wö3
, 0);

215 
	`¥ötf
("OK\nNow in Loop. JustÖlay. Esc in 3Åo destroy, 1&2Åo quit.\n");

217 
	`mlx_lo›
(
mlx
);

218 
	}
}

221 
	$cﬁ‹_m≠_1
(*
wö
,
w
,
h
)

223 
x
;

224 
y
;

225 
cﬁ‹
;

227 
x
 = 
w
;

228 
x
--)

230 
y
 = 
h
;

231 
y
--)

233 
cﬁ‹
 = (
x
*255)/
w
+((((w-x)*255)/w)<<16)+(((
y
*255)/
h
)<<8);

234 
	`mlx_pixñ_put
(
mlx
,
wö
,
x
,
y
,
cﬁ‹
);

237 
	}
}

240 
	$cﬁ‹_m≠_2
(*
d©a
,
bµ
,
¶
,
w
,
h
,
ídün
, 
ty≥
)

242 
x
;

243 
y
;

244 
›p
;

245 
dec
;

246 
cﬁ‹
;

247 
cﬁ‹2
;

248 *
±r
;

250 
›p
 = 
bµ
/8;

251 
	`¥ötf
("(›∞: %dË",
›p
);

252 
y
 = 
h
;

253 
y
--)

255 
±r
 = 
d©a
+
y
*
¶
;

256 
x
 = 
w
;

257 
x
--)

259 i‡(
ty≥
==2)

260 
cﬁ‹
 = (
y
*255)/
w
+((((w-
x
)*255)/w)<<16)

261 +(((
y
*255)/
h
)<<8);

263 
cﬁ‹
 = (
x
*255)/
w
+((((w-x)*255)/w)<<16)+(((
y
*255)/
h
)<<8);

264 
cﬁ‹2
 = 
	`mlx_gë_cﬁ‹_vÆue
(
mlx
,
cﬁ‹
);

265 
dec
 = 
›p
;

266 
dec
--)

267 i‡(
ídün
==
loˇl_ídün
)

269 i‡(
ídün
)

270 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[4-opp+dec];

272 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[dec];

276 i‡(
ídün
)

277 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[opp-1-dec];

279 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[3-dec];

284 
	}
}

	@minilibx/minilibx/test/new_win.c

4 
	~"mlx.h
"

7 *
	gmlx
;

8 *
	gwö1
;

9 *
	gwö2
;

13 
	$gîe_mou£
(
x
,
y
,
buâ⁄
,*
tŸo
)

15 
	`¥ötf
("MouseÉvent -Çew win\n");

16 
	`mlx_de°roy_wödow
(
mlx
,
wö1
);

17 
wö1
 = 
	`mlx_√w_wödow
(
mlx
,
	`øndom
()%500,random()%500,"new win");

18 
	`mlx_mou£_hook
(
wö1
,
gîe_mou£
,0);

19 
	}
}

22 
	$maö
()

24 
	`§™dom
(
	`time
(0));

25 
mlx
 = 
	`mlx_öô
();

26 
wö1
 = 
	`mlx_√w_wödow
(
mlx
,300,300,"win1");

27 
wö2
 = 
	`mlx_√w_wödow
(
mlx
,600,600,"win2");

28 
	`mlx_mou£_hook
(
wö1
,
gîe_mou£
,0);

29 
	`mlx_mou£_hook
(
wö2
,
gîe_mou£
,0);

30 
	`mlx_lo›
(
mlx
);

31 
	}
}

	@minilibx/mlx.h

30 #i‚de‡
MLX_H


32 
	#MLX_H


	)

35 *
mlx_öô
();

46 *
mlx_√w_wödow
(*
mlx_±r
, 
size_x
, 
size_y
, *
tôÀ
);

50 
mlx_˛ór_wödow
(*
mlx_±r
, *
wö_±r
);

51 
mlx_pixñ_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
);

63 *
mlx_√w_image
(*
mlx_±r
,
width
,
height
);

69 *
mlx_gë_d©a_addr
(*
img_±r
, *
bôs_≥r_pixñ
,

70 *
size_löe
, *
ídün
);

75 
mlx_put_image_to_wödow
(*
mlx_±r
, *
wö_±r
, *
img_±r
,

76 
x
, 
y
);

77 
mlx_gë_cﬁ‹_vÆue
(*
mlx_±r
, 
cﬁ‹
);

84 
mlx_mou£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

85 
mlx_key_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

86 
mlx_expo£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

88 
mlx_lo›_hook
 (*
mlx_±r
, (*
fun˘_±r
)(), *
∑øm
);

89 
mlx_lo›
 (*
mlx_±r
);

107 
mlx_°rög_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
,

108 *
°rög
);

109 *
mlx_xpm_to_image
(*
mlx_±r
, **
xpm_d©a
,

110 *
width
, *
height
);

111 *
mlx_xpm_fûe_to_image
(*
mlx_±r
, *
fûíame
,

112 *
width
, *
height
);

113 
mlx_de°roy_wödow
(*
mlx_±r
, *
wö_±r
);

115 
mlx_de°roy_image
(*
mlx_±r
, *
img_±r
);

122 
mlx_hook
(*
wö_±r
, 
x_evít
, 
x_mask
,

123 (*
fun˘
)(), *
∑øm
);

125 
mlx_do_key_aut‹ïótoff
(*
mlx_±r
);

126 
mlx_do_key_aut‹ïót⁄
(*
mlx_±r
);

127 
mlx_do_sync
(*
mlx_±r
);

	@minilibx/mlx_clear_window.c

13 
	~"mlx_öt.h
"

16 
	$mlx_˛ór_wödow
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
)

18 
	`XCÀ¨Wödow
(
xv¨
->
di•œy
,
wö
->
wödow
);

19 i‡(
xv¨
->
do_Êush
)

20 
	`XFlush
(
xv¨
->
di•œy
);

21 
	}
}

	@minilibx/mlx_destroy_image.c

12 
	~"mlx_öt.h
"

15 
	$mlx_de°roy_image
(
t_xv¨
 *
xv¨
, 
t_img
 *
img
)

17 i‡(
img
->
ty≥
 =
MLX_TYPE_SHM_PIXMAP
 ||

18 
img
->
ty≥
 =
MLX_TYPE_SHM
)

20 
	`XShmDëach
(
xv¨
->
di•œy
, &(
img
->
shm
));

21 
	`shmdt
(
img
->
shm
.
shmaddr
);

24 
	`XDe°royImage
(
img
->
image
);

25 
	`XFªePixm≠
(
xv¨
->
di•œy
, 
img
->
pix
);

26 i‡(
img
->
gc
)

27 
	`XFªeGC
(
xv¨
->
di•œy
, 
img
->
gc
);

28 
	`‰ì
(
img
);

29 i‡(
xv¨
->
do_Êush
)

30 
	`XFlush
(
xv¨
->
di•œy
);

31 
	}
}

	@minilibx/mlx_destroy_window.c

12 
	~"mlx_öt.h
"

15 
	$mlx_de°roy_wödow
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
)

17 
t_wö_li°
 *
w
;

18 
t_wö_li°
 *
¥ev
;

19 
t_wö_li°
 
fú°
;

21 
fú°
.
√xt
 = 
xv¨
->
wö_li°
;

22 
¥ev
 = &
fú°
;

23 
w
 = 
¥ev
->
√xt
;

24 
w
)

26 i‡(
w
==
wö
)

27 
¥ev
->
√xt
 = 
w
->next;

29 
¥ev
 = 
w
;

30 
w
 = w->
√xt
;

32 
xv¨
->
wö_li°
 = 
fú°
.
√xt
;

33 
	`XDe°royWödow
(
xv¨
->
di•œy
,
wö
->
wödow
);

34 
	`XFªeGC
(
xv¨
->
di•œy
,
wö
->
gc
);

35 
	`‰ì
(
wö
);

36 i‡(
xv¨
->
do_Êush
)

37 
	`XFlush
(
xv¨
->
di•œy
);

38 
	}
}

	@minilibx/mlx_expose_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_expo£_hook
(
t_wö_li°
 *
wö
,(*
fun˘
)(),*
∑øm
)

19 
wö
->
hooks
[
Expo£
].
hook
 = 
fun˘
;

20 
wö
->
hooks
[
Expo£
].
∑øm
 =Öaram;

21 
wö
->
hooks
[
Expo£
].
mask
 = 
ExposuªMask
;

22 
	}
}

	@minilibx/mlx_flush_event.c

12 
	~"mlx_öt.h
"

17 
	$mlx_Êush_evít
(
t_xv¨
 *
xv¨
)

19 
XEvít
 
ev
;

21 
	`XPídög
(
xv¨
->
di•œy
))

23 
	`XNextEvít
(
xv¨
->
di•œy
,&
ev
);

25 
	}
}

	@minilibx/mlx_get_color_value.c

12 
	~"mlx_öt.h
"

15 
	$mlx_gë_cﬁ‹_vÆue
(
t_xv¨
 *
xv¨
,
cﬁ‹
)

17 (
	`mlx_öt_gë_good_cﬁ‹
(
xv¨
,
cﬁ‹
));

18 
	}
}

20 
	$mlx_öt_gë_good_cﬁ‹
(
t_xv¨
 *
xv¨
,
cﬁ‹
)

22 
XCﬁ‹
 
xc
;

24 i‡(
xv¨
->
dïth
>=24)

25  (
cﬁ‹
);

26 
xc
.
ªd
 = (
cﬁ‹
>>8)&0xFF00;

27 
xc
.
gªí
 = 
cﬁ‹
&0xFF00;

28 
xc
.
blue
 = (
cﬁ‹
<<8)&0xFF00;

29 
xc
.
pixñ
 = ((xc.
ªd
>>(16-
xv¨
->
de¸gb
[1]))<<xvar->decrgb[0])+

30 ((
xc
.
gªí
>>(16-
xv¨
->
de¸gb
[3]))<<xvar->decrgb[2])+

31 ((
xc
.
blue
>>(16-
xv¨
->
de¸gb
[5]))<<xvar->decrgb[4]);

32  (
xc
.
pixñ
);

33 
	}
}

	@minilibx/mlx_get_data_addr.c

13 
	~"mlx_öt.h
"

16 *
	$mlx_gë_d©a_addr
(
t_img
 *
img
,*
bôs_≥r_pixñ
,

17 *
size_löe
,*
ídün
)

19 *
bôs_≥r_pixñ
 = 
img
->
bµ
;

20 *
size_löe
 = 
img
->size_line;

21 *
ídün
 = 
img
->
image
->
byã_‹dî
;

22  (
img
->
d©a
);

23 
	}
}

	@minilibx/mlx_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_hook
(
t_wö_li°
 *
wö
, 
x_evít
, 
x_mask
,

18 (*
fun˘
)(),*
∑øm
)

20 
wö
->
hooks
[
x_evít
].
hook
 = 
fun˘
;

21 
wö
->
hooks
[
x_evít
].
∑øm
 =Öaram;

22 
wö
->
hooks
[
x_evít
].
mask
 = 
x_mask
;

23 
	}
}

26 
	$mlx_do_key_aut‹ïótoff
(
t_xv¨
 *
xv¨
)

28 
	`XAutoRïótOff
(
xv¨
->
di•œy
);

29 
	}
}

31 
	$mlx_do_key_aut‹ïót⁄
(
t_xv¨
 *
xv¨
)

33 
	`XAutoRïótOn
(
xv¨
->
di•œy
);

34 
	}
}

37 
	$mlx_do_sync
(
t_xv¨
 *
xv¨
)

39 
	`XSync
(
xv¨
->
di•œy
, 
FÆ£
);

40 
	}
}

	@minilibx/mlx_init.c

12 
	~"mlx_öt.h
"

16 *
	$mlx_öô
()

18 
t_xv¨
 *
xv¨
;

20 i‡(!(
xv¨
 = 
	`mÆloc
((*xv¨))Ë|| (xv¨->
di•œy
 = 
	`XO≥nDi•œy
(""))==0)

22 
xv¨
->
s¸ìn
 = 
	`DeÁu…S¸ìn
(xv¨->
di•œy
);

23 
xv¨
->
roŸ
 = 
	`DeÁu…RoŸWödow
(xv¨->
di•œy
);

24 
xv¨
->
cm≠
 = 
	`DeÁu…Cﬁ‹m≠
(xv¨->
di•œy
,xv¨->
s¸ìn
);

25 
xv¨
->
dïth
 = 
	`DeÁu…Dïth
(xv¨->
di•œy
,xv¨->
s¸ìn
);

26 i‡(
	`mlx_öt_gë_visuÆ
(
xv¨
)==-1)

28 
	`¥ötf
(
ERR_NO_TRUECOLOR
);

29 
	`exô
(1);

31 
xv¨
->
wö_li°
 = 0;

32 
xv¨
->
lo›_hook
 = 0;

33 
xv¨
->
lo›_∑øm
 = (*)0;

34 
xv¨
->
do_Êush
 = 1;

35 
	`mlx_öt_dól_shm
(
xv¨
);

36 i‡(
xv¨
->
¥iv©e_cm≠
)

37 
xv¨
->
cm≠
 = 
	`XCª©eCﬁ‹m≠
(xv¨->
di•œy
,xv¨->
roŸ
,

38 
xv¨
->
visuÆ
,
AŒocN⁄e
);

39 
	`mlx_öt_rgb_c⁄vîsi⁄
(
xv¨
);

40  (
xv¨
);

41 
	}
}

50 
	$mlx_öt_dól_shm
(
t_xv¨
 *
xv¨
)

52 
u£_pshm
;

53 
bid⁄
;

54 *
dpy
;

55 
buff
[33];

57 
xv¨
->
u£_xshm
 = 
	`XShmQuîyVîsi⁄
(xv¨->
di•œy
,&
bid⁄
,&bid⁄,&(
u£_pshm
));

58 i‡(
xv¨
->
u£_xshm
 && 
u£_pshm
)

59 
xv¨
->
pshm_f‹m©
 = 
	`XShmPixm≠F‹m©
(xv¨->
di•œy
);

61 
xv¨
->
pshm_f‹m©
 = -1;

62 
	`gëho°«me
(
buff
,32);

63 
dpy
 = 
	`gëív
(
ENV_DISPLAY
);

64 i‡(
dpy
 && 
	`°æí
(dpyË&& *dpy!=':' && 
	`°∫cmp
(dpy,
buff
,strlen(buff)) &&

65 
	`°∫cmp
(
dpy
,
LOCALHOST
,
	`°æí
(LOCALHOST)) )

67 
xv¨
->
pshm_f‹m©
 = -1;

68 
xv¨
->
u£_xshm
 = 0;

70 
	}
}

76 
	$mlx_öt_rgb_c⁄vîsi⁄
(
t_xv¨
 *
xv¨
)

78 
	`bzîo
(
xv¨
->
de¸gb
,()*6);

79 !(
xv¨
->
visuÆ
->
ªd_mask
&1))

80 { 
xv¨
->
visuÆ
->
ªd_mask
 >>1; xv¨->
de¸gb
[0] ++; }

81 
xv¨
->
visuÆ
->
ªd_mask
&1)

82 { 
xv¨
->
visuÆ
->
ªd_mask
 >>1; xv¨->
de¸gb
[1] ++; }

83 !(
xv¨
->
visuÆ
->
gªí_mask
&1))

84 { 
xv¨
->
visuÆ
->
gªí_mask
 >>1; xv¨->
de¸gb
[2] ++; }

85 
xv¨
->
visuÆ
->
gªí_mask
&1)

86 { 
xv¨
->
visuÆ
->
gªí_mask
 >>1; xv¨->
de¸gb
[3] ++; }

87 !(
xv¨
->
visuÆ
->
blue_mask
&1))

88 { 
xv¨
->
visuÆ
->
blue_mask
 >>1; xv¨->
de¸gb
[4] ++; }

89 
xv¨
->
visuÆ
->
blue_mask
&1)

90 { 
xv¨
->
visuÆ
->
blue_mask
 >>1; xv¨->
de¸gb
[5] ++; }

91 
	}
}

	@minilibx/mlx_int.h

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<f˙é.h
>

23 
	~<sys/mm™.h
>

24 
	~<X11/Xlib.h
>

25 
	~<X11/Xutû.h
>

26 
	~<sys/ùc.h
>

27 
	~<sys/shm.h
>

28 
	~<X11/exãnsi⁄s/XShm.h
>

32 
	#MLX_TYPE_SHM_PIXMAP
 3

	)

33 
	#MLX_TYPE_SHM
 2

	)

34 
	#MLX_TYPE_XIMAGE
 1

	)

36 
	#MLX_MAX_EVENT
 
LASTEvít


	)

39 
	#ENV_DISPLAY
 "DISPLAY"

	)

40 
	#LOCALHOST
 "loˇlho°"

	)

41 
	#ERR_NO_TRUECOLOR
 "MöûibX Eº‹ : NÿTrueCﬁ‹ VisuÆávaûabÀ.\n"

	)

42 
	#WARN_SHM_ATTACH
 "MöûibX W¨nög : X sîvî c™'à©èch sh¨ed mem‹y.\n"

	)

45 
	ss_xpm_cﬁ


47 
	m«me
;

48 
	mcﬁ
;

49 } 
	tt_xpm_cﬁ
;

52 
	ss_cﬁ_«me


54 *
	m«me
;

55 
	mcﬁ‹
;

58 
	ss_evít_li°


60 
	mmask
;

61 (*
	mhook
)();

62 *
	m∑øm
;

63 } 
	tt_evít_li°
;

66 
	ss_wö_li°


68 
Wödow
 
	mwödow
;

69 
GC
 
	mgc
;

70 
s_wö_li°
 *
	m√xt
;

71 (*
	mmou£_hook
)();

72 (*
	mkey_hook
)();

73 (*
	mexpo£_hook
)();

74 *
	mmou£_∑øm
;

75 *
	mkey_∑øm
;

76 *
	mexpo£_∑øm
;

77 
t_evít_li°
 
	mhooks
[
MLX_MAX_EVENT
];

78 } 
	tt_wö_li°
;

81 
	ss_img


83 
XImage
 *
	mimage
;

84 
Pixm≠
 
	mpix
;

85 
GC
 
	mgc
;

86 
	msize_löe
;

87 
	mbµ
;

88 
	mwidth
;

89 
	mheight
;

90 
	mty≥
;

91 
	mf‹m©
;

92 *
	md©a
;

93 
XShmSegmítInfo
 
	mshm
;

94 } 
	tt_img
;

96 
	ss_xv¨


98 
Di•œy
 *
	mdi•œy
;

99 
Wödow
 
	mroŸ
;

100 
	ms¸ìn
;

101 
	mdïth
;

102 
VisuÆ
 *
	mvisuÆ
;

103 
Cﬁ‹m≠
 
	mcm≠
;

104 
	m¥iv©e_cm≠
;

105 
t_wö_li°
 *
	mwö_li°
;

106 (*
	mlo›_hook
)();

107 *
	mlo›_∑øm
;

108 
	mu£_xshm
;

109 
	mpshm_f‹m©
;

110 
	mdo_Êush
;

111 
	mde¸gb
[6];

112 } 
	tt_xv¨
;

115 
mlx_öt_do_nŸhög
();

116 
mlx_öt_gë_good_cﬁ‹
();

117 
mlx_öt_föd_ö_pcm
();

118 
mlx_öt_™ti_ªsize_wö
();

119 
mlx_öt_waô_fú°_expo£
();

120 
mlx_öt_rgb_c⁄vîsi⁄
();

121 
mlx_öt_dól_shm
();

122 *
mlx_öt_√w_xshm_image
();

123 **
mlx_öt_°r_to_w‹dèb
();

124 *
mlx_√w_image
();

125 
shm_©t_pb
();

	@minilibx/mlx_int_anti_resize_win.c

11 
	~"mlx_öt.h
"

14 
	$mlx_öt_™ti_ªsize_wö
(
t_xv¨
 *
xv¨
,
Wödow
 
wö
,
w
,
h
)

16 
XSizeHöts
 
höts
;

17 
tŸo
;

19 
	`XGëWMN‹mÆHöts
(
xv¨
->
di•œy
,
wö
,&
höts
,&
tŸo
);

20 
höts
.
width
 = 
w
;

21 
höts
.
height
 = 
h
;

22 
höts
.
mö_width
 = 
w
;

23 
höts
.
mö_height
 = 
h
;

24 
höts
.
max_width
 = 
w
;

25 
höts
.
max_height
 = 
h
;

26 
höts
.
Êags
 = 
PPosôi⁄
 | 
PSize
 | 
PMöSize
 | 
PMaxSize
;

27 
	`XSëWMN‹mÆHöts
(
xv¨
->
di•œy
,
wö
,&
höts
);

28 
	}
}

	@minilibx/mlx_int_do_nothing.c

13 
	$mlx_öt_do_nŸhög
(*
∑øm
)

16 
	}
}

	@minilibx/mlx_int_get_visual.c

13 
	~"mlx_öt.h
"

21 
	$mlx_öt_gë_visuÆ
(
t_xv¨
 *
xv¨
)

23 
XVisuÆInfo
 *
vi
;

24 
XVisuÆInfo
 
ãm∂©e
;

25 
nb_ôem
;

27 
xv¨
->
¥iv©e_cm≠
 = 0;

28 
xv¨
->
visuÆ
 = 
	`DeÁu…VisuÆ
(xv¨->
di•œy
,xv¨->
s¸ìn
);

29 i‡(
xv¨
->
visuÆ
->
˛ass
 =
TrueCﬁ‹
)

31 
ãm∂©e
.
˛ass
 = 
TrueCﬁ‹
;

32 
ãm∂©e
.
dïth
 = 
xv¨
->depth;

33 i‡(!(
vi
 = 
	`XGëVisuÆInfo
(
xv¨
->
di•œy
,
VisuÆDïthMask
|
VisuÆCœssMask
,

34 &
ãm∂©e
,&
nb_ôem
)) )

36 
xv¨
->
visuÆ
 = 
vi
->visual;

37 
xv¨
->
¥iv©e_cm≠
 = 1;

39 
	}
}

	@minilibx/mlx_int_param_event.c

11 
	~"mlx_öt.h
"

13 
	$mlx_öt_∑øm_undef
()

15 
	}
}

17 
	$mlx_öt_∑øm_KeyPªss
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

19 
wö
->
hooks
[
KeyPªss
].
	`hook
(
	`XkbKeycodeToKeysym
(
xv¨
->
di•œy
,

20 
ev
->
xkey
.
keycode
, 0, 0),

21 
wö
->
hooks
[
KeyPªss
].
∑øm
);

22 
	}
}

24 
	$mlx_öt_∑øm_KeyRñó£
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

26 
wö
->
hooks
[
KeyRñó£
].
	`hook
(
	`XkbKeycodeToKeysym
(
xv¨
->
di•œy
,

27 
ev
->
xkey
.
keycode
, 0, 0),

28 
wö
->
hooks
[
KeyRñó£
].
∑øm
);

29 
	}
}

31 
	$mlx_öt_∑øm_Buâ⁄Pªss
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

33 
wö
->
hooks
[
Buâ⁄Pªss
].
	`hook
(
ev
->
xbuâ⁄
.
buâ⁄
,ev->xbuâ⁄.
x
,ev->xbuâ⁄.
y
,

34 
wö
->
hooks
[
Buâ⁄Pªss
].
∑øm
);

35 
	}
}

37 
	$mlx_öt_∑øm_Buâ⁄Rñó£
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

39 
wö
->
hooks
[
Buâ⁄Rñó£
].
	`hook
(
ev
->
xbuâ⁄
.
buâ⁄
,

40 
ev
->
xbuâ⁄
.
x
,Év->xbuâ⁄.
y
,

41 
wö
->
hooks
[
Buâ⁄Rñó£
].
∑øm
);

42 
	}
}

44 
	$mlx_öt_∑øm_MŸi⁄NŸify
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

46 
wö
->
hooks
[
MŸi⁄NŸify
].
	`hook
(
ev
->
xbuâ⁄
.
x
,ev->xbuâ⁄.
y
,

47 
wö
->
hooks
[
MŸi⁄NŸify
].
∑øm
);

48 
	}
}

50 
	$mlx_öt_∑øm_Expo£
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

52 i‡(!
ev
->
xexpo£
.
cou¡
)

53 
wö
->
hooks
[
Expo£
].
	`hook
(wö->hooks[Expo£].
∑øm
);

54 
	}
}

57 
	$mlx_öt_∑øm_gíîic
(
t_xv¨
 *
xv¨
, 
XEvít
 *
ev
, 
t_wö_li°
 *
wö
)

59 
wö
->
hooks
[
ev
->
ty≥
].
	`hook
(wö->hooks[ev->ty≥].
∑øm
);

60 
	}
}

62 (*(
	gmlx_öt_∑øm_evít
[]))() =

64 
mlx_öt_∑øm_undef
,

65 
mlx_öt_∑øm_undef
,

66 
mlx_öt_∑øm_KeyPªss
,

67 
mlx_öt_∑øm_KeyRñó£
,

68 
mlx_öt_∑øm_Buâ⁄Pªss
,

69 
mlx_öt_∑øm_Buâ⁄Rñó£
,

70 
mlx_öt_∑øm_MŸi⁄NŸify
,

71 
mlx_öt_∑øm_gíîic
,

72 
mlx_öt_∑øm_gíîic
,

73 
mlx_öt_∑øm_gíîic
,

74 
mlx_öt_∑øm_gíîic
,

75 
mlx_öt_∑øm_gíîic
,

76 
mlx_öt_∑øm_Expo£
,

77 
mlx_öt_∑øm_gíîic
,

78 
mlx_öt_∑øm_gíîic
,

79 
mlx_öt_∑øm_gíîic
,

80 
mlx_öt_∑øm_gíîic
,

81 
mlx_öt_∑øm_gíîic
,

82 
mlx_öt_∑øm_gíîic
,

83 
mlx_öt_∑øm_gíîic
,

84 
mlx_öt_∑øm_gíîic
,

85 
mlx_öt_∑øm_gíîic
,

86 
mlx_öt_∑øm_gíîic
,

87 
mlx_öt_∑øm_gíîic
,

88 
mlx_öt_∑øm_gíîic
,

89 
mlx_öt_∑øm_gíîic
,

90 
mlx_öt_∑øm_gíîic
,

91 
mlx_öt_∑øm_gíîic
,

92 
mlx_öt_∑øm_gíîic
,

93 
mlx_öt_∑øm_gíîic
,

94 
mlx_öt_∑øm_gíîic
,

95 
mlx_öt_∑øm_gíîic
,

96 
mlx_öt_∑øm_gíîic
,

97 
mlx_öt_∑øm_gíîic
,

98 
mlx_öt_∑øm_gíîic
,

99 
mlx_öt_∑øm_gíîic


	@minilibx/mlx_int_set_win_event_mask.c

12 
	~"mlx_öt.h
"

17 
	$mlx_öt_£t_wö_evít_mask
(
t_xv¨
 *
xv¨
)

19 
t_wö_li°
 *
wö
;

20 
mask
;

21 
i
;

22 
XSëWödowAâribuãs
 
xwa
;

24 
wö
 = 
xv¨
->
wö_li°
;

25 
wö
)

27 
xwa
.
evít_mask
 = 0;

28 
i
 = 
MLX_MAX_EVENT
;

29 
i
--)

30 
xwa
.
evít_mask
 |
wö
->
hooks
[
i
].
mask
;

31 
	`XCh™geWödowAâribuãs
(
xv¨
->
di•œy
, 
wö
->
wödow
, 
CWEvítMask
, &
xwa
);

32 
wö
 = wö->
√xt
;

34 
	}
}

	@minilibx/mlx_int_str_to_wordtab.c

12 
	~"mlx_öt.h
"

15 
	$mlx_öt_°r_°r
(*
°r
,*
föd
,
Àn
)

17 
Àn_f
;

18 
pos
;

19 *
s
;

20 *
f
;

22 
Àn_f
 = 
	`°æí
(
föd
);

23 i‡(
Àn_f
>
Àn
)

25 
pos
 = 0;

26 *(
°r
+
Àn_f
-1))

28 
s
 = 
°r
;

29 
f
 = 
föd
;

30 *(
f
++Ë=*(
s
++))

31 i‡(!*
f
)

32  (
pos
);

33 
°r
 ++;

34 
pos
 ++;

37 
	}
}

41 
	$mlx_öt_°r_°r_cŸe
(*
°r
,*
föd
,
Àn
)

43 
Àn_f
;

44 
pos
;

45 *
s
;

46 *
f
;

47 
cŸe
;

49 
Àn_f
 = 
	`°æí
(
föd
);

50 i‡(
Àn_f
>
Àn
)

52 
cŸe
 = 0;

53 
pos
 = 0;

54 *(
°r
+
Àn_f
-1))

56 i‡(*
°r
=='"')

57 
cŸe
 = 1-cote;

58 i‡(!
cŸe
)

60 
s
 = 
°r
;

61 
f
 = 
föd
;

62 *(
f
++Ë=*(
s
++))

63 i‡(!*
f
)

64  (
pos
);

66 
°r
 ++;

67 
pos
 ++;

70 
	}
}

73 **
	$mlx_öt_°r_to_w‹dèb
(*
°r
)

75 **
èb
;

76 
pos
;

77 
nb_w‹d
;

78 
Àn
;

80 
Àn
 = 
	`°æí
(
°r
);

81 
nb_w‹d
 = 0;

82 
pos
 = 0;

83 
pos
<
Àn
)

85 *(
°r
+
pos
)==' ' || *(str+pos)=='\t')

86 
pos
 ++;

87 i‡(*(
°r
+
pos
))

88 
nb_w‹d
 ++;

89 *(
°r
+
pos
) && *(str+pos)!=' ' && *(str+pos)!='\t')

90 
pos
 ++;

92 i‡(!(
èb
 = 
	`mÆloc
((1+
nb_w‹d
)*(*tab))))

94 
nb_w‹d
 = 0;

95 
pos
 = 0;

96 
pos
<
Àn
)

98 *(
°r
+
pos
)==' ' || *(str+pos)=='\t')

100 *(
°r
+
pos
) = 0;

101 
pos
 ++;

103 i‡(*(
°r
+
pos
))

105 
èb
[
nb_w‹d
] = 
°r
+
pos
;

106 
nb_w‹d
 ++;

108 *(
°r
+
pos
) && *(str+pos)!=' ' && *(str+pos)!='\t')

109 
pos
 ++;

111 
èb
[
nb_w‹d
] = 0;

112  (
èb
);

113 
	}
}

	@minilibx/mlx_int_wait_first_expose.c

13 
	~"mlx_öt.h
"

17 
	$mlx_öt_waô_fú°_expo£
(
t_xv¨
 *
xv¨
,
Wödow
 
wö
)

19 
XEvít
 
ev
;

21 
	`XWödowEvít
(
xv¨
->
di•œy
,
wö
,
ExposuªMask
,&
ev
);

22 
	`XPutBackEvít
(
xv¨
->
di•œy
,&
ev
);

23 
	}
}

	@minilibx/mlx_key_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_key_hook
(
t_wö_li°
 *
wö
,(*
fun˘
)(),*
∑øm
)

19 
wö
->
hooks
[
KeyRñó£
].
hook
 = 
fun˘
;

20 
wö
->
hooks
[
KeyRñó£
].
∑øm
 =Öaram;

21 
wö
->
hooks
[
KeyRñó£
].
mask
 = 
KeyRñó£Mask
;

22 
	}
}

	@minilibx/mlx_lib_xpm.c

12 
	~"mlx_öt.h
"

17 *
	$mlx_öt_xpm_f_image
(
t_xv¨
 *
xv¨
,*
width
,*
height
,

18 (*
xpm_func
)(),*
∑øm
)

20 
XImage
 *
img1
;

21 
XImage
 *
img2
;

22 
t_img
 *
im2
;

23 
XpmAâribuãs
 
xpm_©t
;

25 
xpm_©t
.
visuÆ
 = 
xv¨
->visual;

26 
xpm_©t
.
cﬁ‹m≠
 = 
xv¨
->
cm≠
;

27 
xpm_©t
.
dïth
 = 
xv¨
->depth;

28 
xpm_©t
.
bôm≠_f‹m©
 = 
ZPixm≠
;

29 
xpm_©t
.
vÆuemask
 = 
XpmDïth
|
XpmBôm≠F‹m©
|
XpmVisuÆ
|
XpmCﬁ‹m≠
;

30 i‡(
	`xpm_func
(
xv¨
->
di•œy
,
∑øm
,&
img1
,&
img2
,&
xpm_©t
))

32 i‡(
img2
)

33 
	`XDe°royImage
(
img2
);

35 i‡(!(
im2
 = (*)
	`mlx_√w_image
(
xv¨
,
img1
->
width
,img1->
height
)))

37 
	`XDe°royImage
(
img1
);

40 *
width
 = 
img1
->width;

41 *
height
 = 
img1
->height;

42 i‡(
	`mlx_öt_egÆ_img
(
im2
->
image
,
img1
))

44 
	`bc›y
(
img1
->
d©a
,
im2
->d©a,img1->
height
*img1->
byãs_≥r_löe
);

45 
	`XDe°royImage
(
img1
);

46  (
im2
);

48 i‡(
im2
->
ty≥
==
MLX_TYPE_SHM_PIXMAP
)

50 
	`XFªePixm≠
(
xv¨
->
di•œy
,
im2
->
pix
);

51 
im2
->
pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,

52 *
width
,*
height
,
xv¨
->
dïth
);

54 i‡(
im2
->
ty≥
>
MLX_TYPE_XIMAGE
)

56 
	`XShmDëach
(
xv¨
->
di•œy
,&(
im2
->
shm
));

57 
	`shmdt
(
im2
->
d©a
);

59 
	`XDe°royImage
(
im2
->
image
);

60 
im2
->
image
 = 
img1
;

61 
im2
->
d©a
 = 
img1
->data;

62 
im2
->
ty≥
 = 
MLX_TYPE_XIMAGE
;

63 
im2
->
size_löe
 = 
img1
->
byãs_≥r_löe
;

64 
im2
->
bµ
 = 
img1
->
bôs_≥r_pixñ
;

65  (
im2
);

66 
	}
}

69 
	$mlx_öt_egÆ_img
(
XImage
 *
img1
,XImagê*
img2
)

71 i‡(
img1
->
width
!=
img2
->width || img1->
height
!=img2->height ||

72 
img1
->
xoff£t
!=
img2
->xoff£à|| img1->
f‹m©
!=img2->format ||

73 
img1
->
byã_‹dî
!=
img2
->byte_order ||

74 
img1
->
bôm≠_unô
!=
img2
->bitmap_unit ||

75 
img1
->
bôm≠_bô_‹dî
!=
img2
->bitmap_bit_order ||

76 
img1
->
bôm≠_∑d
!=
img2
->bôm≠_∑d || img1->
dïth
!=img2->depth ||

77 
img1
->
byãs_≥r_löe
!=
img2
->bytes_per_line ||

78 
img1
->
bôs_≥r_pixñ
!=
img2
->bits_per_pixel ||

79 
img1
->
ªd_mask
!=
img2
->ªd_mask || img1->
gªí_mask
!=img2->green_mask ||

80 
img1
->
blue_mask
!=
img2
->blue_mask )

83 
	}
}

86 *
	$mlx_xpm_fûe_to_image
(
t_xv¨
 *
xv¨
,*
fûíame
,

87 *
width
,*
height
)

89  (
	`mlx_öt_xpm_f_image
(
xv¨
,
width
,
height
,
XpmRódFûeToImage
,
fûíame
));

90 
	}
}

93 *
	$mlx_xpm_to_image
(
t_xv¨
 *
xv¨
,**
d©a
,*
width
,*
height
)

95  (
	`mlx_öt_xpm_f_image
(
xv¨
,
width
,
height
,
XpmCª©eImageFromD©a
,(*)
d©a
));

96 
	}
}

	@minilibx/mlx_loop.c

12 
	~"mlx_öt.h
"

14 (*(
mlx_öt_∑øm_evít
[]))();

17 
	$mlx_lo›
(
t_xv¨
 *
xv¨
)

19 
XEvít
 
ev
;

20 
t_wö_li°
 *
wö
;

22 
	`mlx_öt_£t_wö_evít_mask
(
xv¨
);

23 
xv¨
->
do_Êush
 = 0;

26 !
xv¨
->
lo›_hook
 || 
	`XPídög
(xv¨->
di•œy
))

28 
	`XNextEvít
(
xv¨
->
di•œy
,&
ev
);

29 
wö
 = 
xv¨
->
wö_li°
;

30 
wö
 && (wö->
wödow
!=
ev
.
x™y
.window))

31 
wö
 = wö->
√xt
;

32 i‡(
wö
 && 
ev
.
ty≥
 < 
MLX_MAX_EVENT
)

33 i‡(
wö
->
hooks
[
ev
.
ty≥
].
hook
)

34 
mlx_öt_∑øm_evít
[
ev
.
ty≥
](
xv¨
, &ev, 
wö
);

36 
xv¨
->
	`lo›_hook
(xv¨->
lo›_∑øm
);

38 
	}
}

	@minilibx/mlx_loop_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_lo›_hook
(
t_xv¨
 *
xv¨
,(*
fun˘
)(),*
∑øm
)

19 
xv¨
->
lo›_hook
 = 
fun˘
;

20 
xv¨
->
lo›_∑øm
 = 
∑øm
;

21 
	}
}

	@minilibx/mlx_mouse_hook.c

12 
	~"mlx_öt.h
"

17 
	$mlx_mou£_hook
(
t_wö_li°
 *
wö
,(*
fun˘
)(),*
∑øm
)

19 
wö
->
hooks
[
Buâ⁄Pªss
].
hook
 = 
fun˘
;

20 
wö
->
hooks
[
Buâ⁄Pªss
].
∑øm
 =Öaram;

21 
wö
->
hooks
[
Buâ⁄Pªss
].
mask
 = 
Buâ⁄PªssMask
;

22 
	}
}

	@minilibx/mlx_new_image.c

14 
	~"mlx_öt.h
"

20 
	#X_ShmAâach
 1

	)

22 
	gmlx_X_îr‹
;

24 
	$shm_©t_pb
(
Di•œy
 *
d
,
XEº‹Evít
 *
ev
)

26 i‡(
ev
->
ªque°_code
==146 &&Év->
mö‹_code
==
X_ShmAâach
)

27 
	`wrôe
(2,
WARN_SHM_ATTACH
,
	`°æí
(WARN_SHM_ATTACH));

28 
mlx_X_îr‹
 = 1;

29 
	}
}

37 *
	$mlx_öt_√w_xshm_image
(
t_xv¨
 *
xv¨
,
width
,
height
,
f‹m©
)

39 
t_img
 *
img
;

40 (*
ßve_h™dÀr
)();

42 i‡(!(
img
 = 
	`mÆloc
((*img))))

44 
	`bzîo
(
img
,(*img));

45 
img
->
d©a
 = 0;

46 
img
->
image
 = 
	`XShmCª©eImage
(
xv¨
->
di•œy
,xv¨->
visuÆ
,xv¨->
dïth
,

47 
f‹m©
,
img
->
d©a
,&(img->
shm
),
width
,
height
);

48 i‡(!
img
->
image
)

50 
	`‰ì
(
img
);

53 
img
->
width
 = width;

54 
img
->
height
 = height;

55 
img
->
size_löe
 = img->
image
->
byãs_≥r_löe
;

56 
img
->
bµ
 = img->
image
->
bôs_≥r_pixñ
;

57 
img
->
f‹m©
 = format;

58 
img
->
shm
.
shmid
 = 
	`shmgë
(
IPC_PRIVATE
,(
width
+32)*
height
*4,
IPC_CREAT
|0777);

59 i‡(
img
->
shm
.
shmid
==-1)

61 
	`XDe°royImage
(
img
->
image
);

62 
	`‰ì
(
img
);

65 
img
->
d©a
 = img->
shm
.
shmaddr
 = img->
image
->d©®
	`shm©
(img->shm.
shmid
,0,0);

66 i‡(
img
->
d©a
==(*)-1)

68 
	`shm˘l
(
img
->
shm
.
shmid
,
IPC_RMID
,0);

69 
	`XDe°royImage
(
img
->
image
);

70 
	`‰ì
(
img
);

73 
img
->
shm
.
ªadO∆y
 = 
FÆ£
;

74 
mlx_X_îr‹
 = 0;

75 
ßve_h™dÀr
 = 
	`XSëEº‹H™dÀr
(
shm_©t_pb
);

76 i‡(!
	`XShmAâach
(
xv¨
->
di•œy
,&(
img
->
shm
)) ||

77 0&
	`XSync
(
xv¨
->
di•œy
,
FÆ£
Ë|| 
mlx_X_îr‹
)

79 
	`XSëEº‹H™dÀr
(
ßve_h™dÀr
);

80 
	`shmdt
(
img
->
d©a
);

81 
	`shm˘l
(
img
->
shm
.
shmid
,
IPC_RMID
,0);

82 
	`XDe°royImage
(
img
->
image
);

83 
	`‰ì
(
img
);

86 
	`XSëEº‹H™dÀr
(
ßve_h™dÀr
);

87 
	`shm˘l
(
img
->
shm
.
shmid
,
IPC_RMID
,0);

88 i‡(
xv¨
->
pshm_f‹m©
==
f‹m©
)

90 
img
->
pix
 = 
	`XShmCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,img->
shm
.
shmaddr
,

91 &(
img
->
shm
),
width
,
height
,
xv¨
->
dïth
);

92 
img
->
ty≥
 = 
MLX_TYPE_SHM_PIXMAP
;

96 
img
->
pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,

97 
width
,
height
,
xv¨
->
dïth
);

98 
img
->
ty≥
 = 
MLX_TYPE_SHM
;

100 i‡(
xv¨
->
do_Êush
)

101 
	`XFlush
(
xv¨
->
di•œy
);

102  (
img
);

103 
	}
}

107 *
	$mlx_öt_√w_image
(
t_xv¨
 *
xv¨
,
width
, 
height
,
f‹m©
)

109 
t_img
 *
img
;

111 i‡(!(
img
 = 
	`mÆloc
((*img))) ||

112 !(
img
->
d©a
 = 
	`mÆloc
((
width
+32)*
height
*4)))

114 
	`bzîo
(
img
->
d©a
,(
width
+32)*
height
*4);

115 
img
->
image
 = 
	`XCª©eImage
(
xv¨
->
di•œy
,xv¨->
visuÆ
,xv¨->
dïth
,
f‹m©
,0,

116 
img
->
d©a
,
width
,
height
,32,0);

117 i‡(!
img
->
image
)

119 
	`‰ì
(
img
->
d©a
);

120 
	`‰ì
(
img
);

123 
img
->
gc
 = 0;

124 
img
->
size_löe
 = img->
image
->
byãs_≥r_löe
;

125 
img
->
bµ
 = img->
image
->
bôs_≥r_pixñ
;

126 
img
->
width
 = width;

127 
img
->
height
 = height;

128 
img
->
pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
,xv¨->
roŸ
,
width
,
height
,xv¨->
dïth
);

129 
img
->
f‹m©
 = format;

130 
img
->
ty≥
 = 
MLX_TYPE_XIMAGE
;

131 i‡(
xv¨
->
do_Êush
)

132 
	`XFlush
(
xv¨
->
di•œy
);

133  (
img
);

134 
	}
}

137 *
	$mlx_√w_image
(
t_xv¨
 *
xv¨
,
width
, 
height
)

139 
t_img
 *
img
;

141 i‡(
xv¨
->
u£_xshm
)

142 i‡(
img
 = 
	`mlx_öt_√w_xshm_image
(
xv¨
,
width
,
height
,
ZPixm≠
))

143  (
img
);

144  (
	`mlx_öt_√w_image
(
xv¨
,
width
,
height
,
ZPixm≠
));

145 
	}
}

147 *
	$mlx_√w_image2
(
t_xv¨
 *
xv¨
,
width
, 
height
)

149 
t_img
 *
img
;

151 i‡(
xv¨
->
u£_xshm
)

152 i‡(
img
 = 
	`mlx_öt_√w_xshm_image
(
xv¨
,
width
,
height
,
XYPixm≠
))

153  (
img
);

154  (
	`mlx_öt_√w_image
(
xv¨
,
width
,
height
,
XYPixm≠
));

155 
	}
}

	@minilibx/mlx_new_window.c

19 
	~"mlx_öt.h
"

22 *
	$mlx_√w_wödow
(
t_xv¨
 *
xv¨
,
size_x
,
size_y
,*
tôÀ
)

24 
t_wö_li°
 *
√w_wö
;

25 
XSëWödowAâribuãs
 
xswa
;

26 
XGCVÆues
 
xgcv
;

28 
xswa
.
background_pixñ
 = 0;

29 
xswa
.
b‹dî_pixñ
 = -1;

30 
xswa
.
cﬁ‹m≠
 = 
xv¨
->
cm≠
;

36 
xswa
.
evít_mask
 = 0xFFFFFF;

37 i‡(!(
√w_wö
 = 
	`mÆloc
((*new_win))))

39 
√w_wö
->
wödow
 = 
	`XCª©eWödow
(
xv¨
->
di•œy
,xv¨->
roŸ
,0,0,
size_x
,
size_y
,

40 0,
C›yFromP¨ít
,
I≈utOuçut
,
xv¨
->
visuÆ
,

41 
CWEvítMask
|
CWBackPixñ
|
CWB‹dîPixñ
|

42 
CWCﬁ‹m≠
,&
xswa
);

43 
	`mlx_öt_™ti_ªsize_wö
(
xv¨
,
√w_wö
->
wödow
,
size_x
,
size_y
);

44 
	`XSt‹eName
(
xv¨
->
di•œy
,
√w_wö
->
wödow
,
tôÀ
);

45 
xgcv
.
f‹eground
 = -1;

46 
xgcv
.
fun˘i⁄
 = 
GXc›y
;

47 
xgcv
.
∂™e_mask
 = 
AŒPœ√s
;

48 
√w_wö
->
gc
 = 
	`XCª©eGC
(
xv¨
->
di•œy
,√w_wö->
wödow
,

49 
GCFun˘i⁄
|
GCPœ√Mask
|
GCF‹eground
,&
xgcv
);

50 
√w_wö
->
√xt
 = 
xv¨
->
wö_li°
;

51 
xv¨
->
wö_li°
 = 
√w_wö
;

57 
	`bzîo
(&(
√w_wö
->
hooks
), (new_win->hooks));

58 
	`XM≠Rai£d
(
xv¨
->
di•œy
,
√w_wö
->
wödow
);

59 
	`mlx_öt_waô_fú°_expo£
(
xv¨
,
√w_wö
->
wödow
);

60  (
√w_wö
);

61 
	}
}

	@minilibx/mlx_pixel_put.c

12 
	~"mlx_öt.h
"

16 
	$mlx_pixñ_put
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
,

17 
x
,
y
,
cﬁ‹
)

19 
XGCVÆues
 
xgcv
;

21 
xgcv
.
f‹eground
 = 
	`mlx_öt_gë_good_cﬁ‹
(
xv¨
,
cﬁ‹
);

22 
	`XCh™geGC
(
xv¨
->
di•œy
,
wö
->
gc
,
GCF‹eground
,&
xgcv
);

23 
	`XDøwPoöt
(
xv¨
->
di•œy
,
wö
->
wödow
,wö->
gc
,
x
,
y
);

24 i‡(
xv¨
->
do_Êush
)

25 
	`XFlush
(
xv¨
->
di•œy
);

26 
	}
}

	@minilibx/mlx_put_image_to_window.c

13 
	~"mlx_öt.h
"

16 
	$mlx_put_image_to_wödow
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
,
t_img
 *
img
,

17 
x
,
y
)

19 
GC
 
gc
;

21 
gc
 = 
wö
->gc;

22 i‡(
img
->
gc
)

24 
gc
 = 
img
->gc;

25 
	`XSëClùOrigö
(
xv¨
->
di•œy
, 
gc
, 
x
, 
y
);

27 i‡(
img
->
ty≥
==
MLX_TYPE_SHM
)

28 
	`XShmPutImage
(
xv¨
->
di•œy
,
img
->
pix
, 
wö
->
gc
, img->
image
,0,0,0,0,

29 
img
->
width
,img->
height
,
FÆ£
);

30 i‡(
img
->
ty≥
==
MLX_TYPE_XIMAGE
)

31 
	`XPutImage
(
xv¨
->
di•œy
,
img
->
pix
, 
wö
->
gc
, img->
image
,0,0,0,0,

32 
img
->
width
,img->
height
);

33 
	`XC›yAªa
(
xv¨
->
di•œy
,
img
->
pix
,
wö
->
wödow
, 
gc
,

34 0,0,
img
->
width
,img->
height
,
x
,
y
);

35 i‡(
xv¨
->
do_Êush
)

36 
	`XFlush
(
xv¨
->
di•œy
);

37 
	}
}

	@minilibx/mlx_rgb.c

6 
	~"mlx_öt.h
"

8 
s_cﬁ_«me
 
	gmlx_cﬁ_«me
[] =

	@minilibx/mlx_string_put.c

12 
	~"mlx_öt.h
"

16 
	$mlx_°rög_put
(
t_xv¨
 *
xv¨
,
t_wö_li°
 *
wö
,

17 
x
,
y
,
cﬁ‹
,*
°rög
)

19 
XGCVÆues
 
xgcv
;

21 
xgcv
.
f‹eground
 = 
	`mlx_öt_gë_good_cﬁ‹
(
xv¨
,
cﬁ‹
);

22 
	`XCh™geGC
(
xv¨
->
di•œy
,
wö
->
gc
,
GCF‹eground
,&
xgcv
);

23 
	`XDøwSåög
(
xv¨
->
di•œy
,
wö
->
wödow
,wö->
gc
,
x
,
y
,
°rög
,
	`°æí
(string));

24 i‡(
xv¨
->
do_Êush
)

25 
	`XFlush
(
xv¨
->
di•œy
);

26 
	}
}

	@minilibx/mlx_xpm.c

12 
	~"mlx_öt.h
"

14 
s_cﬁ_«me
 
mlx_cﬁ_«me
[];

17 
	#RETURN
 { i‡(
cﬁ‹s
Ë
	`‰ì
(cﬁ‹s); i‡(
èb
) free(tab); \

18 i‡(
cﬁ‹s_dúe˘
Ë
	`‰ì
(colors_direct); \

19 i‡(
img
Ë{
	`XDe°royImage
(img->
image
); \

20 
	`XFªePixm≠
(
xv¨
->
di•œy
,
img
->
pix
);
	`‰ì
(img);} \

21  ((*)0);}

	)

26 *
	$mlx_öt_gë_löe
(*
±r
,*
pos
,
size
)

28 
pos2
;

29 
pos3
;

30 
pos4
;

32 i‡((
pos2
 = 
	`mlx_öt_°r_°r
(
±r
+*
pos
,"\"",
size
-*pos))==-1)

34 i‡((
pos3
 = 
	`mlx_öt_°r_°r
(
±r
+*
pos
+
pos2
+1,"\"",
size
-*pos-pos2-1))==-1)

36 *(
±r
+*
pos
+
pos2
) = 0;

37 *(
±r
+*
pos
+
pos2
+1+
pos3
) = 0;

38 
pos4
 = *
pos
+
pos2
+1;

39 *
pos
 +
pos2
+
pos3
+2;

40  (
±r
+
pos4
);

41 
	}
}

45 *
	$mlx_öt_°©ic_löe
(**
xpm_d©a
,*
pos
,
size
)

47 *
c›y
 = 0;

48 
Àn
 = 0;

49 
Àn2
;

50 *
°r
;

52 
°r
 = 
xpm_d©a
[(*
pos
)++];

53 i‡((
Àn2
 = 
	`°æí
(
°r
))>
Àn
)

55 i‡(
c›y
)

56 
	`‰ì
(
c›y
);

57 i‡(!(
c›y
 = 
	`mÆloc
(
Àn2
+1)))

59 
Àn
 = 
Àn2
;

61 
	`°r˝y
(
c›y
,
°r
);

63  (
c›y
);

64 
	}
}

67 
	$mlx_öt_gë_cﬁ_«me
(*
°r
,
size
)

69 
ªsu…
;

71 
ªsu…
 = 0;

72 
size
--)

73 
ªsu…
 = (ªsu…<<8)+*(
°r
++);

74  (
ªsu…
);

75 
	}
}

77 
	$mlx_öt_gë_ãxt_rgb
(*
«me
, *
íd
)

79 
i
;

80 
buff
[64];

82 i‡(*
«me
 == '#')

83  (
	`°πﬁ
(
«me
+1,0,16));

84 i‡(
íd
)

86 
	`¢¥ötf
(
buff
, 64, "%†%s", 
«me
, 
íd
);

87 
«me
 = 
buff
;

89 
i
 = 0;

90 
mlx_cﬁ_«me
[
i
].
«me
)

92 i‡(!
	`°rˇ£cmp
(
mlx_cﬁ_«me
[
i
].
«me
,Çame))

93  (
mlx_cﬁ_«me
[
i
].
cﬁ‹
);

94 
i
 ++;

97 
	}
}

100 
	$mlx_öt_xpm_£t_pixñ
(
t_img
 *
img
, *
d©a
, 
›p
, 
cﬁ
, 
x
)

102 
dec
;

104 
dec
 = 
›p
;

105 
dec
--)

107 i‡(
img
->
image
->
byã_‹dî
)

108 *(
d©a
+
x
*
›p
+
dec
Ë
cﬁ
&0xFF;

110 *(
d©a
+
x
*
›p
+›p-
dec
-1Ë
cﬁ
&0xFF;

111 
cﬁ
 >>= 8;

113 
	}
}

116 *
	$mlx_öt_∑r£_xpm
(
t_xv¨
 *
xv¨
,*
öfo
,
öfo_size
,*(*
f
)())

118 
pos
;

119 *
löe
;

120 **
èb
;

121 *
d©a
;

122 *
˛ù_d©a
;

123 
nc
;

124 
›p
;

125 
˝p
;

126 
cﬁ
;

127 
rgb_cﬁ
;

128 
cﬁ_«me
;

129 
mëhod
;

130 
x
;

131 
i
;

132 
j
;

133 
t_img
 *
img
;

134 
t_xpm_cﬁ
 *
cﬁ‹s
;

135 *
cﬁ‹s_dúe˘
;

136 
width
;

137 
height
;

138 
XImage
 *
˛ù_img
;

139 
XGCVÆues
 
xgcv
;

140 
Pixm≠
 
˛ù_pix
;

142 
cﬁ‹s
 = 0;

143 
cﬁ‹s_dúe˘
 = 0;

144 
img
 = 0;

145 
èb
 = 0;

146 
pos
 = 0;

147 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)) ||

148 !(
èb
 = 
	`mlx_öt_°r_to_w‹dèb
(
löe
)Ë|| !(
width
 = 
	`©oi
(tab[0])) ||

149 !(
height
 = 
	`©oi
(
èb
[1])Ë|| !(
nc
 =átoi(tab[2])) ||

150 !(
˝p
 = 
	`©oi
(
èb
[3])) )

151 
RETURN
;

152 
	`‰ì
(
èb
);

153 
èb
 = 0;

155 
mëhod
 = 0;

156 i‡(
˝p
<=2)

158 
mëhod
 = 1;

159 i‡(!(
cﬁ‹s_dúe˘
 = 
	`mÆloc
((
˝p
==2?65536:256)*())))

160 
RETURN
;

163 i‡(!(
cﬁ‹s
 = 
	`mÆloc
(
nc
*(*colors))))

164 
RETURN
;

166 
˛ù_d©a
 = 0;

168 
i
 = 
nc
;

169 
i
--)

171 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)) ||

172 !(
èb
 = 
	`mlx_öt_°r_to_w‹dèb
(
löe
+
˝p
)) )

173 
RETURN
;

174 
j
 = 0;

175 
èb
[
j
] && 
	`°rcmp
(tab[j++],"c"));

177 i‡(!
èb
[
j
])

178 
RETURN
;

180 i‡((
rgb_cﬁ
 = 
	`mlx_öt_gë_ãxt_rgb
(
èb
[
j
],Åab[j+1]))==-1)

182 i‡(!(
˛ù_d©a
 = 
	`mÆloc
(4*
width
*
height
)) ||

183 !(
˛ù_img
 = 
	`XCª©eImage
(
xv¨
->
di•œy
, xv¨->
visuÆ
,

184 1, 
XYPixm≠
, 0, 
˛ù_d©a
,

185 
width
, 
height
, 8, (width+7)/8)) )

186 
RETURN
;

187 
	`mem£t
(
˛ù_d©a
, 0xFF, 4*
width
*
height
);

190 i‡(
mëhod
)

191 
cﬁ‹s_dúe˘
[
	`mlx_öt_gë_cﬁ_«me
(
löe
,
˝p
)] =

192 
rgb_cﬁ
>=0?
	`mlx_gë_cﬁ‹_vÆue
(
xv¨
,Ñgb_col):rgb_col;

195 
cﬁ‹s
[
i
].
«me
 = 
	`mlx_öt_gë_cﬁ_«me
(
löe
,
˝p
);

196 
cﬁ‹s
[
i
].
cﬁ
 = 
rgb_cﬁ
>=0?
	`mlx_gë_cﬁ‹_vÆue
(
xv¨
,rgb_col):rgb_col;

198 
	`‰ì
(
èb
);

201 i‡(!(
img
 = 
	`mlx_√w_image
(
xv¨
,
width
,
height
)))

202 
RETURN
;

203 
›p
 = 
img
->
bµ
/8;

206 
i
 = 
height
;

207 
d©a
 = 
img
->data;

208 
i
--)

210 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)))

211 
RETURN
;

212 
x
 = 0;

213 
x
<
width
)

215 
cﬁ
 = 0;

216 
cﬁ_«me
 = 
	`mlx_öt_gë_cﬁ_«me
(
löe
+
˝p
*
x
,cpp);

217 i‡(
mëhod
)

218 
cﬁ
 = 
cﬁ‹s_dúe˘
[
cﬁ_«me
];

221 
j
 = 
nc
;

222 
j
--)

223 i‡(
cﬁ‹s
[
j
].
«me
==
cﬁ_«me
)

225 
cﬁ
 = 
cﬁ‹s
[
j
].col;

226 
j
 = 0;

229 i‡(
cﬁ
==-1)

230 
	`XPutPixñ
(
˛ù_img
, 
x
, 
height
-1-
i
, 0);

232 
	`mlx_öt_xpm_£t_pixñ
(
img
, 
d©a
, 
›p
, 
cﬁ
, 
x
);

233 
x
 ++;

235 
d©a
 +
img
->
size_löe
;

237 i‡(
˛ù_d©a
)

239 i‡(!(
˛ù_pix
 = 
	`XCª©ePixm≠
(
xv¨
->
di•œy
, xv¨->
roŸ
,

240 
width
, 
height
, 1)) )

241 
RETURN
;

242 
img
->
gc
 = 
	`XCª©eGC
(
xv¨
->
di•œy
, 
˛ù_pix
, 0, &
xgcv
);

243 
	`XPutImage
(
xv¨
->
di•œy
, 
˛ù_pix
, 
img
->
gc
, 
˛ù_img
,

244 0, 0, 0, 0, 
width
, 
height
);

245 
	`XFªeGC
(
xv¨
->
di•œy
, 
img
->
gc
);

246 
xgcv
.
˛ù_mask
 = 
˛ù_pix
;

247 
xgcv
.
fun˘i⁄
 = 
GXc›y
;

248 
xgcv
.
∂™e_mask
 = 
AŒPœ√s
;

249 
img
->
gc
 = 
	`XCª©eGC
(
xv¨
->
di•œy
, xv¨->
roŸ
, 
GCClùMask
|
GCFun˘i⁄
|

250 
GCPœ√Mask
, &
xgcv
);

251 
	`XSync
(
xv¨
->
di•œy
, 
FÆ£
);

252 
	`XDe°royImage
(
˛ù_img
);

254 i‡(
cﬁ‹s
)

255 
	`‰ì
(
cﬁ‹s
);

256 i‡(
cﬁ‹s_dúe˘
)

257 
	`‰ì
(
cﬁ‹s_dúe˘
);

258  (
img
);

259 
	}
}

262 
	$mlx_öt_fûe_gë_rid_commít
(*
±r
, 
size
)

264 
com_begö
;

265 
com_íd
;

267 (
com_begö
 = 
	`mlx_öt_°r_°r_cŸe
(
±r
,"/*",
size
))!=-1)

269 
com_íd
 = 
	`mlx_öt_°r_°r
(
±r
+
com_begö
+2,"*/",
size
-com_begin-2);

270 
	`mem£t
(
±r
+
com_begö
,' ',
com_íd
+4);

272 (
com_begö
 = 
	`mlx_öt_°r_°r_cŸe
(
±r
,"//",
size
))!=-1)

274 
com_íd
 = 
	`mlx_öt_°r_°r
(
±r
+
com_begö
+2,"\n",
size
-com_begin-2);

275 
	`mem£t
(
±r
+
com_begö
,' ',
com_íd
+3);

277 
	}
}

280 *
	$mlx_xpm_fûe_to_image
(
t_xv¨
 *
xv¨
,*
fûe
,*
width
,*
height
)

282 
fd
;

283 
size
;

284 *
±r
;

285 
t_img
 *
img
;

287 
fd
 = -1;

288 i‡((
fd
 = 
	`›í
(
fûe
,
O_RDONLY
))==-1 || (
size
 = 
	`l£ek
(fd,0,
SEEK_END
))==-1 ||

289 (
±r
 = 
	`mm≠
(0,
size
,
PROT_WRITE
|
PROT_READ
,
MAP_PRIVATE
,
fd
,0))==

290 (*)
MAP_FAILED
)

292 i‡(
fd
>=0)

293 
	`˛o£
(
fd
);

296 
	`mlx_öt_fûe_gë_rid_commít
(
±r
, 
size
);

297 i‡(
img
 = 
	`mlx_öt_∑r£_xpm
(
xv¨
,
±r
,
size
,
mlx_öt_gë_löe
))

299 *
width
 = 
img
->width;

300 *
height
 = 
img
->height;

302 
	`munm≠
(
±r
,
size
);

303 
	`˛o£
(
fd
);

304  (
img
);

305 
	}
}

307 *
	$mlx_xpm_to_image
(
t_xv¨
 *
xv¨
,**
xpm_d©a
,*
width
,*
height
)

309 
t_img
 *
img
;

311 i‡(
img
 = 
	`mlx_öt_∑r£_xpm
(
xv¨
,
xpm_d©a
,0,
mlx_öt_°©ic_löe
))

313 *
width
 = 
img
->width;

314 *
height
 = 
img
->height;

316  (
img
);

317 
	}
}

	@minilibx/test/main.c

2 
	~"mlx.h
"

3 
	~"mlx_öt.h
"

5 
	#WIN1_SX
 242

	)

6 
	#WIN1_SY
 242

	)

7 
	#IM1_SX
 42

	)

8 
	#IM1_SY
 42

	)

9 
	#IM3_SX
 242

	)

10 
	#IM3_SY
 242

	)

12 *
	gmlx
;

13 *
	gwö1
;

14 *
	gwö2
;

15 *
	gwö3
;

16 *
	gim1
;

17 *
	gim2
;

18 *
	gim3
;

19 *
	gim4
;

20 
	gbµ1
;

21 
	gbµ2
;

22 
	gbµ3
;

23 
	gbµ4
;

24 
	g¶1
;

25 
	g¶2
;

26 
	g¶3
;

27 
	g¶4
;

28 
	gídün1
;

29 
	gídün2
;

30 
	gídün3
;

31 
	gídün4
;

32 *
	gd©a1
;

33 *
	gd©a2
;

34 *
	gd©a3
;

35 *
	gd©a4
;

36 
	gxpm1_x
;

37 
	gxpm1_y
;

39 
	gloˇl_ídün
;

41 
	$expo£_wö1
(*
p
)

43 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im3
,0,0);

44 
	}
}

46 
	$expo£_wö2
(*
p
)

48 
	`mlx_put_image_to_wödow
(
mlx
,
wö2
,
im4
,0,0);

49 
	`mlx_put_image_to_wödow
(
mlx
,
wö2
,
im2
,0,0);

50 
	}
}

52 
	$key_wö1
(
key
,*
p
)

54 
	`¥ötf
("Key i¿Wö1 : %d\n",
key
);

55 i‡(
key
==0xFF1B)

56 
	`exô
(0);

57 
	}
}

59 
	$key_wö2
(
key
,*
p
)

61 
	`¥ötf
("Key i¿Wö2 : %d\n",
key
);

62 i‡(
key
==0xFF1B)

63 
	`exô
(0);

64 
	}
}

66 
	$key_wö3
(
key
,*
p
)

68 
	`¥ötf
("Key i¿Wö3 : %d\n",
key
);

69 i‡(
key
==0xFF1B)

70 
	`mlx_de°roy_wödow
(
mlx
,
wö3
);

71 
	}
}

73 
	$mou£_wö1
(
buâ⁄
,
x
,
y
, *
p
)

75 
	`¥ötf
("Mou£ i¿Wö1, buâ⁄ %dáà%dx%d.\n",
buâ⁄
,
x
,
y
);

76 
	}
}

78 
	$mou£_wö2
(
buâ⁄
,
x
,
y
, *
p
)

80 
	`¥ötf
("Mou£ i¿Wö2, buâ⁄ %dáà%dx%d.\n",
buâ⁄
,
x
,
y
);

81 
	}
}

83 
	$mou£_wö3
(
x
,
y
, *
p
)

85 
	`¥ötf
("Mou£ movög i¿Wö3,áà%dx%d.\n",
x
,
y
);

86 
	}
}

89 
	$maö
()

91 
a
;

93 
	`¥ötf
("MinilibX Test Program\n");

94 
a
 = 0x11223344;

95 i‡(((*)&
a
)[0] == 0x11)

96 
loˇl_ídün
 = 1;

98 
loˇl_ídün
 = 0;

99 
	`¥ötf
(" => Loˇ»Endü¿: %d\n",
loˇl_ídün
);

101 
	`¥ötf
(" => Connection ...");

102 i‡(!(
mlx
 = 
	`mlx_öô
()))

104 
	`¥ötf
(" !! KO !!\n");

105 
	`exô
(1);

107 
	`¥ötf
("OK (u£_xshm %dÖshm_f‹m© %d)\n",((
t_xv¨
 *)
mlx
)->
u£_xshm
,(—_xv¨ *)mlx)->
pshm_f‹m©
);

109 
	`¥ötf
(" => Wödow1 %dx%d \"TôÀ 1\" ...",
WIN1_SX
,
WIN1_SY
);

110 i‡(!(
wö1
 = 
	`mlx_√w_wödow
(
mlx
,
WIN1_SX
,
WIN1_SY
,"Title1")))

112 
	`¥ötf
(" !! KO !!\n");

113 
	`exô
(1);

115 
	`¥ötf
("OK\n");

117 
	`¥ötf
(" => Colormap sansÉvent ...");

118 
	`cﬁ‹_m≠_1
(
wö1
,
WIN1_SX
,
WIN1_SY
);

119 
	`¥ötf
("OK\n");

120 
	`¶ìp
(2);

122 
	`¥ötf
(" => Clear Window ...");

123 
	`mlx_˛ór_wödow
(
mlx
,
wö1
);

124 
	`¥ötf
("OK\n");

125 
	`¶ìp
(2);

127 
	`¥ötf
(" => Image1 ZPixm≠ %dx%d ...",
IM1_SX
,
IM1_SY
);

128 i‡(!(
im1
 = 
	`mlx_√w_image
(
mlx
,
IM1_SX
,
IM1_SY
)))

130 
	`¥ötf
(" !! KO !!\n");

131 
	`exô
(1);

133 
d©a1
 = 
	`mlx_gë_d©a_addr
(
im1
,&
bµ1
,&
¶1
,&
ídün1
);

134 
	`¥ötf
("OK (bµ1: %d, sizñöe1: %dÉndün: %dÅy≥: %d)\n",
bµ1
,
¶1
,
ídün1
,

135 ((
t_img
 *)
im1
)->
ty≥
);

137 
	`¥ötf
(" => Fill Image1 ...");

138 
	`cﬁ‹_m≠_2
(
d©a1
,
bµ1
,
¶1
,
IM1_SX
,
IM1_SY
,
ídün1
, 1);

139 
	`¥ötf
("OK (pixm≠ : %d)\n",()((
t_img
 *)
im1
)->
pix
);

141 
	`¥ötf
(" => Put Image1 ...");

142 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im1
,20,20);

143 
	`¥ötf
("OK\n");

144 
	`¶ìp
(2);

146 
	`¥ötf
(" => Destroy Image1 ... ");

147 
	`mlx_de°roy_image
(
mlx
, 
im1
);

148 
	`¥ötf
("OK\n");

149 
	`¶ìp
(2);

151 
	`¥ötf
(" => Image3 ZPixm≠ %dx%d ...",
IM3_SX
,
IM3_SY
);

152 i‡(!(
im3
 = 
	`mlx_√w_image
(
mlx
,
IM3_SX
,
IM3_SY
)))

154 
	`¥ötf
(" !! KO !!\n");

155 
	`exô
(1);

157 
d©a3
 = 
	`mlx_gë_d©a_addr
(
im3
,&
bµ3
,&
¶3
,&
ídün3
);

158 
	`¥ötf
("OK (bµ3 %d, sizñöe3 %dÉndün3 %dÅy≥ %d)\n",
bµ3
,
¶3
,
ídün3
,

159 ((
t_img
 *)
im3
)->
ty≥
);

161 
	`¥ötf
(" => Fill Image3 ...");

162 
	`cﬁ‹_m≠_2
(
d©a3
,
bµ3
,
¶3
,
IM3_SX
,
IM3_SY
,
ídün3
, 1);

163 
	`¥ötf
("OK (pixm≠ : %d)\n",()((
t_img
 *)
im3
)->
pix
);

165 
	`¥ötf
(" => Put Image3 ...");

166 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im3
,20,20);

167 
	`¥ötf
("OK\n");

168 
	`¶ìp
(2);

170 
	`¥ötf
(" => String ...");

171 
	`mlx_°rög_put
(
mlx
,
wö1
,5,
WIN1_SY
/2,0xFF99FF,"String output");

172 
	`mlx_°rög_put
(
mlx
,
wö1
,15,
WIN1_SY
/2+20,0x00FFFF,"MinilibXÅest");

173 
	`¥ötf
("OK\n");

174 
	`¶ìp
(2);

176 
	`¥ötf
(" => Xpm from file ...");

177 i‡(!(
im2
 = 
	`mlx_xpm_fûe_to_image
(
mlx
,"›í.xpm",&
xpm1_x
,&
xpm1_y
)))

179 
	`¥ötf
(" !! KO !!\n");

180 
	`exô
(1);

182 
d©a2
 = 
	`mlx_gë_d©a_addr
(
im2
,&
bµ2
,&
¶2
,&
ídün2
);

183 
	`¥ötf
("OK (xpm %dx%d)(img bpp2: %d, sizeline2: %dÉndian: %dÅype: %d)\n",

184 
xpm1_x
,
xpm1_y
,
bµ2
,
¶2
,
ídün2
,((
t_img
 *)
im2
)->
ty≥
);

185 
	`¶ìp
(2);

187 
	`¥ötf
(" => Put xpm ...");

188 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im2
,0,0);

189 
	`mlx_put_image_to_wödow
(
mlx
,
wö1
,
im2
,100,100);

190 
	`¥ötf
("OK\n");

191 
	`¶ìp
(2);

193 
	`¥ötf
(" => 2nd window,");

194 
wö2
 = 
	`mlx_√w_wödow
(
mlx
,
WIN1_SX
,
WIN1_SY
,"Title2");

195 i‡(!(
im4
 = 
	`mlx_√w_image
(
mlx
,
IM3_SX
, 
IM3_SY
)))

197 
	`¥ötf
(" !! KO !!\n");

198 
	`exô
(1);

200 
d©a4
 = 
	`mlx_gë_d©a_addr
(
im4
,&
bµ4
,&
¶4
,&
ídün4
);

201 
	`cﬁ‹_m≠_2
(
d©a4
,
bµ4
,
¶4
,
IM3_SX
,
IM3_SY
,
ídün4
, 2);

203 
	`¥ötf
(" 3rd window, Installing hooks ...");

204 
wö3
 = 
	`mlx_√w_wödow
(
mlx
,
WIN1_SX
,
WIN1_SY
,"Title3");

205 
	`mlx_expo£_hook
(
wö1
,
expo£_wö1
,0);

206 
	`mlx_mou£_hook
(
wö1
,
mou£_wö1
,0);

207 
	`mlx_key_hook
(
wö1
,
key_wö1
,0);

208 
	`mlx_expo£_hook
(
wö2
,
expo£_wö2
,0);

209 
	`mlx_mou£_hook
(
wö2
,
mou£_wö2
,0);

210 
	`mlx_key_hook
(
wö2
,
key_wö2
,0);

211 
	`mlx_key_hook
(
wö3
,
key_wö3
,0);

213 
	`mlx_hook
(
wö3
, 
MŸi⁄NŸify
, 
PoöãrMŸi⁄Mask
, 
mou£_wö3
, 0);

215 
	`¥ötf
("OK\nNow in Loop. JustÖlay. Esc in 3Åo destroy, 1&2Åo quit.\n");

217 
	`mlx_lo›
(
mlx
);

218 
	}
}

221 
	$cﬁ‹_m≠_1
(*
wö
,
w
,
h
)

223 
x
;

224 
y
;

225 
cﬁ‹
;

227 
x
 = 
w
;

228 
x
--)

230 
y
 = 
h
;

231 
y
--)

233 
cﬁ‹
 = (
x
*255)/
w
+((((w-x)*255)/w)<<16)+(((
y
*255)/
h
)<<8);

234 
	`mlx_pixñ_put
(
mlx
,
wö
,
x
,
y
,
cﬁ‹
);

237 
	}
}

240 
	$cﬁ‹_m≠_2
(*
d©a
,
bµ
,
¶
,
w
,
h
,
ídün
, 
ty≥
)

242 
x
;

243 
y
;

244 
›p
;

245 
dec
;

246 
cﬁ‹
;

247 
cﬁ‹2
;

248 *
±r
;

250 
›p
 = 
bµ
/8;

251 
	`¥ötf
("(›∞: %dË",
›p
);

252 
y
 = 
h
;

253 
y
--)

255 
±r
 = 
d©a
+
y
*
¶
;

256 
x
 = 
w
;

257 
x
--)

259 i‡(
ty≥
==2)

260 
cﬁ‹
 = (
y
*255)/
w
+((((w-
x
)*255)/w)<<16)

261 +(((
y
*255)/
h
)<<8);

263 
cﬁ‹
 = (
x
*255)/
w
+((((w-x)*255)/w)<<16)+(((
y
*255)/
h
)<<8);

264 
cﬁ‹2
 = 
	`mlx_gë_cﬁ‹_vÆue
(
mlx
,
cﬁ‹
);

265 
dec
 = 
›p
;

266 
dec
--)

267 i‡(
ídün
==
loˇl_ídün
)

269 i‡(
ídün
)

270 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[4-opp+dec];

272 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[dec];

276 i‡(
ídün
)

277 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[opp-1-dec];

279 *(
±r
+
x
*
›p
+
dec
Ë((*)(&
cﬁ‹2
))[3-dec];

284 
	}
}

	@minilibx/test/new_win.c

4 
	~"mlx.h
"

7 *
	gmlx
;

8 *
	gwö1
;

9 *
	gwö2
;

13 
	$gîe_mou£
(
x
,
y
,
buâ⁄
,*
tŸo
)

15 
	`¥ötf
("MouseÉvent -Çew win\n");

16 
	`mlx_de°roy_wödow
(
mlx
,
wö1
);

17 
wö1
 = 
	`mlx_√w_wödow
(
mlx
,
	`øndom
()%500,random()%500,"new win");

18 
	`mlx_mou£_hook
(
wö1
,
gîe_mou£
,0);

19 
	}
}

22 
	$maö
()

24 
	`§™dom
(
	`time
(0));

25 
mlx
 = 
	`mlx_öô
();

26 
wö1
 = 
	`mlx_√w_wödow
(
mlx
,300,300,"win1");

27 
wö2
 = 
	`mlx_√w_wödow
(
mlx
,600,600,"win2");

28 
	`mlx_mou£_hook
(
wö1
,
gîe_mou£
,0);

29 
	`mlx_mou£_hook
(
wö2
,
gîe_mou£
,0);

30 
	`mlx_lo›
(
mlx
);

31 
	}
}

	@minilibx_macos/font.c

4 
	mwidth
;

5 
	mheight
;

6 
	mbyãs_≥r_pixñ
;

7 
	mpixñ_d©a
[1140 * 20 * 4 + 1];

8 } 
	gf⁄t_©œs
 = {

	@minilibx_macos/mlx.h

45 #i‚de‡
MLX_H


47 
	#MLX_H


	)

50 *
mlx_öô
();

61 *
mlx_√w_wödow
(*
mlx_±r
, 
size_x
, 
size_y
, *
tôÀ
);

65 
mlx_˛ór_wödow
(*
mlx_±r
, *
wö_±r
);

66 
mlx_pixñ_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
);

78 *
mlx_√w_image
(*
mlx_±r
,
width
,
height
);

82 *
mlx_gë_d©a_addr
(*
img_±r
, *
bôs_≥r_pixñ
,

83 *
size_löe
, *
ídün
);

88 
mlx_put_image_to_wödow
(*
mlx_±r
, *
wö_±r
, *
img_±r
,

89 
x
, 
y
);

90 
mlx_gë_cﬁ‹_vÆue
(*
mlx_±r
, 
cﬁ‹
);

97 
mlx_mou£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

98 
mlx_key_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

99 
mlx_expo£_hook
 (*
wö_±r
, (*
fun˘_±r
)(), *
∑øm
);

101 
mlx_lo›_hook
 (*
mlx_±r
, (*
fun˘_±r
)(), *
∑øm
);

102 
mlx_lo›
 (*
mlx_±r
);

120 
mlx_°rög_put
(*
mlx_±r
, *
wö_±r
, 
x
, 
y
, 
cﬁ‹
,

121 *
°rög
);

122 *
mlx_xpm_to_image
(*
mlx_±r
, **
xpm_d©a
,

123 *
width
, *
height
);

124 *
mlx_xpm_fûe_to_image
(*
mlx_±r
, *
fûíame
,

125 *
width
, *
height
);

126 
mlx_de°roy_wödow
(*
mlx_±r
, *
wö_±r
);

128 
mlx_de°roy_image
(*
mlx_±r
, *
img_±r
);

135 
mlx_hook
(*
wö_±r
, 
x_evít
, 
x_mask
,

136 (*
fun˘
)(), *
∑øm
);

138 
mlx_do_key_aut‹ïótoff
(*
mlx_±r
);

139 
mlx_do_key_aut‹ïót⁄
(*
mlx_±r
);

140 
mlx_do_sync
(*
mlx_±r
);

	@minilibx_macos/mlx_int.h

10 
	#MAX_EVENT
 32

	)

11 
	#MAX_PIXEL_NB
 200000

	)

12 
	#UNIQ_BPP
 4

	)

14 
	#FONT_WIDTH
 10

	)

15 
	#FONT_HEIGHT
 20

	)

18 (*
	gfunc_t
)();

22 
	sgl¶_öfo_s


24 
GLuöt
 
	mpixñ_vshadî
;

25 
GLuöt
 
	mpixñ_fshadî
;

26 
GLuöt
 
	mpixñ_¥ogøm
;

27 
GLöt
 
	mloc_pixñ_posôi⁄
;

28 
GLöt
 
	mloc_pixñ_ãxtuª
;

29 
GLöt
 
	mloc_pixñ_wöhÆfsize
;

31 
GLuöt
 
	mimage_vshadî
;

32 
GLuöt
 
	mimage_fshadî
;

33 
GLuöt
 
	mimage_¥ogøm
;

34 
GLöt
 
	mloc_image_posôi⁄
;

35 
GLöt
 
	mloc_image_wöhÆfsize
;

36 
GLöt
 
	mloc_image_ãxtuª
;

37 
GLöt
 
	mloc_image_pos
;

38 
GLöt
 
	mloc_image_size
;

40 
GLuöt
 
	mf⁄t_vshadî
;

41 
GLuöt
 
	mf⁄t_fshadî
;

42 
GLuöt
 
	mf⁄t_¥ogøm
;

43 
GLöt
 
	mloc_f⁄t_posôi⁄
;

44 
GLöt
 
	mloc_f⁄t_wöhÆfsize
;

45 
GLöt
 
	mloc_f⁄t_ãxtuª
;

46 
GLöt
 
	mloc_f⁄t_cﬁ‹
;

47 
GLöt
 
	mloc_f⁄t_posöwö
;

48 
GLöt
 
	mloc_f⁄t_posö©œs
;

49 
GLöt
 
	mloc_f⁄t_©œssize
;

50 } 
	tgl¶_öfo_t
;

53 
	smlx_img_li°_s


55 
	mwidth
;

56 
	mheight
;

57 *
	mbuf„r
;

58 
GLÊﬂt
 
	mvîãxes
[8];

59 
mlx_img_li°_s
 *
	m√xt
;

60 } 
	tmlx_img_li°_t
;

63 
	smlx_img_˘x_s


65 
GLuöt
 
	mãxtuª
;

66 
GLuöt
 
	mvbuf„r
;

67 
mlx_img_li°_t
 *
	mimg
;

68 
mlx_img_˘x_s
 *
	m√xt
;

69 } 
	tmlx_img_˘x_t
;

71 
	smlx_wö_li°_s


73 *
	mwöid
;

74 
mlx_img_˘x_t
 *
	mimg_li°
;

75 
	mnb_Êush
;

76 
	mpixmgt
;

77 
mlx_wö_li°_s
 *
	m√xt
;

78 } 
	tmlx_wö_li°_t
;

81 
	smlx_±r_s


83 *
	m≠pid
;

84 
mlx_wö_li°_t
 *
	mwö_li°
;

85 
mlx_img_li°_t
 *
	mimg_li°
;

86 (*
	mlo›_hook
)(*);

87 *
	mlo›_hook_d©a
;

88 *
	mlo›_timî
;

89 
mlx_img_li°_t
 *
	mf⁄t
;

90 
	mmaö_lo›_a˘ive
;

91 } 
	tmlx_±r_t
;

95 
mlx_shadîs
(
gl¶_öfo_t
 *
gl¶
);

96 **
mlx_öt_°r_to_w‹dèb
(*
°r
);

97 
mlx_öt_°r_°r
(*
°r
,*
föd
,
Àn
);

98 
mlx_öt_°r_°r_cŸe
(*
°r
,*
föd
,
Àn
);

99 
mlx_de°roy_image
(
mlx_±r_t
 *
mlx_±r
, 
mlx_img_li°_t
 *
img_±r
);

100 *
mlx_√w_image
();

101 *
mlx_xpm_to_image
(
mlx_±r_t
 *
xv¨
,**
xpm_d©a
,*
width
,*
height
);

102 
mlx_do_sync
(
mlx_±r_t
 *
mlx_±r
);

	@minilibx_macos/mlx_int_str_to_wordtab.c

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	$mlx_öt_°r_°r
(*
°r
,*
föd
,
Àn
)

11 
Àn_f
;

12 
pos
;

13 *
s
;

14 *
f
;

16 
Àn_f
 = 
	`°æí
(
föd
);

17 i‡(
Àn_f
>
Àn
)

19 
pos
 = 0;

20 *(
°r
+
Àn_f
-1))

22 
s
 = 
°r
;

23 
f
 = 
föd
;

24 *(
f
++Ë=*(
s
++))

25 i‡(!*
f
)

26  (
pos
);

27 
°r
 ++;

28 
pos
 ++;

31 
	}
}

35 
	$mlx_öt_°r_°r_cŸe
(*
°r
,*
föd
,
Àn
)

37 
Àn_f
;

38 
pos
;

39 *
s
;

40 *
f
;

41 
cŸe
;

43 
Àn_f
 = 
	`°æí
(
föd
);

44 i‡(
Àn_f
>
Àn
)

46 
cŸe
 = 0;

47 
pos
 = 0;

48 *(
°r
+
Àn_f
-1))

50 i‡(*
°r
=='"')

51 
cŸe
 = 1-cote;

52 i‡(!
cŸe
)

54 
s
 = 
°r
;

55 
f
 = 
föd
;

56 *(
f
++Ë=*(
s
++))

57 i‡(!*
f
)

58  (
pos
);

60 
°r
 ++;

61 
pos
 ++;

64 
	}
}

67 **
	$mlx_öt_°r_to_w‹dèb
(*
°r
)

69 **
èb
;

70 
pos
;

71 
nb_w‹d
;

72 
Àn
;

74 
Àn
 = 
	`°æí
(
°r
);

75 
nb_w‹d
 = 0;

76 
pos
 = 0;

77 
pos
<
Àn
)

79 *(
°r
+
pos
)==' ' || *(str+pos)=='\t')

80 
pos
 ++;

81 i‡(*(
°r
+
pos
))

82 
nb_w‹d
 ++;

83 *(
°r
+
pos
) && *(str+pos)!=' ' && *(str+pos)!='\t')

84 
pos
 ++;

86 i‡(!(
èb
 = 
	`mÆloc
((1+
nb_w‹d
)*(*tab))))

88 
nb_w‹d
 = 0;

89 
pos
 = 0;

90 
pos
<
Àn
)

92 *(
°r
+
pos
)==' ' || *(str+pos)=='\t')

94 *(
°r
+
pos
) = 0;

95 
pos
 ++;

97 i‡(*(
°r
+
pos
))

99 
èb
[
nb_w‹d
] = 
°r
+
pos
;

100 
nb_w‹d
 ++;

102 *(
°r
+
pos
) && *(str+pos)!=' ' && *(str+pos)!='\t')

103 
pos
 ++;

105 
èb
[
nb_w‹d
] = 0;

106  (
èb
);

107 
	}
}

	@minilibx_macos/mlx_new_window.h

9 #imp‹à<
Cocﬂ
/Cocﬂ.
h
>

12 @
öãrÁ˚
 
	gNSWödowEvít
 : 
NSWödow


14 
func_t
 
evít_fun˘
[
MAX_EVENT
];

15 *(
	gevít_∑øm
[
MAX_EVENT
]);

16 
	gkeyª≥©
;

17 
	gkeyÊag
;

18 
	gsize_x
;

19 
	gsize_y
;

21 - (
	gNSWödowEvít
 *Ë
	göôWôhC⁄ã¡Re˘
:(
NSRe˘
)
ª˘
 
°yÀMask
:(
NSUI¡egî
)
wö°yÀ
 
backög
:(
NSBackögSt‹eTy≥
)
bck
 
de„r
:(
BOOL
Ë
d‰
;

22 - (Ë
	g£tEvít
:()
evít
 
™dFunc
:(
func_t
)
func
 
™dP¨am
:(*)
∑øm
;

23 - (Ë
	g£tKeyRïót
:()
mode
;

24 - (Ë
	gexpo£NŸifiˇti⁄
:(
NSNŸifiˇti⁄
 *)
nŸe
;

25 - (Ë
	g˛o£NŸifiˇti⁄
:(
NSNŸifiˇti⁄
 *)
nŸe
;

26 @
	gíd


29 @
öãrÁ˚
 
	gMlxWö
 : 
NSO≥nGLVõw


31 
NSWödowEvít
 *
wö
;

32 
NSO≥nGLC⁄ãxt
 *
	g˘x
;

33 
gl¶_öfo_t
 
	ggl¶
;

34 
	g›íglwö
;

36 
	gsize_x
;

37 
	gsize_y
;

39 
	gpixñ_nb
;

40 
GLuöt
 
	gpixñ_vbuf„r
;

41 
GLuöt
 
	gpixñ_ãxtuª
;

42 *
	gpixãxbuff
;

45 - (
	gid
Ë
	göôWôhRe˘
: (
NSRe˘
)
ª˘
 
™dTôÀ
: (
NSSåög
 *)
tôÀ
 
pÁAârs
: (
NSO≥nGLPixñF‹m©Aâribuã
 *)
©ås
;

46 - (Ë
	g£À˘GLC⁄ãxt
;

47 - (Ë
	gÊushGLC⁄ãxt
;

48 - (Ë
	gpixñPutCﬁ‹
: ()
cﬁ‹
 
X
:()
x
 
Y
:()
y
;

49 - (Ë
	gmlx_gl_døw
;

50 - (Ë
	gmlx_gl_døw_img
:(
mlx_img_li°_t
 *)
img
 
™dCtx
:(
mlx_img_˘x_t
 *)
img˘x
 
™dX
:()
x
 
™dY
:()
y
;

51 - (Ë
	gmlx_gl_døw_f⁄t
:(
mlx_img_li°_t
 *)
img
 
™dCtx
:(
mlx_img_˘x_t
 *)
img˘x
 
™dX
:()
x
 
™dY
:()
y
 
™dCﬁ‹
:()
cﬁ‹
 
glyphX
:()
gx
 
glyphY
:()
gy
;

52 - (
	gNSO≥nGLC⁄ãxt
 *Ë
	g˘x
;

53 - (Ë
	g£tEvít
:()
evít
 
™dFunc
:(
func_t
)
func
 
™dP¨am
:(*)
∑øm
;

54 - (Ë
	g£tKeyRïót
:()
mode
;

55 - (Ë
	g˘xNìdsUpd©e
;

56 @
	gíd


	@minilibx_macos/mlx_rgb.c

7 
s_cﬁ_«me
 
	gmlx_cﬁ_«me
[] =

	@minilibx_macos/mlx_shaders.c

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<O≥nGL/gl3.h
>

7 
	~"mlx_öt.h
"

10 
	$di•œy_log
(
GLuöt
 
obje˘
, (*
∑øm_func
)(), (*
gëlog_func
)())

12 
GLöt
 
log_Àngth
;

13 *
log
;

15 
	`∑øm_func
(
obje˘
, 
GL_INFO_LOG_LENGTH
, &
log_Àngth
);

16 
log
 = 
	`mÆloc
(
log_Àngth
);

17 
	`gëlog_func
(
obje˘
, 
log_Àngth
, 
NULL
, 
log
);

18 
	`Ârötf
(
°dîr
, "%s", 
log
);

19 
	`‰ì
(
log
);

20 
	}
}

23 
	$mlx_shadîs_pixñ
(
gl¶_öfo_t
 *
gl¶
)

25 *
sour˚
;

26 
Àngth
;

27 
GLöt
 
a˘i⁄_ok
;

29 
gl¶
->
pixñ_vshadî
 = 
	`glCª©eShadî
(
GL_VERTEX_SHADER
);

30 
sour˚
 = 
	`°rdup
("#version 110 \n"

38 
Àngth
 = 
	`°æí
(
sour˚
);

39 
	`glShadîSour˚
(
gl¶
->
pixñ_vshadî
, 1, (c⁄° 
GLch¨
**)&
sour˚
, &
Àngth
);

40 
	`glCompûeShadî
(
gl¶
->
pixñ_vshadî
);

41 
	`‰ì
(
sour˚
);

43 
	`glGëShadîiv
(
gl¶
->
pixñ_vshadî
, 
GL_COMPILE_STATUS
, &
a˘i⁄_ok
);

44 i‡(!
a˘i⁄_ok
) {

45 
	`Ârötf
(
°dîr
, "FailedÅo compileÖixel vshader :\n");

46 
	`di•œy_log
(
gl¶
->
pixñ_vshadî
, 
glGëShadîiv
, 
glGëShadîInfoLog
);

50 
gl¶
->
pixñ_fshadî
 = 
	`glCª©eShadî
(
GL_FRAGMENT_SHADER
);

51 
sour˚
 = 
	`°rdup
("#version 110 \n"

58 
Àngth
 = 
	`°æí
(
sour˚
);

59 
	`glShadîSour˚
(
gl¶
->
pixñ_fshadî
, 1, (c⁄° 
GLch¨
**)&
sour˚
, &
Àngth
);

60 
	`glCompûeShadî
(
gl¶
->
pixñ_fshadî
);

61 
	`‰ì
(
sour˚
);

63 
	`glGëShadîiv
(
gl¶
->
pixñ_fshadî
, 
GL_COMPILE_STATUS
, &
a˘i⁄_ok
);

64 i‡(!
a˘i⁄_ok
) {

65 
	`Ârötf
(
°dîr
, "FailedÅo compileÖixel fshader :\n");

66 
	`di•œy_log
(
gl¶
->
pixñ_fshadî
, 
glGëShadîiv
, 
glGëShadîInfoLog
);

70 
gl¶
->
pixñ_¥ogøm
 = 
	`glCª©eProgøm
();

71 
	`glAâachShadî
(
gl¶
->
pixñ_¥ogøm
, gl¶->
pixñ_vshadî
);

72 
	`glAâachShadî
(
gl¶
->
pixñ_¥ogøm
, gl¶->
pixñ_fshadî
);

73 
	`glLökProgøm
(
gl¶
->
pixñ_¥ogøm
);

75 
	`glGëProgømiv
(
gl¶
->
pixñ_¥ogøm
, 
GL_LINK_STATUS
, &
a˘i⁄_ok
);

76 i‡(!
a˘i⁄_ok
) {

77 
	`Ârötf
(
°dîr
, "FailedÅoÜinkÖixel shaderÖrogram:\n");

78 
	`di•œy_log
(
gl¶
->
pixñ_¥ogøm
, 
glGëProgømiv
, 
glGëProgømInfoLog
);

82 
	`glFlush
();

85 
	}
}

88 
	$mlx_shadîs_image
(
gl¶_öfo_t
 *
gl¶
)

90 *
sour˚
;

91 
Àngth
;

92 
GLöt
 
a˘i⁄_ok
;

94 
gl¶
->
image_vshadî
 = 
	`glCª©eShadî
(
GL_VERTEX_SHADER
);

95 
sour˚
 = 
	`°rdup
("#version 110 \n"

108 
Àngth
 = 
	`°æí
(
sour˚
);

109 
	`glShadîSour˚
(
gl¶
->
image_vshadî
, 1, (c⁄° 
GLch¨
**)&
sour˚
, &
Àngth
);

110 
	`glCompûeShadî
(
gl¶
->
image_vshadî
);

111 
	`‰ì
(
sour˚
);

113 
	`glGëShadîiv
(
gl¶
->
image_vshadî
, 
GL_COMPILE_STATUS
, &
a˘i⁄_ok
);

114 i‡(!
a˘i⁄_ok
) {

115 
	`Ârötf
(
°dîr
, "FailedÅo compile image vshader :\n");

116 
	`di•œy_log
(
gl¶
->
image_vshadî
, 
glGëShadîiv
, 
glGëShadîInfoLog
);

120 
gl¶
->
image_fshadî
 = 
	`glCª©eShadî
(
GL_FRAGMENT_SHADER
);

121 
sour˚
 = 
	`°rdup
("#version 110 \n"

128 
Àngth
 = 
	`°æí
(
sour˚
);

129 
	`glShadîSour˚
(
gl¶
->
image_fshadî
, 1, (c⁄° 
GLch¨
**)&
sour˚
, &
Àngth
);

130 
	`glCompûeShadî
(
gl¶
->
image_fshadî
);

131 
	`‰ì
(
sour˚
);

133 
	`glGëShadîiv
(
gl¶
->
image_fshadî
, 
GL_COMPILE_STATUS
, &
a˘i⁄_ok
);

134 i‡(!
a˘i⁄_ok
) {

135 
	`Ârötf
(
°dîr
, "FailedÅo compile image fshader :\n");

136 
	`di•œy_log
(
gl¶
->
image_fshadî
, 
glGëShadîiv
, 
glGëShadîInfoLog
);

140 
gl¶
->
image_¥ogøm
 = 
	`glCª©eProgøm
();

141 
	`glAâachShadî
(
gl¶
->
image_¥ogøm
, gl¶->
image_vshadî
);

142 
	`glAâachShadî
(
gl¶
->
image_¥ogøm
, gl¶->
image_fshadî
);

143 
	`glLökProgøm
(
gl¶
->
image_¥ogøm
);

145 
	`glGëProgømiv
(
gl¶
->
image_¥ogøm
, 
GL_LINK_STATUS
, &
a˘i⁄_ok
);

146 i‡(!
a˘i⁄_ok
) {

147 
	`Ârötf
(
°dîr
, "FailedÅoÜink image shaderÖrogram:\n");

148 
	`di•œy_log
(
gl¶
->
image_¥ogøm
, 
glGëProgømiv
, 
glGëProgømInfoLog
);

152 
	`glFlush
();

155 
	}
}

160 
	$mlx_shadîs_f⁄t
(
gl¶_öfo_t
 *
gl¶
)

162 *
sour˚
;

163 
Àngth
;

164 
GLöt
 
a˘i⁄_ok
;

166 
gl¶
->
f⁄t_vshadî
 = 
	`glCª©eShadî
(
GL_VERTEX_SHADER
);

167 
sour˚
 = 
	`°rdup
("#version 110 \n"

181 
Àngth
 = 
	`°æí
(
sour˚
);

182 
	`glShadîSour˚
(
gl¶
->
f⁄t_vshadî
, 1, (c⁄° 
GLch¨
**)&
sour˚
, &
Àngth
);

183 
	`glCompûeShadî
(
gl¶
->
f⁄t_vshadî
);

184 
	`‰ì
(
sour˚
);

186 
	`glGëShadîiv
(
gl¶
->
f⁄t_vshadî
, 
GL_COMPILE_STATUS
, &
a˘i⁄_ok
);

187 i‡(!
a˘i⁄_ok
) {

188 
	`Ârötf
(
°dîr
, "FailedÅo compile font vshader :\n");

189 
	`di•œy_log
(
gl¶
->
f⁄t_vshadî
, 
glGëShadîiv
, 
glGëShadîInfoLog
);

193 
gl¶
->
f⁄t_fshadî
 = 
	`glCª©eShadî
(
GL_FRAGMENT_SHADER
);

194 
sour˚
 = 
	`°rdup
("#version 110 \n"

202 
Àngth
 = 
	`°æí
(
sour˚
);

203 
	`glShadîSour˚
(
gl¶
->
f⁄t_fshadî
, 1, (c⁄° 
GLch¨
**)&
sour˚
, &
Àngth
);

204 
	`glCompûeShadî
(
gl¶
->
f⁄t_fshadî
);

205 
	`‰ì
(
sour˚
);

207 
	`glGëShadîiv
(
gl¶
->
f⁄t_fshadî
, 
GL_COMPILE_STATUS
, &
a˘i⁄_ok
);

208 i‡(!
a˘i⁄_ok
) {

209 
	`Ârötf
(
°dîr
, "FailedÅo compile font fshader :\n");

210 
	`di•œy_log
(
gl¶
->
f⁄t_fshadî
, 
glGëShadîiv
, 
glGëShadîInfoLog
);

214 
gl¶
->
f⁄t_¥ogøm
 = 
	`glCª©eProgøm
();

215 
	`glAâachShadî
(
gl¶
->
f⁄t_¥ogøm
, gl¶->
f⁄t_vshadî
);

216 
	`glAâachShadî
(
gl¶
->
f⁄t_¥ogøm
, gl¶->
f⁄t_fshadî
);

217 
	`glLökProgøm
(
gl¶
->
f⁄t_¥ogøm
);

219 
	`glGëProgømiv
(
gl¶
->
f⁄t_¥ogøm
, 
GL_LINK_STATUS
, &
a˘i⁄_ok
);

220 i‡(!
a˘i⁄_ok
) {

221 
	`Ârötf
(
°dîr
, "FailedÅoÜink font shaderÖrogram:\n");

222 
	`di•œy_log
(
gl¶
->
f⁄t_¥ogøm
, 
glGëProgømiv
, 
glGëProgømInfoLog
);

226 
	`glFlush
();

229 
	}
}

233 
	$mlx_shadîs
(
gl¶_öfo_t
 *
gl¶
)

235  (
	`mlx_shadîs_pixñ
(
gl¶
Ë+ 
	`mlx_shadîs_image
(gl¶Ë+ 
	`mlx_shadîs_f⁄t
(glsl));

236 
	}
}

	@minilibx_macos/mlx_xpm.c

4 
	~<O≥nGL/gl3.h
>

5 
	~<°dlib.h
>

6 
	~<°dio.h
>

7 
	~<sys/mm™.h
>

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°rög.h
>

11 
	~"mlx_öt.h
"

13 
	ss_xpm_cﬁ


15 
	m«me
;

16 
	mcﬁ
;

17 } 
	tt_xpm_cﬁ
;

20 
	ss_cﬁ_«me


22 *
	m«me
;

23 
	mcﬁ‹
;

27 
	~"mlx_rgb.c
"

30 
	#RETURN
 { i‡(
cﬁ‹s
Ë
	`‰ì
(cﬁ‹s); i‡(
èb
) free(tab); \

31 i‡(
cﬁ‹s_dúe˘
Ë
	`‰ì
(colors_direct); \

32 i‡(
img
Ë
	`mlx_de°roy_image
(
xv¨
, img); \

33  ((*)0); }

	)

38 *
	$mlx_öt_gë_löe
(*
±r
,*
pos
,
size
)

40 
pos2
;

41 
pos3
;

42 
pos4
;

44 i‡((
pos2
 = 
	`mlx_öt_°r_°r
(
±r
+*
pos
,"\"",
size
-*pos))==-1)

46 i‡((
pos3
 = 
	`mlx_öt_°r_°r
(
±r
+*
pos
+
pos2
+1,"\"",
size
-*pos-pos2-1))==-1)

48 *(
±r
+*
pos
+
pos2
) = 0;

49 *(
±r
+*
pos
+
pos2
+1+
pos3
) = 0;

50 
pos4
 = *
pos
+
pos2
+1;

51 *
pos
 +
pos2
+
pos3
+2;

52  (
±r
+
pos4
);

53 
	}
}

57 *
	$mlx_öt_°©ic_löe
(**
xpm_d©a
,*
pos
,
size
)

59 *
c›y
 = 0;

60 
Àn
 = 0;

61 
Àn2
;

62 *
°r
;

64 
°r
 = 
xpm_d©a
[(*
pos
)++];

65 i‡((
Àn2
 = 
	`°æí
(
°r
))>
Àn
)

67 i‡(
c›y
)

68 
	`‰ì
(
c›y
);

69 i‡(!(
c›y
 = 
	`mÆloc
(
Àn2
+1)))

71 
Àn
 = 
Àn2
;

74 
	`°æ˝y
(
c›y
, 
°r
, 
Àn2
+1);

75  (
c›y
);

76 
	}
}

79 
	$mlx_öt_gë_cﬁ_«me
(*
°r
,
size
)

81 
ªsu…
;

83 
ªsu…
 = 0;

84 
size
--)

85 
ªsu…
 = (ªsu…<<8)+*(
°r
++);

86  (
ªsu…
);

87 
	}
}

89 
	$mlx_öt_gë_ãxt_rgb
(*
«me
, *
íd
)

91 
i
;

92 
buff
[64];

94 i‡(*
«me
 == '#')

95  (
	`°πﬁ
(
«me
+1,0,16));

96 i‡(
íd
)

98 
	`¢¥ötf
(
buff
, 64, "%†%s", 
«me
, 
íd
);

99 
«me
 = 
buff
;

101 
i
 = 0;

102 
mlx_cﬁ_«me
[
i
].
«me
)

104 i‡(!
	`°rˇ£cmp
(
mlx_cﬁ_«me
[
i
].
«me
,Çame))

105  (
mlx_cﬁ_«me
[
i
].
cﬁ‹
);

106 
i
 ++;

109 
	}
}

112 
	$mlx_öt_xpm_£t_pixñ
(
mlx_img_li°_t
 *
img
, *
d©a
, 
›p
, 
cﬁ
, 
x
)

128 *((*)(
d©a
+4*
x
)Ë
cﬁ
;

129 
	}
}

132 *
	$mlx_öt_∑r£_xpm
(
mlx_±r_t
 *
xv¨
,*
öfo
,
öfo_size
,*(*
f
)())

134 
pos
;

135 *
löe
;

136 **
èb
;

137 *
d©a
;

138 *
˛ù_d©a
;

139 
nc
;

140 
›p
;

141 
˝p
;

142 
cﬁ
;

143 
rgb_cﬁ
;

144 
cﬁ_«me
;

145 
mëhod
;

146 
x
;

147 
i
;

148 
j
;

149 
mlx_img_li°_t
 *
img
;

150 
t_xpm_cﬁ
 *
cﬁ‹s
;

151 *
cﬁ‹s_dúe˘
;

152 
width
;

153 
height
;

155 
cﬁ‹s
 = 0;

156 
cﬁ‹s_dúe˘
 = 0;

157 
img
 = 0;

158 
èb
 = 0;

159 
pos
 = 0;

160 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)) ||

161 !(
èb
 = 
	`mlx_öt_°r_to_w‹dèb
(
löe
)Ë|| !(
width
 = 
	`©oi
(tab[0])) ||

162 !(
height
 = 
	`©oi
(
èb
[1])Ë|| !(
nc
 =átoi(tab[2])) ||

163 !(
˝p
 = 
	`©oi
(
èb
[3])) )

164 
RETURN
;

165 
	`‰ì
(
èb
);

166 
èb
 = 0;

168 
mëhod
 = 0;

169 i‡(
˝p
<=2)

171 
mëhod
 = 1;

172 i‡(!(
cﬁ‹s_dúe˘
 = 
	`mÆloc
((
˝p
==2?65536:256)*())))

173 
RETURN
;

176 i‡(!(
cﬁ‹s
 = 
	`mÆloc
(
nc
*(*colors))))

177 
RETURN
;

179 
˛ù_d©a
 = 0;

181 
i
 = 
nc
;

182 
i
--)

184 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)) ||

185 !(
èb
 = 
	`mlx_öt_°r_to_w‹dèb
(
löe
+
˝p
)) )

186 
RETURN
;

187 
j
 = 0;

188 
èb
[
j
] && 
	`°rcmp
(tab[j++],"c"));

190 i‡(!
èb
[
j
])

191 
RETURN
;

193 
rgb_cﬁ
 = 
	`mlx_öt_gë_ãxt_rgb
(
èb
[
j
],Åab[j+1]);

205 i‡(
mëhod
)

206 
cﬁ‹s_dúe˘
[
	`mlx_öt_gë_cﬁ_«me
(
löe
,
˝p
)] = 
rgb_cﬁ
;

210 
cﬁ‹s
[
i
].
«me
 = 
	`mlx_öt_gë_cﬁ_«me
(
löe
,
˝p
);

211 
cﬁ‹s
[
i
].
cﬁ
 = 
rgb_cﬁ
;

213 
	`‰ì
(
èb
);

214 
èb
 = 0;

217 i‡(!(
img
 = 
	`mlx_√w_image
(
xv¨
,
width
,
height
)))

218 
RETURN
;

220 
›p
 = 4;

223 
i
 = 
height
;

224 
d©a
 = 
img
->
buf„r
;

225 
i
--)

227 i‡(!(
löe
 = 
	`f
(
öfo
,&
pos
,
öfo_size
)))

228 
RETURN
;

229 
x
 = 0;

230 
x
<
width
)

232 
cﬁ
 = 0;

233 
cﬁ_«me
 = 
	`mlx_öt_gë_cﬁ_«me
(
löe
+
˝p
*
x
,cpp);

234 i‡(
mëhod
)

235 
cﬁ
 = 
cﬁ‹s_dúe˘
[
cﬁ_«me
];

238 
j
 = 
nc
;

239 
j
--)

240 i‡(
cﬁ‹s
[
j
].
«me
==
cﬁ_«me
)

242 
cﬁ
 = 
cﬁ‹s
[
j
].col;

243 
j
 = 0;

249 i‡(
cﬁ
==-1)

250 
cﬁ
 = 0xFF000000;

251 
	`mlx_öt_xpm_£t_pixñ
(
img
, 
d©a
, 
›p
, 
cﬁ
, 
x
);

252 
x
 ++;

255 
d©a
 +
img
->
width
*4;

276 i‡(
cﬁ‹s
)

277 
	`‰ì
(
cﬁ‹s
);

278 i‡(
cﬁ‹s_dúe˘
)

279 
	`‰ì
(
cﬁ‹s_dúe˘
);

280  (
img
);

281 
	}
}

284 
	$mlx_öt_fûe_gë_rid_commít
(*
±r
, 
size
)

286 
com_begö
;

287 
com_íd
;

289 (
com_begö
 = 
	`mlx_öt_°r_°r_cŸe
(
±r
,"/*",
size
))!=-1)

291 
com_íd
 = 
	`mlx_öt_°r_°r
(
±r
+
com_begö
+2,"*/",
size
-com_begin-2);

292 
	`mem£t
(
±r
+
com_begö
,' ',
com_íd
+4);

294 (
com_begö
 = 
	`mlx_öt_°r_°r_cŸe
(
±r
,"//",
size
))!=-1)

296 
com_íd
 = 
	`mlx_öt_°r_°r
(
±r
+
com_begö
+2,"\n",
size
-com_begin-2);

297 
	`mem£t
(
±r
+
com_begö
,' ',
com_íd
+3);

299 
	}
}

302 *
	$mlx_xpm_fûe_to_image
(
mlx_±r_t
 *
xv¨
,*
fûe
,*
width
,*
height
)

304 
fd
;

305 
size
;

306 *
±r
;

307 
mlx_img_li°_t
 *
img
;

309 i‡((
fd
 = 
	`›í
(
fûe
,
O_RDONLY
))==-1 || (
size
 = 
	`l£ek
(fd,0,
SEEK_END
))==-1 ||

310 (
±r
 = 
	`mm≠
(0,
size
,
PROT_WRITE
|
PROT_READ
,
MAP_PRIVATE
,
fd
,0))==

311 (*)
MAP_FAILED
)

313 i‡(
fd
>=0)

314 
	`˛o£
(
fd
);

317 
	`mlx_öt_fûe_gë_rid_commít
(
±r
, 
size
);

318 i‡((
img
 = 
	`mlx_öt_∑r£_xpm
(
xv¨
,
±r
,
size
,
mlx_öt_gë_löe
)))

320 *
width
 = 
img
->width;

321 *
height
 = 
img
->height;

323 
	`munm≠
(
±r
,
size
);

324 
	`˛o£
(
fd
);

325  (
img
);

326 
	}
}

328 *
	$mlx_xpm_to_image
(
mlx_±r_t
 *
xv¨
,**
xpm_d©a
,*
width
,*
height
)

330 
mlx_img_li°_t
 *
img
;

332 i‡((
img
 = 
	`mlx_öt_∑r£_xpm
(
xv¨
,
xpm_d©a
,0,
mlx_öt_°©ic_löe
)))

334 *
width
 = 
img
->width;

335 *
height
 = 
img
->height;

337  (
img
);

338 
	}
}

	@sources/cam.c

13 
	~"fdf.h
"

52 
	$£t_n‹mÆ
(
t_m©rix
 **
n‹mÆ
,Å_m©rix **
c‹√r
)

54 
i
;

56 i‡(!
n‹mÆ
 || !
c‹√r
 || !corner[0])

58 
i
 = 0;

59 
i
 < 4 && 
c‹√r
[(i + 1) % 4])

61 
	`ve˘‹_¥odu˘_ö
(
c‹√r
[
i
], c‹√r[(ò+ 1Ë% 4], 
n‹mÆ
[i]);

62 
i
++;

64 
	}
}

66 
	$mÆloc_ˇm_èb
(
t_ˇm
 *
ˇm
)

68 
i
;

70 
i
 = 0;

71 i‡(!
ˇm
 || !ˇm->
c‹√r
 || !ˇm->
ba£
)

73 
i
 < 3)

75 i‡(!(
ˇm
->
c‹√r
[
i
] = 
	`m©rix_öô
(1, 3))

76 || !(
ˇm
->
ba£
[
i
] = 
	`m©rix_öô
(1, 3)))

78 
i
++;

81 
	}
}

83 
t_m©rix
 **
	$öô_ba£
()

85 
i
;

86 
t_m©rix
 **
ba£
;

88 i‡(!(
ba£
 = (
t_m©rix
**)
	`mÆloc
((t_matrix*) * 3)))

89  (
NULL
);

90 
i
 = 0;

91 
i
 < 3)

93 i‡(!(
ba£
[
i
] = 
	`ve˘_√w_vîtfd
(i == 0, i == 1, i == 2)))

94  (
NULL
);

95 
i
++;

97  (
ba£
);

98 
	}
}

100 
t_ˇm
 *
	$öô_ˇm
(
fov_y
, 
fov_x
, 
t_ív
 *
e
)

102 
t_ˇm
 *
c
;

104 ()
fov_x
;

105 
c
 = (
t_ˇm
*)
	`mÆloc
((t_cam));

106 i‡(!
c
 || 
fov_y
 <0 || fov_y >180 || 
fov_x
 >= 180 || fov_x <= 0

107 || !(
c
->
dú
 = 
	`ve˘_√w_vîtfd
(0, 0, 1))

108 || !(
c
->
rŸ
 = 
	`ve˘_√w_vîtfd
(0, 0, 0))

109 || !(
c
->
pos
 = 
	`ve˘_√w_vîtfd
(0, 0, 0))

110 || !(
c
->
c‹√r
 = (
t_m©rix
**)
	`mÆloc
((
t_ˇm
*) * 4))

111 || !(
c
->
ba£
 = 
	`öô_ba£
()))

113 
	`·_put°r
("error on cam PARAMETER!!!\n");

114  (
NULL
);

116 
c
->
pos
->
m
[
Z
] = -700;

117 
c
->
pos
->
m
[
X
] = 0;

118 
c
->
pos
->
m
[
Y
] = 0;

119 
c
->
rŸ
->
m
[0] = 
e
->
rŸ_x
;

120 
c
->
rŸ
->
m
[1] = 
e
->
rŸ_y
;

121 
c
->
rŸ
->
m
[2] = 
e
->
rŸ_z
;

122  (
c
);

123 
	}
}

	@sources/draw_line_triangle.c

13 
	~<mlx.h
>

14 
	~<m©h.h
>

15 
	~"fdf.h
"

16 
	~"lib·.h
"

17 
	~<uni°d.h
>

18 
	~<°dio.h
>

20 
	$døw_löe
(
t_ív
 *
e
, 
t_m©rix
 *
m©_löe
)

22 
i
;

23 
size
;

24 
t_m©rix
 *
diff
;

25 
t_m©rix
 *
‹g
;

26 
t_m©rix
 *
¥öt
;

28 i‡(!(
m©_löe
)

29 || !(
diff
 = 
	`m©rix_öô
(6, 1))

30 || !(
‹g
 = 
	`m©rix_öô
(6, 1)))

32 
i
 = -1;

33 
	`·_memmove
(
‹g
->
m
, 
m©_löe
->m, () * 6);

34 
	`·_memmove
(
diff
->
m
, 
m©_löe
->m + 6, () * 6);

35 
size
 = ()(
m©_löe
->
m
[
NORME
] + 0.5);

36 ++
i
 < 
size
)

38 i‡(!(
¥öt
 = 
	`m©rix_add
(
‹g
, 
diff
)))

40 
	`ve˘px_to_img
(
e
, 
¥öt
);

41 
	`m©rix_‰ì
(&
‹g
);

42 
‹g
 = 
¥öt
;

44 
	`m©rix_‰ì
(&
diff
);

45 
	`m©rix_‰ì
(&
‹g
);

47 
	}
}

49 
t_m©rix
 *
	$öô_m©_löe
(
t_m©rix
 *
±1
,Å_m©rix *
±2
,

50 
t_m©rix
 *
c1
,Å_m©rix *
c2
)

52 
t_m©rix
 *
m©_löe
;

53 
t_m©rix
 *
diff
;

54 
n‹me
;

56 
m©_löe
 = 
NULL
;

57 
diff
 = 
NULL
;

58 i‡(!(
m©_löe
 = 
	`m©rix_öô
(14, 1))

59 || !
±1
 || !
±2
 || !
c1
 || !
c2


60 || ((!(
diff
 = 
	`m©rix_sub
(
±2
, 
±1
)Ë&& 
	`m©rix_‰ì
(&
m©_löe
))))

61  (
NULL
);

62 
diff
->
m
[
Z
] = 0;

63 
n‹me
 = 
	`MAX
(
	`ABS
(
diff
->
m
[0]), ABS(diff->m[1]));

64 
m©_löe
->
m
[
NORME
] = 
n‹me
;

65 
	`m©rix_sˇœr_¥odu˘
(
diff
, 1 / 
n‹me
);

66 
	`·_memmove
(
m©_löe
->
m
, 
±1
->m, () * 3);

67 
	`·_memmove
(
m©_löe
->
m
 + 3, 
c1
->m, () * 3);

68 
	`·_memmove
(
m©_löe
->
m
 + 6, 
diff
->m, () * 3);

69 
	`m©rix_‰ì
(&
diff
);

70 
	`m©rix_sˇœr_¥odu˘
(
diff
 = 
	`m©rix_sub
(
c2
, 
c1
), 1 / 
n‹me
);

71 
	`·_memmove
(
m©_löe
->
m
 + 9, 
diff
->m, () * 3);

72 
	`m©rix_‰ì
(&
diff
);

73  (
m©_löe
);

74 
	}
}

76 
t_m©rix
 *
	$öô_m©_löe2
(
t_m©rix
 *
±_cﬁ‹
,Å_m©rix *
±3
,Å_m©rix *
c3
)

78 
t_m©rix
 *
±_öãr
;

79 
t_m©rix
 *
˛_öãr
;

80 
t_m©rix
 *
m©_l
;

81 
t_m©rix
 *
diff
;

83 i‡(!(
±_cﬁ‹
Ë|| !(
±3
Ë|| !(
c3
Ë|| !(
m©_l
 = 
	`m©rix_öô
(14, 1))

84 || !
±_cﬁ‹
 || !
±3
 || !
c3
 || !(
±_öãr
 = 
	`m©rix_öô
(1, 3))

85 || !(
˛_öãr
 = 
	`m©rix_öô
(1, 3)))

86  (
NULL
);

87 
	`·_memmove
(
±_öãr
->
m
, 
±_cﬁ‹
->m, () * 3);

88 i‡(!(
diff
 = 
	`m©rix_sub
(
±_öãr
, 
±3
)Ë&& 
	`m©rix_‰ì
(&
m©_l
))

89  (
NULL
);

90 
m©_l
->
m
[
NORME
] = 
	`MAX
(
	`ABS
(
diff
->m[0]), ABS(diff->m[1]));

91 
diff
 = 
	`m©rix_sˇœr_¥odu˘
(diff, 1 / 
m©_l
->
m
[
NORME
]);

92 
	`·_memmove
(
m©_l
->
m
, 
±3
->m, () * 3);

93 
	`·_memmove
(
m©_l
->
m
 + 3, 
c3
->m, () * 3);

94 
	`·_memmove
(
m©_l
->
m
 + 6, 
diff
->m, () * 3);

95 
	`m©rix_‰ì
(&
diff
);

96 
	`·_memmove
(
˛_öãr
->
m
, 
±_cﬁ‹
->m + 3, () * 3);

97 
	`m©rix_sˇœr_¥odu˘
(
diff
 = 
	`m©rix_sub
(
˛_öãr
, 
c3
), 1 / 
m©_l
->
m
[
NORME
]);

98 
	`·_memmove
(
m©_l
->
m
 + 9, 
diff
->m, () * 3);

99 i‡(
	`m©rix_‰ì
(&
diff
Ë&& m©rix_‰ì(&
˛_öãr
Ë&& m©rix_‰ì(&
±_öãr
))

100  (
m©_l
);

101  (
m©_l
);

102 
	}
}

104 
	$døw_åüngÀ
(
t_ív
 *
e
, 
t_m©rix
 *
m©_löe
,

105 
t_m©rix
 *
±3
,Å_m©rix *
c3
)

107 
i
;

108 
t_m©rix
 *
diff
;

109 
t_m©rix
 *
‹g
;

110 
t_m©rix
 *
¥öt
;

111 
t_m©rix
 *
m©_löe2
;

113 
¥öt
 = 
NULL
;

114 i‡((!(
m©_löe
))

115 || (!(
diff
 = 
	`m©rix_öô
(6, 1)))

116 || (!(
‹g
 = 
	`m©rix_öô
(6, 1)Ë&& 
	`m©rix_‰ì
(&
diff
)))

118 
	`·_memmove
(
‹g
->
m
, 
m©_löe
->m, () * 6);

119 
	`·_memmove
(
diff
->
m
, 
m©_löe
->m + 6, () * 6);

120 
i
 = -1;

121 ++
i
 < ()(
m©_löe
->
m
[
NORME
] + 0.5))

123 
¥öt
 = 
	`m©rix_add
(
‹g
, 
diff
);

124 i‡((
m©_löe2
 = 
	`öô_m©_löe2
(
¥öt
, 
±3
, 
c3
))

125 && 
	`døw_löe
(
e
, 
m©_löe2
Ë> -1 && 
	`m©rix_‰ì
(&mat_line2)

126 && 
	`m©rix_‰ì
(&
‹g
Ë&& (‹g = 
¥öt
))

127 
i
 += 0;

129 
	`m©rix_‰ì
(&
diff
);

130 
	`m©rix_‰ì
(&
¥öt
);

132 
	}
}

	@sources/draw_link_face.c

13 
	~<mlx.h
>

14 
	~<m©h.h
>

15 
	~"fdf.h
"

16 
	~"lib·.h
"

17 
	~<uni°d.h
>

18 
	~<°dio.h
>

20 
	$døw_Á˚_m≠
(
t_ív
 *
e
, 
t_m©rix
 ***
m≠
,Å_m©rix *
m©_l
)

22 
j
;

23 
i
;

24 
t_m©rix
 *
c
;

25 
t_m©rix
 *
c2
;

27 
j
 = -1;

28 ++
j
 < 
e
->
size_m≠_y
)

30 
i
 = -1;

31 ++
i
 < 
e
->
size_m≠_x
)

33 i‡(
i
 <
e
->
size_m≠_x
 - 2 && 
j
 <e->
size_m≠_y
 - 2

34 && (
c
 = 
e
->
cﬁ‹_m≠
[
j
][
i
])

35 && (
c2
 = 
e
->
cﬁ‹_m≠
[
j
 + 1][
i
 + 1])

36 && (
m©_l
 = 
	`öô_m©_löe
(
m≠
[
j
][
i
], m≠[j + 1][ò+ 1], 
c
, 
c2
))

37 && (
c2
 = 
e
->
cﬁ‹_m≠
[
j
][
i
 + 1])

38 && 
	`døw_åüngÀ
(
e
, 
m©_l
, 
m≠
[
j
][
i
 + 1], 
c2
) > -1

39 && (
c2
 = 
e
->
cﬁ‹_m≠
[
j
 + 1][
i
])

40 && 
	`døw_åüngÀ
(
e
, 
m©_l
, 
m≠
[
j
 + 1][
i
], 
c2
) > -1)

41 
i
 += 0;

42 
	`m©rix_‰ì
(&
m©_l
);

45 
	}
}

47 
	$døw_lök_m≠
(
t_ív
 *
e
, 
t_m©rix
 ***
m≠
)

49 
j
;

50 
i
;

51 
t_m©rix
 *
m©_l
;

52 
t_m©rix
 *
c1
;

53 
t_m©rix
 *
c2
;

55 
j
 = -1;

56 ++
j
 < 
e
->
size_m≠_y
)

58 
i
 = -1;

59 ++
i
 < 
e
->
size_m≠_x
)

61 
c1
 = 
e
->
cﬁ‹_m≠
[
j
][
i
];

62 i‡(
i
 <(
e
->
size_m≠_x
 - 2Ë&& (
c2
 =É->
cﬁ‹_m≠
[
j
][i + 1])

63 && (
m©_l
 = 
	`öô_m©_löe
(
m≠
[
j
][
i
], m≠[j][ò+ 1], 
c1
, 
c2
))

64 && (!
	`©o
(
m≠
[
j
][
i
], m≠[j][ò+ 1], 
e
Ë|| 
	`m©rix_‰ì
(&
m©_l
))

65 && 
	`døw_löe
(
e
, 
m©_l
Ë> -1 && 
	`m©rix_‰ì
(&mat_l))

66 
i
 += 0;

67 i‡(
j
 <(
e
->
size_m≠_y
 - 2Ë&& (
c2
 =É->
cﬁ‹_m≠
[j + 1][
i
])

68 && (
m©_l
 = 
	`öô_m©_löe
(
m≠
[
j
][
i
], m≠[j + 1][i], 
c1
, 
c2
))

69 && (!
	`©o
(
m≠
[
j
][
i
], m≠[j + 1][i], 
e
Ë|| 
	`m©rix_‰ì
(&
m©_l
))

70 && 
	`døw_löe
(
e
, 
m©_l
Ë&& 
	`m©rix_‰ì
(&mat_l))

71 
j
 += 0;

74 
	}
}

76 
	$døw_lök_m≠2
(
t_ív
 *
e
, 
t_m©rix
 ***
m≠
,Å_m©rix *
c1
,Å_m©rix *
c2
)

78 
j
;

79 
i
;

80 
t_m©rix
 *
m©_l
;

82 
j
 = 0;

83 
j
 < 
e
->
size_m≠_y
)

85 
i
 = 0;

86 
i
 < 
e
->
size_m≠_x
)

88 i‡(
i
 <(
e
->
size_m≠_x
 - 2)

89 && (
m©_l
 = 
	`öô_m©_löe
(
m≠
[
j
][
i
], m≠[j][ò+ 1], 
c1
, 
c2
))

90 && (!
	`©o
(
m≠
[
j
][
i
], m≠[j][ò+ 1], 
e
Ë|| 
	`m©rix_‰ì
(&
m©_l
))

91 && 
	`døw_löe
(
e
, 
m©_l
Ë> -1 && 
	`m©rix_‰ì
(&mat_l))

92 
i
 += 0;

93 i‡(
j
 <(
e
->
size_m≠_y
 - 2)

94 && (
m©_l
 = 
	`öô_m©_löe
(
m≠
[
j
][
i
], m≠[j + 1][i], 
c1
, 
c2
))

95 && (!
	`©o
(
m≠
[
j
][
i
], m≠[j + 1][i], 
e
Ë|| 
	`m©rix_‰ì
(&
m©_l
))

96 && 
	`døw_löe
(
e
, 
m©_l
Ë&& 
	`m©rix_‰ì
(&mat_l))

97 
j
 += 0;

98 
i
++;

100 
j
++;

102 
	}
}

	@sources/drawline.c

13 
	~<mlx.h
>

14 
	~<m©h.h
>

15 
	~"fdf.h
"

16 
	~"lib·.h
"

17 
	~<uni°d.h
>

18 
	~<°dio.h
>

20 
t_m©rix
 **
	$öô_cﬁ‹_ba£
()

22 
t_m©rix
 **
cﬁ‹_ba£
 = 
NULL
;

23 
i
;

25 i‡(!
cﬁ‹_ba£
)

27 i‡(!(
cﬁ‹_ba£
 = (
t_m©rix
**)
	`mÆloc
((color_base) * 3)))

28  (
NULL
);

29 
i
 = -1;

30 ++
i
 < 3)

31 i‡(!(
cﬁ‹_ba£
[
i
] =

32 
	`ve˘_√w_vîtfd
(255 * (
i
 == 0),

33 255 * (
i
 == 1), 255 * (i == 2))))

34  (
NULL
);

36  (
cﬁ‹_ba£
);

37 
	}
}

39 
	$døw_ba£_ˇm
(
t_ív
 *
e
, 
t_m©rix
 *
±1
,Å_m©rix *
±2
)

41 
i
;

42 
c€f_ba£
;

43 
t_m©rix
 *
m©_löe
;

44 
t_m©rix
 **
cﬁ‹_ba£
;

46 i‡(!(
cﬁ‹_ba£
 = 
	`öô_cﬁ‹_ba£
())

47 || !(
±1
 = 
	`m©rix_öô
(1, 3))

48 || !(
±2
 = 
	`m©rix_öô
(1, 3)))

50 
c€f_ba£
 = 50;

51 
±1
->
m
[0] = -(
e
->
e¸_x
 * 0.5Ë+ 2 * 
c€f_ba£
;

52 
±1
->
m
[1] = -(
e
->
e¸_y
 * 0.5Ë+ 2 * 
c€f_ba£
;

53 
i
 = 0;

54 
i
 < 3)

56 
±2
->
m
[0] = 
e
->
ˇm
->
ba£
[
i
]->m[0] * 
c€f_ba£
 + 
±1
->m[0];

57 
±2
->
m
[1] = 
e
->
ˇm
->
ba£
[
i
]->m[1] * 
c€f_ba£
 + 
±1
->m[1];

58 i‡(!(
m©_löe
 = 
	`öô_m©_löe
(
±1
, 
±2
, 
cﬁ‹_ba£
[
i
], color_base[i])))

60 
	`døw_löe
(
e
, 
m©_löe
);

61 
	`m©rix_‰ì
(&
m©_löe
);

62 
i
++;

64 
	`m©rix_‰ì
(&
±1
);

65 
	`m©rix_‰ì
(&
±2
);

66 
	}
}

68 
t_m©rix
 ***
	$c›y_ve˘_m≠
(
t_ív
 *
e
)

70 
i
;

71 
j
;

72 
t_m©rix
 ***
m≠
;

74 i‡(!(
m≠
 = (
t_m©rix
***)
	`mÆloc
(—_m©rix**Ë* 
e
->
size_m≠_y
)))

75  (
NULL
);

76 
j
 = 0;

77 
j
 < 
e
->
size_m≠_y
)

79 
i
 = 0;

80 i‡(!(
m≠
[
j
] = (
t_m©rix
**)
	`mÆloc
(—_m©rix*Ë* 
e
->
size_m≠_x
)))

81  (
NULL
);

82 
i
 < 
e
->
size_m≠_x
)

84 
m≠
[
j
][
i
] = 
	`m©rix_c›y
(
e
->
ve˘_m≠
[j][i]);

85 
i
++;

87 
j
++;

89  (
m≠
);

90 
	}
}

92 
	$maö_w‹k
(
t_ív
 *
e
)

94 
t_m©rix
 *
cﬁ‹
;

95 
t_m©rix
 *
cﬁ‹2
;

96 
t_m©rix
 ***
m≠
;

98 i‡(!(
m≠
 = 
	`gë_m≠
(
e
)))

100 
	`ba£_ch™ge
(
e
,É->
ˇm
, 
m≠
, 
NULL
);

101 
e
->
ve˘_m≠
 = 
m≠
;

102 i‡(
e
->
døw
 % 2 == 0)

103 
	`døw_lök_m≠
(
e
,É->
ve˘_m≠
);

106 
cﬁ‹
 = 
	`ve˘_√w_vîtfd
(0, 0, 0);

107 
cﬁ‹2
 = 
	`ve˘_√w_vîtfd
(0, 0, 0);

108 
	`døw_Á˚_m≠
(
e
,É->
ve˘_m≠
, 
NULL
);

109 
	`døw_lök_m≠2
(
e
,É->
ve˘_m≠
, 
cﬁ‹
, 
cﬁ‹2
);

110 
	`m©rix_‰ì
(&
cﬁ‹
);

111 
	`m©rix_‰ì
(&
cﬁ‹2
);

113 
	`døw_ba£_ˇm
(
e
, 
NULL
, NULL);

114 
	`mlx_put_image_to_wödow
(
e
->
mlx
,É->
wö
,É->
img
, 0, 0);

115 
	`mlx_do_sync
(
e
->
mlx
);

116 
	`‰ì_m≠
(&
m≠
, 
e
);

117 
	}
}

	@sources/exit.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

17 
	$‰ì_m≠
(
t_m©rix
 ****
m≠
, 
t_ív
 *
e
)

19 
i
;

20 
j
;

22 i‡(!
e


23 || !
m≠


24 || !(*
m≠
)

25 || !(**
m≠
)

26 || !(***
m≠
))

28 
j
 = 0;

29 
j
 < 
e
->
size_m≠_y
)

31 
i
 = 0;

32 
i
 < 
e
->
size_m≠_x
)

34 
	`m©rix_‰ì
((*
m≠
)[
j
] + 
i
);

35 
i
++;

37 
	`‰ì
((*
m≠
)[
j
]);

38 (*
m≠
)[
j
] = 
NULL
;

39 
j
++;

41 
	`‰ì
(*
m≠
);

42 *
m≠
 = 
NULL
;

43 
	}
}

45 
	$‰ì_öt_m≠
(
t_ív
 *
e
)

47 
j
;

49 
j
 = 0;

50 
j
 < 
e
->
size_m≠_y
)

52 
	`‰ì
(
e
->
m≠
[
j
]);

53 
j
++;

55 
	`‰ì
(
e
->
m≠
);

57 
	}
}

59 
	$‰ì_ˇm
(
t_ív
 *
e
)

61 
i
;

63 
i
 = 0;

64 
i
 < 3)

66 
	`m©rix_‰ì
(
e
->
ˇm
->
ba£
 + 
i
);

67 
i
++;

69 
	`m©rix_‰ì
(&(
e
->
ˇm
->
pos
));

70 
	`m©rix_‰ì
(&(
e
->
ˇm
->
dú
));

71 
	`m©rix_‰ì
(&(
e
->
ˇm
->
rŸ
));

72 
	`‰ì
(
e
->
ˇm
);

74 
	}
}

76 
	$·_exô
(
t_ív
 **
e
)

78 
	`‰ì
((*
e
)->
z_buf„r
);

79 
	`‰ì_öt_m≠
(*
e
);

80 
	`‰ì_m≠
(&((*
e
)->
cﬁ‹_m≠
), *e);

81 
	`‰ì_ˇm
(*
e
);

82 
	`mlx_de°roy_image
((*
e
)->
mlx
, (*e)->
img
);

83 
	`mlx_de°roy_wödow
((*
e
)->
mlx
, (*e)->
wö
);

84 
	`exô
(0);

86 
	}
}

	@sources/hook.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

22 
	$lo›_hook_begö
(
t_ív
 *
e
)

24 
ö¸em
 = 0.06;

26 (
e
->
key
.
z_down
 =1Ë?É->
mu…_z
 -= 0.2 : ()e;

27 (
e
->
key
.
z_up
 =1Ë?É->
mu…_z
 += 0.2 : ()e;

28 (
e
->
key
.
rŸ_z2
 =1Ë?É->
rŸ_z
 -
ö¸em
 : ()e;

29 (
e
->
key
.
rŸ_y2
 =1Ë?É->
rŸ_y
 -
ö¸em
 : ()e;

30 (
e
->
key
.
rŸ_x2
 =1Ë?É->
rŸ_x
 -
ö¸em
 : ()e;

31 (
e
->
key
.
rŸ_x1
 =1Ë?É->
rŸ_x
 +
ö¸em
 : ()e;

32 (
e
->
key
.
rŸ_y1
 =1Ë?É->
rŸ_y
 +
ö¸em
 : ()e;

33 (
e
->
key
.
rŸ_z1
 =1Ë?É->
rŸ_z
 +
ö¸em
 : ()e;

34 
	`m™age_ˇm_rŸ
(
e
);

35 (
e
->
key
.
ech≠
 =1Ë? 
	`·_exô
(&e) : ()e->key.echap;

36 (
e
->
key
.
deˇl_down
 =1Ë?É->
deˇly
 -e->
zoom
 / 2 : (Î->key.
ech≠
;

37 (
e
->
key
.
deˇl_up
 =1Ë?É->
deˇly
 +e->
zoom
 / 2 : (Î->key.
ech≠
;

38 (
e
->
key
.
deˇl_right
 =1Ë?É->
deˇlx
 -e->
zoom
 / 2 : (Î->key.
ech≠
;

39 (
e
->
key
.
deˇl_À·
 =1Ë?É->
deˇlx
 +e->
zoom
 / 2 : (Î->key.
ech≠
;

40 (
e
->
key
.
zoom
 =1Ë?É->zoom +4 : (Î->key.
ech≠
;

41 (
e
->
key
.
zoom_back
 =1Ë?É->
zoom
 -4 : (Î->key.
ech≠
;

42 (
e
->
key
.
sˇÀ_ö¸ó£
 =1Ë?É->
sˇÀ
 +0.2 : (Î->key.
ech≠
;

43 (
e
->
key
.
sˇÀ_de¸ó£
 =1Ë?É->
sˇÀ
 -0.2 : (Î->key.
ech≠
;

44 (
e
->
key
.
˘e1_ö¸ó£
 =1Ë?É->
˘e1
 +0.01 : (Î->key.
ech≠
;

45 (
e
->
key
.
˘e1_de¸ó£
 =1Ë?É->
˘e1
 -0.01 : (Î->key.
ech≠
;

46 
	}
}

48 
	$a˘u_™ime_t‹us
(
t_ív
 *
e
)

50 
yﬁo_compûe
;

51 
ßp
 = 1;

52 
a
 = 0.00000015;

54 
yﬁo_compûe
 = 0;

55 i‡(
e
->
key
.
swôch_™ime
 == 0)

56 
ßp
 = 0;

57 i‡(
e
->
key
.
swôch_™ime
 =1 && 
ßp
 =0 && (e->
ö¸em
 *= -1)

58 && (
ßp
 = 1))

59 
yﬁo_compûe
 = 0;

60 
e
->
võw
 +”->
key
.võw =1 &&É->
võw_sw
 == 0) ?É->view_sw = 1 : 0;

61 
e
->
võw_sw
 = (e->
key
.
võw
 == 0 &&É->view_sw == 1) ? 0 :É->view_sw;

62 
e
->
døw
 +”->
key
.døw =1 &&É->
døw_sw
 == 0) ?É->draw_sw = 1 : 0;

63 
e
->
døw_sw
 = (e->
key
.
døw
 == 0 &&É->draw_sw == 1) ? 0 :É->draw_sw;

64 i‡((
e
->
ö¸em
 < 0 &&É->
bëa
 > 
M_PI
 / 4)

65 || (
e
->
ö¸em
 > 0 &&É->
bëa
 < 
M_PI
 / 2))

66 
e
->
bëa
 +e->
ö¸em
;

67 
e
->
bëa
 = (e->
ö¸em
 < 0 && 
BETA
 < 
M_PI
 / 4Ë? M_PI / 4 - 
a
 : BETA;

68 
e
->
bëa
 = (e->
ö¸em
 > 0 && 
BETA
 > 
M_PI
 / 2Ë? M_PI / 2 + 
a
 : BETA;

69 
e
->
™ime_adví˚
 = (1 - (2 * (e->
bëa
 / (0.5 * 
M_PI
Ë- 0.5Ë- 
a
));

70 
e
->
k
 = 
	`èn
”->
bëa
);

71 
e
->
adví˚
 = (e->
võw
 % 2Ë? (e->
bëa
 - (
M_PI
 / 4)) / (M_PI / 4) : 1;

72 
e
->
phi1
 = 2 * 
M_PI
 /É->
k
;

73 
e
->
phi2
 = (e->
võw
 % 2 =0Ë? 2 * 
M_PI


74 / 
e
->
k
 : (
M_PI
 * (1 +É->
adví˚
)) /É->k;

75 
ßp
 +
yﬁo_compûe
;

76 
	}
}

78 
	$lo›_hook
(
t_ív
 *
e
)

80 
ö¸
;

82 
ö¸
 = .003;

83 
	`lo›_hook_begö
(
e
);

84 (
e
->
key
.
fi1
 =1Ë?É->
dr1
 +10 * 
ö¸
 : ()e;

85 (
e
->
key
.
fi_1
 =1Ë?É->
dr1
 -10 * 
ö¸
 : ()e;

86 (
e
->
key
.
fi2
 =1Ë?É->
dr2
 +20 * 
ö¸
 : ()e;

87 (
e
->
key
.
fi_2
 =1Ë?É->
dr2
 -20 * 
ö¸
 : ()e;

88 (
e
->
key
.
r
 =1Ë?É->∏+20 : (Î->key.
ech≠
;

89 (
e
->
key
.
g
 =1Ë?É->g +20 : (Î->key.
ech≠
;

90 (
e
->
key
.
b
 =1Ë?É->b +20 : (Î->key.
ech≠
;

91 (
e
->
key
.
•ìd_up
 =1Ë?É->
•ìd
 = 6 : ()e;

92 (
e
->
key
.
•ìd_down
 =1Ë?É->
•ìd
 = -6 : ()e;

93 (
e
->
key
.
•ìd_°›
 =1Ë?É->
•ìd
 = 0 : ()e;

94 
	`a˘u_™ime_t‹us
(
e
);

95 
	`ö¸em_pos_ˇm
(
e
);

96 
	`·_bzîo
(
e
->
d©a
,É->
size_löe
 *É->
e¸_y
);

97 
	`·_bzîo
(
e
->
z_buf„r
, 
SIZE_X
 * 
SIZE_Y
 * ());

98 
	`maö_w‹k
(
e
);

100 
	}
}

	@sources/hook_2.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

17 
	$öô_t_key_2
(
t_key
 *
key
)

19 
key
->
rŸ_z1
 = 0;

20 
key
->
rŸ_z2
 = 0;

21 
key
->
rŸ_x1
 = 0;

22 
key
->
rŸ_x2
 = 0;

23 
key
->
rŸ_y1
 = 0;

24 
key
->
rŸ_y2
 = 0;

25 
key
->
rŸ_ˇm_z1
 = 0;

26 
key
->
rŸ_ˇm_z2
 = 0;

27 
key
->
rŸ_ˇm_x1
 = 0;

28 
key
->
rŸ_ˇm_x2
 = 0;

29 
key
->
rŸ_ˇm_y1
 = 0;

30 
key
->
rŸ_ˇm_y2
 = 0;

31 
key
->
•ìd_up
 = 0;

32 
key
->
•ìd_down
 = 0;

33 
key
->
•ìd_°›
 = 0;

34 
key
->
fi1
 = 0;

35 
key
->
fi_1
 = 0;

36 
key
->
fi2
 = 0;

37 
key
->
fi_2
 = 0;

38 
key
->
võw
 = 0;

39 
key
->
z_up
 = 0;

40 
key
->
z_down
 = 0;

41 
	}
}

43 
	$öô_t_key
(
t_key
 *
key
)

45 
key
->
ech≠
 = 0;

46 
key
->
deˇl_down
 = 0;

47 
key
->
deˇl_up
 = 0;

48 
key
->
deˇl_right
 = 0;

49 
key
->
deˇl_À·
 = 0;

50 
key
->
˘e1_ö¸ó£
 = 0;

51 
key
->
˘e1_de¸ó£
 = 0;

52 
key
->
sˇÀ_ö¸ó£
 = 0;

53 
key
->
sˇÀ_de¸ó£
 = 0;

54 
key
->
r
 = 0;

55 
key
->
g
 = 0;

56 
key
->
b
 = 0;

57 
key
->
døw
 = 0;

58 
	`öô_t_key_2
(
key
);

59 
	}
}

61 
	$key_¥ess_íd
(
keycode
, 
t_ív
 *
e
)

63 (
keycode
 =18Ë? 
e
->
key
.
z_up
 = 1 : ()keycode;

64 (
keycode
 =19Ë? 
e
->
key
.
z_down
 = 1 : ()keycode;

65 (
keycode
 =53Ë? 
e
->
key
.
ech≠
 = 1 : ()keycode;

66 (
keycode
 =125Ë? 
e
->
key
.
deˇl_down
 = 1 : ()keycode;

67 (
keycode
 =126Ë? 
e
->
key
.
deˇl_up
 = 1 : ()keycode;

68 (
keycode
 =124Ë? 
e
->
key
.
deˇl_right
 = 1 : ()keycode;

69 (
keycode
 =125Ë? 
e
->
key
.
deˇl_down
 = 1 : ()keycode;

70 (
keycode
 =126Ë? 
e
->
key
.
deˇl_up
 = 1 : ()keycode;

71 (
keycode
 =124Ë? 
e
->
key
.
deˇl_right
 = 1 : ()keycode;

72 (
keycode
 =123Ë? 
e
->
key
.
deˇl_À·
 = 1 : ()keycode;

73 (
keycode
 =69Ë? 
e
->
key
.
zoom
 = 1 : ()keycode;

74 (
keycode
 =78Ë? 
e
->
key
.
zoom_back
 = 1 : ()keycode;

75 (
keycode
 =24Ë? 
e
->
key
.
sˇÀ_ö¸ó£
 = 1 : ()keycode;

76 (
keycode
 =27Ë? 
e
->
key
.
sˇÀ_de¸ó£
 = 1 : ()keycode;

77 (
keycode
 =2Ë? 
e
->
key
.
˘e1_ö¸ó£
 = 1 : ()keycode;

78 (
keycode
 =0Ë? 
e
->
key
.
˘e1_de¸ó£
 = 1 : ()keycode;

79 (
keycode
 =15Ë? 
e
->
key
.
r
 = 1 : ()keycode;

80 (
keycode
 =5Ë? 
e
->
key
.
g
 = 1 : ()keycode;

81 (
keycode
 =11Ë? 
e
->
key
.
b
 = 1 : ()keycode;

82 
	}
}

84 
	$key_¥ess
(
keycode
, 
t_ív
 *
e
)

86 (
keycode
 =36Ë? 
e
->
key
.
swôch_™ime
 = 1 : ()keycode;

87 (
keycode
 =45Ë? 
e
->
key
.
võw
 = 1 : ()keycode;

88 (
keycode
 =46Ë? 
e
->
key
.
døw
 = 1 : ()keycode;

89 (
keycode
 =6Ë? 
e
->
key
.
fi1
 = 1 : ()keycode;

90 (
keycode
 =7Ë? 
e
->
key
.
fi_1
 = 1 : ()keycode;

91 (
keycode
 =8Ë? 
e
->
key
.
fi2
 = 1 : ()keycode;

92 (
keycode
 =9Ë? 
e
->
key
.
fi_2
 = 1 : ()keycode;

93 (
keycode
 =27Ë? 
e
->
key
.
•ìd_down
 = 1 : ()keycode;

94 (
keycode
 =24Ë? 
e
->
key
.
•ìd_up
 = 1 : ()keycode;

95 (
keycode
 =29Ë? 
e
->
key
.
•ìd_°›
 = 1 : ()keycode;

96 (
keycode
 =13Ë? 
e
->
key
.
rŸ_x1
 = 1 : ()keycode;

97 (
keycode
 =12Ë? 
e
->
key
.
rŸ_y1
 = 1 : ()keycode;

98 (
keycode
 =0Ë? 
e
->
key
.
rŸ_z1
 = 1 : ()keycode;

99 (
keycode
 =1Ë? 
e
->
key
.
rŸ_x2
 = 1 : ()keycode;

100 (
keycode
 =14Ë? 
e
->
key
.
rŸ_y2
 = 1 : ()keycode;

101 (
keycode
 =2Ë? 
e
->
key
.
rŸ_z2
 = 1 : ()keycode;

102 (
keycode
 =32Ë? 
e
->
key
.
rŸ_ˇm_x1
 = 1 : ()keycode;

103 (
keycode
 =34Ë? 
e
->
key
.
rŸ_ˇm_y1
 = 1 : ()keycode;

104 (
keycode
 =38Ë? 
e
->
key
.
rŸ_ˇm_z1
 = 1 : ()keycode;

105 (
keycode
 =31Ë? 
e
->
key
.
rŸ_ˇm_x2
 = 1 : ()keycode;

106 (
keycode
 =40Ë? 
e
->
key
.
rŸ_ˇm_y2
 = 1 : ()keycode;

107 (
keycode
 =37Ë? 
e
->
key
.
rŸ_ˇm_z2
 = 1 : ()keycode;

108 
	`key_¥ess_íd
(
keycode
, 
e
);

110 
	}
}

	@sources/hook_3.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

23 
	$key_ªÀa£_íd
(
keycode
, 
t_ív
 *
e
)

25 (
keycode
 =36Ë? 
e
->
key
.
swôch_™ime
 = 0 : ()keycode;

26 (
keycode
 =53Ë? 
e
->
key
.
ech≠
 = 0 : ()keycode;

27 (
keycode
 =125Ë? 
e
->
key
.
deˇl_down
 = 0 : ()keycode;

28 (
keycode
 =126Ë? 
e
->
key
.
deˇl_up
 = 0 : ()keycode;

29 (
keycode
 =124Ë? 
e
->
key
.
deˇl_right
 = 0 : ()keycode;

30 (
keycode
 =125Ë? 
e
->
key
.
deˇl_down
 = 0 : ()keycode;

31 (
keycode
 =126Ë? 
e
->
key
.
deˇl_up
 = 0 : ()keycode;

32 (
keycode
 =124Ë? 
e
->
key
.
deˇl_right
 = 0 : ()keycode;

33 (
keycode
 =123Ë? 
e
->
key
.
deˇl_À·
 = 0 : ()keycode;

34 (
keycode
 =69Ë? 
e
->
key
.
zoom
 = 0 : ()keycode;

35 (
keycode
 =78Ë? 
e
->
key
.
zoom_back
 = 0 : ()keycode;

36 (
keycode
 =24Ë? 
e
->
key
.
sˇÀ_ö¸ó£
 = 0 : ()keycode;

37 (
keycode
 =27Ë? 
e
->
key
.
sˇÀ_de¸ó£
 = 0 : ()keycode;

38 (
keycode
 =2Ë? 
e
->
key
.
˘e1_ö¸ó£
 = 0 : ()keycode;

39 (
keycode
 =0Ë? 
e
->
key
.
˘e1_de¸ó£
 = 0 : ()keycode;

40 (
keycode
 =15Ë? 
e
->
key
.
r
 = 0 : ()keycode;

41 (
keycode
 =5Ë? 
e
->
key
.
g
 = 0 : ()keycode;

42 (
keycode
 =11Ë? 
e
->
key
.
b
 = 0 : ()keycode;

43 
	}
}

45 
	$key_ªÀa£
(
keycode
, 
t_ív
 *
e
)

47 (
keycode
 =18Ë? 
e
->
key
.
z_up
 = 0 : ()keycode;

48 (
keycode
 =19Ë? 
e
->
key
.
z_down
 = 0 : ()keycode;

49 (
keycode
 =45Ë? 
e
->
key
.
võw
 = 0 : ()keycode;

50 (
keycode
 =46Ë? 
e
->
key
.
døw
 = 0 : ()keycode;

51 (
keycode
 =6Ë? 
e
->
key
.
fi1
 = 0 : ()keycode;

52 (
keycode
 =7Ë? 
e
->
key
.
fi_1
 = 0 : ()keycode;

53 (
keycode
 =8Ë? 
e
->
key
.
fi2
 = 0 : ()keycode;

54 (
keycode
 =9Ë? 
e
->
key
.
fi_2
 = 0 : ()keycode;

55 (
keycode
 =27Ë? 
e
->
key
.
•ìd_down
 = 0 : ()keycode;

56 (
keycode
 =24Ë? 
e
->
key
.
•ìd_up
 = 0 : ()keycode;

57 (
keycode
 =29Ë? 
e
->
key
.
•ìd_°›
 = 0 : ()keycode;

58 (
keycode
 =13Ë? 
e
->
key
.
rŸ_x1
 = 0 : ()keycode;

59 (
keycode
 =12Ë? 
e
->
key
.
rŸ_y1
 = 0 : ()keycode;

60 (
keycode
 =0Ë? 
e
->
key
.
rŸ_z1
 = 0 : ()keycode;

61 (
keycode
 =1Ë? 
e
->
key
.
rŸ_x2
 = 0 : ()keycode;

62 (
keycode
 =14Ë? 
e
->
key
.
rŸ_y2
 = 0 : ()keycode;

63 (
keycode
 =2Ë? 
e
->
key
.
rŸ_z2
 = 0 : ()keycode;

64 (
keycode
 =32Ë? 
e
->
key
.
rŸ_ˇm_x1
 = 0 : ()keycode;

65 (
keycode
 =34Ë? 
e
->
key
.
rŸ_ˇm_y1
 = 0 : ()keycode;

66 (
keycode
 =38Ë? 
e
->
key
.
rŸ_ˇm_z1
 = 0 : ()keycode;

67 (
keycode
 =31Ë? 
e
->
key
.
rŸ_ˇm_x2
 = 0 : ()keycode;

68 (
keycode
 =40Ë? 
e
->
key
.
rŸ_ˇm_y2
 = 0 : ()keycode;

69 (
keycode
 =37Ë? 
e
->
key
.
rŸ_ˇm_z2
 = 0 : ()keycode;

70 
	`key_ªÀa£_íd
(
keycode
, 
e
);

72 
	}
}

	@sources/hook_cam.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

17 
	$ö¸em_dú_ˇm
(
t_ív
 *
e
)

19 
t_m©rix
 *
tmp
;

20 
t_m©rix
 *
rŸ
;

21 
t_m©rix
 *
dú
;

23 i‡(!(
rŸ
 = 
	`£t_rŸ©e
(
e
->
rŸ_x
,É->
rŸ_y
,É->
rŸ_z
))

24 || (
dú
 = 
	`m©rix_put_ö_√w
(0, 0, 1, 0)))

26 
tmp
 = 
	`m©rix_¥odu˘
(
rŸ
, 
dú
);

27 
	`m©rix_‰ì
(&
dú
);

28 
dú
 = 
tmp
;

29 
	`m©rix_sˇœr_¥odu˘
(
dú
, 0.01 * 
e
->
•ìd
);

30 
e
->
ˇm
->
pos
->
m
[
X
] +
dú
->m[X];

31 
e
->
ˇm
->
pos
->
m
[
Y
] +
dú
->m[Y];

32 
e
->
ˇm
->
pos
->
m
[
Z
] +
dú
->m[Z];

33 
	`m©rix_‰ì
(&
rŸ
);

34 
	`m©rix_‰ì
(&
dú
);

36 
	}
}

38 
	$ö¸em_pos_ˇm
(
t_ív
 *
e
)

40 
t_m©rix
 *
move
;

42 i‡(!(
move
 = 
	`m©rix_sˇœr_¥odu˘_√w
(
e
->
ˇm
->
ba£
[2],É->
•ìd
)))

44 
	`m©rix_add_ö
(
e
->
ˇm
->
pos
, 
move
,É->cam->pos);

45 
	`m©rix_‰ì
(&
move
);

46 
	}
}

48 
	$ª£t_ba£_ˇm
(
t_ˇm
 *
ˇm
)

50 
i
;

52 
i
 = 0;

53 
i
 < 3)

55 
	`m©rix_‰ì
(
ˇm
->
ba£
 + 
i
);

56 i‡(!(
ˇm
->
ba£
[
i
] = 
	`ve˘_√w_vîtfd
(i == 0, i == 1, i == 2)))

58 
i
++;

61 
	}
}

63 
	$ö¸_rŸ©i⁄
(
t_m©rix
 *
rŸ
, 
t_ív
 *
e
, 
deg
)

65 
rŸ
->
m
[2] -(
e
->
key
.
rŸ_ˇm_z2
 =1Ë? 
deg
 : 0;

66 
rŸ
->
m
[2] +(
e
->
key
.
rŸ_ˇm_z1
 =1Ë? 
deg
 : 0;

67 
rŸ
->
m
[1] -(
e
->
key
.
rŸ_ˇm_x2
 =1Ë? 
deg
 : 0;

68 
rŸ
->
m
[1] +(
e
->
key
.
rŸ_ˇm_x1
 =1Ë? 
deg
 : 0;

69 
rŸ
->
m
[0] -(
e
->
key
.
rŸ_ˇm_y2
 =1Ë? 
deg
 : 0;

70 
rŸ
->
m
[0] +(
e
->
key
.
rŸ_ˇm_y1
 =1Ë? 
deg
 : 0;

71 
	}
}

73 
	$m™age_ˇm_rŸ
(
t_ív
 *
e
)

75 
i
;

76 
t_m©rix
 *
tmp
;

77 
t_m©rix
 *
rŸ
 = 
NULL
;

78 
t_m©rix
 *
m©_rŸ
;

79 
deg
 = 0.06;

81 i‡(!(
	`ª£t_ba£_ˇm
(
e
->
ˇm
)))

83 i‡(!
rŸ
 && !‘Ÿ = 
	`m©rix_öô
(1, 3)))

85 i‡(!(
m©_rŸ
 = 
	`£t_rŸ©e
(
rŸ
->
m
[0],Ñot->m[1],Ñot->m[2])))

87 
	`ö¸_rŸ©i⁄
(
rŸ
, 
e
, 
deg
);

88 
i
 = -1;

89 (++
i
 < 3Ë|| (
	`m©rix_‰ì
(&
m©_rŸ
)))

91 i‡(!(
tmp
 = 
	`m©rix_¥odu˘
(
m©_rŸ
, 
e
->
ˇm
->
ba£
[
i
])))

93 
	`m©rix_‰ì
(
e
->
ˇm
->
ba£
 + 
i
);

94 
e
->
ˇm
->
ba£
[
i
] = 
tmp
;

96 
	}
}

	@sources/its_parse_time.c

13 
	~"lib·.h
"

14 
	~"gë_√xt_löe.h
"

15 
	~<uni°d.h
>

17 
	$gë_size
(
t_li°
 *
begö
, *
max_x
, *
max_y
)

19 
x_max
;

20 
y_max
;

21 
t_li°
 *
ñem
;

23 
x_max
 = 0;

24 
y_max
 = 0;

25 
ñem
 = 
begö
;

26 
ñem
)

28 i‡(()(
ñem
->
c⁄ã¡_size
 / ()Ë> 
x_max
)

29 
x_max
 = 
ñem
->
c⁄ã¡_size
 / ();

30 
ñem
 =ÉÀm->
√xt
;

31 
y_max
++;

33 *
max_x
 = 
x_max
;

34 *
max_y
 = 
y_max
;

35 
	}
}

37 **
	$c⁄töu_gë_m≠
(**
èb
, *
löe
, 
t_li°
 *
ñem
, *
max
)

39 
i
;

40 
j
;

42 
j
 = 
max
[1];

43 
j
 >= 0)

45 i‡(!(
èb
[
j
] = (*)
	`mÆloc
((Ë* 
max
[0])))

46  (
NULL
);

47 
	`·_bzîo
(
èb
[
j
], (Ë* 
max
[0]);

48 
löe
 = (*)
ñem
->
c⁄ã¡
;

49 
i
 = 0;

50 
i
 < ()(
ñem
->
c⁄ã¡_size
 / ()))

52 
èb
[
j
][
i
] = 
löe
[i];

53 
i
++;

55 
ñem
 =ÉÀm->
√xt
;

56 
j
--;

58  (
èb
);

59 
	}
}

61 **
	$gë_m≠_l°
(
t_li°
 *
begö
, *
max_x
, *
max_y
)

63 *
löe
;

64 **
èb
;

65 
max
[2];

67 
löe
 = 
NULL
;

68 i‡(!
begö
 || !
max_x
 || !
max_y
)

69  (
NULL
);

70 
	`gë_size
(
begö
, 
max_x
, 
max_y
);

71 i‡(!(
èb
 = (**)
	`mÆloc
((*Ë* *
max_y
)))

72  (
NULL
);

73 
max
[0] = *
max_x
;

74 
max
[1] = *
max_y
 - 1;

75  (
	`c⁄töu_gë_m≠
(
èb
, 
löe
, 
begö
, 
max
));

76 
	}
}

78 
	$‰ì_the_node
(
t_li°
 *
ñem
)

80 
t_li°
 *
tmp
;

82 
ñem
)

84 
tmp
 = 
ñem
->
√xt
;

85 
	`‰ì
(
ñem
->
c⁄ã¡
);

86 
	`‰ì
(
ñem
);

87 
ñem
 = 
tmp
;

90 
	}
}

92 **
	$gë_the_m≠
(
fd
, *
x_max
, *
y_max
)

94 
t_li°
 *
ñem
;

95 
t_li°
 *
begö
;

96 **
m≠
;

98 
begö
 = 
NULL
;

99 
î∫o
 = 0;

100 (
ñem
 = 
	`ªad_löe_numbî
(
fd
)))

102 
ñem
->
√xt
 = 
begö
;

103 
begö
 = 
ñem
;

105 i‡(!(
m≠
 = 
	`gë_m≠_l°
(
begö
, 
x_max
, 
y_max
)))

107 i‡(
î∫o
)

108 
	`≥º‹
(
	`m≠s_«me
(
NULL
));

110 
	`·_put°r
("Error onÅhe map format\n");

112 
	`‰ì_the_node
(
begö
);

113 
	`˛o£
(
fd
);

114  (
m≠
);

115 
	}
}

	@sources/its_parse_time_2.c

13 
	~"lib·.h
"

14 
	~"gë_√xt_löe.h
"

15 
	~<uni°d.h
>

17 
	$·_ª∂a˚
(*
°r
, *
to_föd
, 
ª∂a˚
)

19 
i
;

21 
i
 = 0;

22 i‡(!
°r
 || !
to_föd
)

24 
°r
[
i
])

26 i‡(
	`·_°ºchr
(
to_föd
, 
°r
[
i
]) != 0)

27 
°r
[
i
] = 
ª∂a˚
;

28 
i
++;

30 
	}
}

32 
	$·_èbÀn
(**
èb
)

34 
i
;

36 
i
 = 0;

37 
èb
[
i
])

39 
i
++;

41  (
i
);

42 
	}
}

44 *
	$gë_numbî_‰om_°r
(**
ch¨_nb
, *
size
)

46 *
èb_nb
;

47 
i
;

49 
i
 = 0;

50 i‡(!
ch¨_nb
 || !*char_nb)

51  (
NULL
);

52 i‡(!
size
)

53  (
NULL
);

54 *
size
 = 
	`·_èbÀn
(
ch¨_nb
);

55 i‡(*
size
 <0 || !(
èb_nb
 = (*)
	`mÆloc
(*size * ())))

56  (
NULL
);

57 
i
 < *
size
)

59 
èb_nb
[
i
] = 
	`·_©oi
(
ch¨_nb
[i]);

60 
i
++;

62  (
èb_nb
);

63 
	}
}

65 
	$‰ì_ch¨_•lô
(**
èb
)

67 
i
;

69 
i
 = 0;

70 
èb
[
i
])

72 
	`‰ì
(
èb
[
i
]);

73 
i
++;

75 
	`‰ì
(
èb
);

77 
	}
}

79 
t_li°
 *
	$ªad_löe_numbî
(
fd
)

81 **
èb_nb
;

82 *
löe
;

83 
ªt
;

84 *
löe_nb
;

85 
t_li°
 *
ñem
;

87 
ªt
 = 
	`gë_√xt_löe
(
fd
, &
löe
);

88 i‡(
ªt
 <= 0)

89  (
NULL
);

90 
	`·_ª∂a˚
(
löe
, "\t\v\r", ' ');

91 
èb_nb
 = 
	`·_°r•lô
(
löe
, ' ');

92 
	`‰ì
(
löe
);

93 i‡(!(
löe_nb
 = 
	`gë_numbî_‰om_°r
(
èb_nb
, &
ªt
)))

94  (
NULL
);

95 i‡(!(
ñem
 = 
	`·_l°√w
(
löe_nb
, 
ªt
 * ())))

96  (
NULL
);

97 
	`‰ì_ch¨_•lô
(
èb_nb
);

98  (
ñem
);

99 
	}
}

	@sources/main.c

13 
	~<f˙é.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

17 *
	$m≠s_«me
(*
°r
)

19 *
«me
 = 
NULL
;

21 i‡(
°r
)

22 
«me
 = 
°r
;

23  (
«me
);

24 
	}
}

26 
	$maö
(
ac
, **
av
)

28 
fd
;

29 **
m≠
;

30 
size_x
;

31 
size_y
;

33 i‡(
ac
 != 2)

35 
	`·_put°r
("usage: ./fdf FDF_FILE\n");

38 
	`m≠s_«me
(
av
[1]);

39 
fd
 = 
	`›í
(
av
[1], 
O_RDONLY
);

40 i‡(
fd
 > 0)

42 i‡((
m≠
 = 
	`gë_the_m≠
(
fd
, &
size_x
, &
size_y
)))

43 
	`ív
(
m≠
, 
size_x
, 
size_y
, 
av
[1]);

46 
	`≥º‹
(
av
[1]);

48 
	}
}

	@sources/map_adapt_to_cam.c

13 
	~<mlx.h
>

14 
	~<m©h.h
>

15 
	~"fdf.h
"

16 
	~"lib·.h
"

17 
	~<uni°d.h
>

18 
	~<°dio.h
>

20 
	$c⁄ique_ad≠ã
(
t_m©rix
 *
ve˘
)

22 
n‹me
;

24 
n‹me
 = 
ve˘
->
m
[2] / 500;

25 
ve˘
->
m
[0] /
n‹me
;

26 
ve˘
->
m
[1] /
n‹me
;

27 
	}
}

29 
	$is_out
(
t_m©rix
 *
ve˘
, 
t_ív
 *
e
)

31 i‡(
ve˘
->
m
[0] < 
e
->
e¸_x
 * -0.5

32 || 
ve˘
->
m
[0] > 
e
->
e¸_x
 * 0.5

33 || 
ve˘
->
m
[1] < 
e
->
e¸_y
 * -0.5

34 || 
ve˘
->
m
[1] > 
e
->
e¸_y
 * 0.5)

37 
	}
}

39 
	$©o
(
t_m©rix
 *
ve˘1
,Å_m©rix *
ve˘2
, 
t_ív
 *
e
)

41 i‡(!
ve˘1
 || !
ve˘2
 || !
e


42 || ((
	`is_out
(
ve˘1
, 
e
Ë&& is_out(
ve˘2
,É))

43 || 
ve˘1
->
m
[2] < 1 || 
ve˘2
->m[2] < 1))

46 
	}
}

48 
t_m©rix
 *
	$ba£_ch™ge_sˇœr
(
t_ˇm
 *
ˇm
, 
t_m©rix
 *
ve˘
)

50 
t_m©rix
 *
tmp
;

52 i‡(!(
tmp
 = 
	`m©rix_öô
(1, 3)))

53  (
NULL
);

54 
tmp
->
m
[0] = 
	`m©rix_dŸ_¥odu˘
(
ˇm
->
ba£
[0], 
ve˘
);

55 
tmp
->
m
[1] = 
	`m©rix_dŸ_¥odu˘
(
ˇm
->
ba£
[1], 
ve˘
);

56 
tmp
->
m
[2] = 
	`m©rix_dŸ_¥odu˘
(
ˇm
->
ba£
[2], 
ve˘
);

57  (
tmp
);

58 
	}
}

60 
	$ba£_ch™ge
(
t_ív
 *
e
, 
t_ˇm
 *
c
, 
t_m©rix
 ***
m≠
,Å_m©rix *
rŸ_ˇm
)

62 
i
;

63 
j
;

64 
t_m©rix
 *
tmp
;

65 
t_m©rix
 *
rŸ_obj
;

67 i‡(!(
rŸ_obj
 = 
	`£t_rŸ©e
(
e
->
rŸ_x
,É->
rŸ_y
,É->
rŸ_z
))

68 || !(
rŸ_ˇm
 = 
	`£t_rŸ©e
(
c
->
rŸ
->
m
[0], c->rot->m[1], c->rot->m[2])))

70 
j
 = -1;

71 ++
j
 < 
e
->
size_m≠_y
)

73 
i
 = -1;

74 ++
i
 < 
e
->
size_m≠_x
)

76 
tmp
 = 
	`m©rix_¥odu˘
(
rŸ_obj
, 
m≠
[
j
][
i
]);

77 
	`m©rix_‰ì
(
m≠
[
j
] + 
i
);

78 
	`m©rix_sub_ö
(
tmp
, 
c
->
pos
,Åmp);

79 
m≠
[
j
][
i
] = 
	`ba£_ch™ge_sˇœr
(
c
, 
tmp
);

80 
	`m©rix_‰ì
(&
tmp
);

81 
	`c⁄ique_ad≠ã
(
m≠
[
j
][
i
]);

84 
	`m©rix_‰ì
(&
rŸ_obj
);

85 
	`m©rix_‰ì
(&
rŸ_ˇm
);

86 
	}
}

	@sources/maped.c

13 
	~"fdf.h
"

14 
	~"c_m©hs.h
"

16 
t_m©rix
 ***
	$mÆloc_èb_ve˘
(
x
, 
y
)

18 
t_m©rix
 ***
m≠_m©
;

19 
j
;

21 
m≠_m©
 = 
NULL
;

22 i‡(!(
m≠_m©
 = (
t_m©rix
***)
	`mÆloc
(—_m©rix**Ë* 
y
)))

23  (
NULL
);

24 
j
 = 0;

25 
j
 < 
y
)

27 i‡(!(
m≠_m©
[
j
] = (
t_m©rix
**)
	`mÆloc
(—_m©rix*Ë* 
x
)))

28  (
NULL
);

29 
j
++;

31  (
m≠_m©
);

32 
	}
}

43 
	$deföe_posôi⁄
(
t_m©rix
 ***
m≠_m©
, *
max
, 
i
, 
t_ív
 *
e
)

45 
j
;

46 
r
;

47 
t_m©rix
 *
rŸ_y
;

48 
t_m©rix
 *
tmp
;

49 
ve˘_nb
[3];

51 
j
 = -1;

52 i‡(!(
rŸ_y
 = 
	`£t_rŸ©e
(0, (
e
->
dr1
 * (e->
™ime_adví˚
))

53 + ((
i
 - ((
max
[0] - 1Ë/ 2)Ë* 
e
->
phi1
) / (max[0] - 1), 0)))

55 ++
j
 < 
max
[1])

57 
r
 = (300 * 
e
->
mu…_z
 *É->
m≠_d
[
j
][
i
] / (
max
[2])Ë+ (max[4] *É->
k
);

58 
ve˘_nb
[0] = (
max
[3] * 
e
->
k
Ë+ 
r
 * 
	`cos
”->
dr2
 *É->
™ime_adví˚


59 + (
e
->
phi2
 * (
j
 - ((
max
[1] - 1) / 2))) / (max[1] - 1));

60 
ve˘_nb
[1] = 
r
 * 
	`sö
((
e
->
dr2
 * (e->
™ime_adví˚
))

61 + (
e
->
phi2
 * (
j
 - ((
max
[1] - 1) / 2))) / (max[1] - 1));

62 
ve˘_nb
[0] -
max
[4] * (
e
->
k
 - 1);

63 i‡(!(
tmp
 = 
	`ve˘_√w_vîti
(
ve˘_nb
, 3))

64 || (!(
m≠_m©
[
j
][
i
] = 
	`m©rix_¥odu˘
(
rŸ_y
, 
tmp
))))

66 
m≠_m©
[
j
][
i
]->
m
[0] -
max
[3] * (
e
->
k
) + max[4];

67 
	`m©rix_‰ì
(&
tmp
);

69 
	`m©rix_‰ì
(&
rŸ_y
);

70 
	}
}

72 
t_m©rix
 ***
	$föishe_gë_m≠_t‹us
(*
ve˘_nb
, *
max
, 
t_ív
 *
e
)

74 
t_m©rix
 ***
m≠_m©
;

75 
i
;

77 ()
ve˘_nb
;

78 i‡(!(
m≠_m©
 = 
	`mÆloc_èb_ve˘
(
max
[0], max[1])))

79  (
NULL
);

80 
i
 = 0;

81 
i
 < 
max
[0])

83 
	`deföe_posôi⁄
(
m≠_m©
, 
max
, 
i
, 
e
);

84 
i
++;

86  (
m≠_m©
);

87 
	}
}

89 **
	$ˇ°_èb
(**
èb
, 
x
, 
y
)

91 **
èb_vÆ
;

92 
j
;

93 
i
;

95 i‡(!(
èb_vÆ
 = (**)
	`mÆloc
((*Ë* 
y
)))

96  (
NULL
);

97 
j
 = 0;

98 
j
 < 
y
)

100 i‡(!(
èb_vÆ
[
j
] = (*)
	`mÆloc
((Ë* 
x
)))

101  (
NULL
);

102 
i
 = 0;

103 
i
 < 
x
)

105 
èb_vÆ
[
j
][
i
] = ()
èb
[j][i];

106 
i
++;

108 
j
++;

110  (
èb_vÆ
);

111 
	}
}

122 
t_m©rix
 ***
	$gë_m≠
(
t_ív
 *
e
)

124 
max
[5];

125 
ve˘_nb
[3];

127 i‡(!
e
)

128  (
NULL
);

129 
max
[0] = 
e
->
size_m≠_x
;

130 
max
[1] = 
e
->
size_m≠_y
;

131 
max
[2] = ((
e
->
z_max
 -É->
z_mö
)) ? (e->z_max -É->z_min) : 1;

132 
max
[3] = 
e
->
e¸_y
 * 0.70 / 5.0;

133 
max
[4] = max[3] * 3.0 / 5.0;

134 
max
[4] +max[3] * (1 - 
e
->
adví˚
);

135 
max
[3] *
e
->
adví˚
;

136  (
	`föishe_gë_m≠_t‹us
(
ve˘_nb
, 
max
, 
e
));

137 
	}
}

	@sources/mlx_env.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

16 
	~<°dio.h
>

23 
t_m©rix
 *
	$£t_cﬁ‹
(
t_ív
 *
e
, 
vÆue
)

25 
t_m©rix
 *
cﬁ‹
;

26 
∑k
[4];

28 
∑k
[3] = 
vÆue
;

29 
∑k
[2] = 
e
->
z_max
 -É->
z_mö
;

30 
cﬁ‹
 = 
NULL
;

31 
∑k
[0] = 0;

32 i‡(
∑k
[3] < 0)

34 i‡(
e
->
z_max
 > 0)

35 
∑k
[0] = 255 *Öak[3] / 
e
->
z_mö
;

36 i‡(
∑k
[2] > 0)

37 
∑k
[0] = 255 *Öak[3] /Öak[2];

39 
∑k
[0] = 255;

40 
∑k
[1] = 255 -Öak[0];

41 i‡(!(
cﬁ‹
 = 
	`ve˘_√w_vîtfd
(0, 
∑k
[1],Öak[0])))

42  (
NULL
);

45 
cﬁ‹
 = 
	`föishe_cﬁ‹
(
e
, 
∑k
);

46  (
cﬁ‹
);

47 
	}
}

49 
	$m≠_cﬁ‹_öô
(
t_ív
 *
e
)

51 
t_m©rix
 ***
cﬁ‹
;

52 
i
;

53 
j
;

55 i‡(!(
cﬁ‹
 = (
t_m©rix
***)
	`mÆloc
(—_m©rix**Ë* 
e
->
size_m≠_y
)))

57 
j
 = 0;

58 
j
 < 
e
->
size_m≠_y
)

60 i‡(!(
cﬁ‹
[
j
] = (
t_m©rix
**)
	`mÆloc
(—_m©rix*Ë* 
e
->
size_m≠_x
)))

62 
i
 = 0;

63 
i
 < 
e
->
size_m≠_x
)

65 i‡(!(
cﬁ‹
[
j
][
i
] = 
	`£t_cﬁ‹
(
e
,É->
m≠
[j][i])))

67 
i
++;

69 
j
++;

71 
e
->
cﬁ‹_m≠
 = 
cﬁ‹
;

73 
	}
}

75 
	$ív_íd
(
t_ív
 *
e
)

77 
t_ˇm
 *
ˇm
;

79 
e
->
dr1
 = 0;

80 
e
->
dr2
 = 0;

81 
e
->
e¸_x
 = 
SIZE_Y
;

82 
e
->
e¸_y
 = 
SIZE_X
;

83 
e
->
¥oj
 = 0;

84 
e
->
sˇÀ
 = 2.5;

85 
e
->
˘e1
 = 0.6;

86 
e
->
zoom
 = 8;

87 
e
->
deˇlx
 = 150;

88 
e
->
deˇly
 = 150;

89 
e
->
r
 = 255;

90 
e
->
g
 = 0;

91 
e
->
b
 = 0;

92 
e
->
•ìd
 = 0;

93 i‡(!(
ˇm
 = 
	`öô_ˇm
(60.0 / 360.0 * 
M_PI
, 60.0 / 360.0 * M_PI, 
e
)))

95 
e
->
ˇm
 = cam;

96 
	`öô_t_key
(&(
e
->
key
));

97 
	`mlx_hook
(
e
->
wö
, 2, 1, 
key_¥ess
,É);

98 
	`mlx_hook
(
e
->
wö
, 3, 2, 
key_ªÀa£
,É);

99 
	`mlx_lo›_hook
(
e
->
mlx
, 
lo›_hook
,É);

100 
	`mlx_lo›
(
e
->
mlx
);

101 
	}
}

103 
	$ív_mid
(
t_ív
 *
e
)

105 
e
->
k
 = 1;

106 
e
->
phi1
 = 
M_PI
 * 2;

107 
e
->
phi2
 = 
M_PI
 * 2;

108 
e
->
bëa
 = 
M_PI
 / 2 - 0.0001;

109 
e
->
nb_‰ame
 = 60;

110 
e
->
ö¸em
 = (
M_PI
 / (4 *É->
nb_‰ame
));

111 
e
->
võw
 = 0;

112 
e
->
døw
 = 0;

113 
e
->
rŸ_x
 = (20.0 / 360.0Ë* 2 * 
M_PI
;

114 
e
->
rŸ_y
 = (120.0 / 360.0Ë* 2 * 
M_PI
;

115 
e
->
rŸ_z
 = (0.0 / 360.0Ë* 2 * 
M_PI
;

116 
e
->
võw_sw
 = 0;

117 
e
->
døw_sw
 = 0;

118 
e
->
™ime_adví˚
 = 0;

119 
	}
}

121 
	$ív
(**
m≠
, 
size_x
, 
size_y
, *
m≠_«me
)

123 
t_ív
 
e
;

124 
t_m©rix
 *
z_dim
;

126 i‡(!(
z_dim
 = 
	`gë_max_zdim
(
m≠
, 
size_x
, 
size_y
)))

128 
e
.
mu…_z
 = 1;

129 
e
.
size_m≠_x
 = 
size_x
;

130 
e
.
size_m≠_y
 = 
size_y
;

131 
e
.
z_mö
 = 
z_dim
->
m
[0];

132 
e
.
z_max
 = 
z_dim
->
m
[1];

133 
	`ív_mid
(&
e
);

134 
e
.
m≠
 = map;

135 i‡(!(
e
.
m≠_d
 = 
	`ˇ°_èb
(
m≠
, 
size_x
, 
size_y
)))

137 i‡(!(
	`m≠_cﬁ‹_öô
(&
e
)))

139 i‡(!(
e
.
mlx
 = 
	`mlx_öô
()))

141 
e
.
wö
 = 
	`mlx_√w_wödow
”.
mlx
, 
SIZE_Y
, 
SIZE_X
, 
m≠_«me
);

142 
e
.
img
 = 
	`mlx_√w_image
”.
mlx
, 
SIZE_Y
, 
SIZE_X
);

143 
e
.
d©a
 = 
	`mlx_gë_d©a_addr
”.
img
, &”.
dïth
), &”.
size_löe
), &”.
ídün
));

144 
e
.
z_buf„r
 = (*)
	`mÆloc
((Ë* 
SIZE_X
 * 
SIZE_Y
);

145 
	`ív_íd
(&
e
);

146 
	`m©rix_‰ì
(&
z_dim
);

147 
	}
}

	@sources/print_map.c

13 
	~"fdf.h
"

15 
	$is_visibÀ
(
t_m©rix
 **
c‹√r
,Å_m©rix *
±
)

17 
i
;

18 
ªsu…
;

20 
i
 = 0;

21 i‡(
±
->
m
[
Z
] < 0)

23 
i
 < 4)

25 i‡((
ªsu…
 = 
	`m©rix_dŸ_¥odu˘
(
c‹√r
[
i
], 
±
)) == 0)

27 
i
++;

30 
	}
}

32 
	$døw_lök
(
t_ív
 *
e
, 
t_ˇm
 *
ˇm
, 
t_m©rix
 **
±
)

34 i‡(
±
[0] && 
	`is_visibÀ
(
ˇm
->
c‹√r
,Öt[0]))

36 i‡(
±
[1] &&Öt[1]->
m
[
Z
] > 0)

37 
	`døw_löe
(
e
, 
	`öô_m©_löe
(
±
[0],Öt[1],Öt[4],Öt[5]));

38 i‡(
±
[2] &&Öt[2]->
m
[
Z
] > 0)

39 
	`døw_löe
(
e
, 
	`öô_m©_löe
(
±
[0],Öt[2],Öt[4],Öt[6]));

40 i‡(
±
[3] &&Öt[3]->
m
[
Z
] > 0)

41 
	`døw_löe
(
e
, 
	`öô_m©_löe
(
±
[0],Öt[3],Öt[4],Öt[7]));

43 
	}
}

45 
	$‰ì_poöt
(
t_m©rix
 ***
±
, 
size_x
, 
size_y
)

47 
i
;

48 
j
;

50 
j
 = 0;

51 
j
 < 
size_y
)

53 
i
 = 0;

54 
i
 < 
size_x
)

56 
	`m©rix_‰ì
(
±
[
j
] + 
i
);

57 
i
++;

59 
j
++;

61 
	}
}

63 
	$öô_cﬁ‹
(
t_m©rix
 **
poöt
)

65 
i
;

67 
i
 = 4;

68 
i
 < 8)

70 i‡(!(
poöt
[
i
] = 
	`m©rix_öô
(1, 4)))

72 
i
++;

75 
	}
}

77 
	$¥öt_m≠
(
t_ív
 *
e
, 
t_ˇm
 *
ˇm
, 
t_m©rix
 ***
m≠
)

79 
i
;

80 
j
;

81 
t_m©rix
 **
poöt
 = 
NULL
;

83 i‡(!
ˇm
 || !
m≠
 || !*map || !**map)

85 
j
 = 0;

86 i‡((!
poöt
 && (!’oöà(
t_m©rix
**)
	`mÆloc
((t_matrix*) * 8))

87 || !
	`öô_cﬁ‹
(
poöt
))))

89 
j
 < 
e
->
size_m≠_y
)

91 
i
 = 0;

92 
i
 < 
e
->
size_m≠_x
)

94 
i
++;

96 
j
++;

98 
	}
}

	@sources/print_map_end.c

13 
	~"fdf.h
"

15 
	$deföe_cﬁ‹
(
t_m©rix
 *
poöt
,Å_m©rix *
cﬁ‹
)

17 i‡(
poöt
 && 
cﬁ‹
)

19 
cﬁ‹
->
m
[
R
] = 100;

20 
cﬁ‹
->
m
[
G
] = 100;

21 
cﬁ‹
->
m
[
B
] = 128 - 2 * 
poöt
->m[
Z
];

23 
	}
}

25 
	$gë_poöt
(
t_m©rix
 ***
m≠
,Å_m©rix **
poöt
, 
i
, 
j
)

27 
k
;

29 i‡(!(
poöt
[0] = (
i
 < 10 && 
j
 < 10Ë? 
	`m©rix_c›y
(
m≠
[j][i]Ë: 
NULL
)

30 || !(
poöt
[1] = (
i
 < 9 && 
j
 < 10Ë? 
	`m©rix_c›y
(
m≠
[j][ò+ 1]Ë: 
NULL
)

31 || !(
poöt
[2] = (
j
 < 9 && 
i
 < 10Ë? 
	`m©rix_c›y
(
m≠
[j + 1][i]Ë: 
NULL
)

32 || !(
poöt
[3] =

33 (
j
 < 9 && 
i
 < 9Ë? 
	`m©rix_c›y
(
m≠
[j + 1][ò+ 1]Ë: 
NULL
))

34 
k
 = 0;

35 
k
 = 0;

36 
k
 < 4)

38 i‡(
poöt
[
k
])

39 
	`deföe_cﬁ‹
(
poöt
[
k
],Öoint[k + 4]);

41 
poöt
[
k
] = 
NULL
;

42 
k
++;

44 
	}
}

	@sources/print_somthing.c

13 
	~<mlx.h
>

14 
	~"lib·.h
"

15 
	~"fdf.h
"

16 
	~<°dio.h
>

18 
	$ve˘px_to_img
(
t_ív
 *
e
, 
t_m©rix
 *
pos_cﬁ‹
)

20 
x
;

21 
y
;

22 
r
;

23 
g
;

24 
b
;

26 
x
 = ()
pos_cﬁ‹
->
m
[0];

27 
y
 = ()
pos_cﬁ‹
->
m
[1];

28 
x
 +
SIZE_Y
 / 2;

29 
y
 +
SIZE_X
 / 2;

30 i‡(
x
 < 0 || x >
e
->
e¸_x
 || 
y
 < 0 || y >e->
e¸_y
 || 
pos_cﬁ‹
->
m
[2] < 0

31 || (
pos_cﬁ‹
->
m
[2] >

32 
e
->
z_buf„r
[
x
 + 
y
 *É->
e¸_x
] &&É->z_buffer[x + y *É->ecr_x]))

34 
e
->
z_buf„r
[
x
 + 
y
 *É->
e¸_x
] = 
pos_cﬁ‹
->
m
[2];

35 
r
 = ()
pos_cﬁ‹
->
m
[3] + 0.5;

36 
g
 = ()
pos_cﬁ‹
->
m
[4] + 0.5;

37 
b
 = ()
pos_cﬁ‹
->
m
[5] + 0.5;

38 
e
->
d©a
[
y
 *É->
size_löe
 + 
x
 * 4 + 2] = 
r
;

39 
e
->
d©a
[
y
 *É->
size_löe
 + 
x
 * 4 + 1] = 
g
;

40 
e
->
d©a
[
y
 *É->
size_löe
 + 
x
 * 4] = 
b
;

41 
	}
}

43 
	$°rög_put
(*
s1
, *
s2
, 
t_ív
 *
e
, 
y
)

45 *
°r
;

47 
°r
 = 
	`·_°∫ew
(60);

48 
°r
 = 
	`·_°r˝y
(°r, 
s1
);

49 
°r
 = 
	`·_°rˇt
(°r, 
s2
);

50 
	`mlx_°rög_put
(
e
->
mlx
,É->
wö
, 1200, 
y
, 0xFFFF00, 
°r
);

51 
	`‰ì
(
°r
);

52 
	}
}

54 
	$¥öt_°©e
(
t_ív
 *
e
)

56 *
°r
;

58 
	`°rög_put
("Zoom : ", 
	`·_ôﬂ
(
e
->
zoom
),É, 50);

59 (
e
->
¥oj
 =0Ë? 
°r
 = 
	`·_°rdup
("isometric") : ()e->proj;

60 (
e
->
¥oj
 =1Ë? 
°r
 = 
	`·_°rdup
("parallel") : ()e->proj;

61 (
e
->
¥oj
 =2Ë? 
°r
 = 
	`·_°rdup
("conic") : ()e->proj;

62 
	`°rög_put
("Proje˘i⁄ : ", 
°r
, 
e
, 60);

63 
	`·_°rdñ
(&
°r
);

64 
	`°rög_put
("Off£àX : ", 
	`·_ôﬂ
(
e
->
deˇlx
),É, 70);

65 
	`°rög_put
("Off£àY : ", 
	`·_ôﬂ
(
e
->
deˇly
),É, 80);

66 
°r
 = 
	`·_°∫ew
(20);

67 
°r
 = 
	`·_°rˇt
(str, " R = ");

68 
°r
 = 
	`·_°rˇt
(°r, 
	`·_ôﬂ
(()
e
->
r
));

69 
°r
 = 
	`·_°rˇt
(str, " G = ");

70 
°r
 = 
	`·_°rˇt
(°r, 
	`·_ôﬂ
(()
e
->
g
));

71 
°r
 = 
	`·_°rˇt
(str, " B = ");

72 
°r
 = 
	`·_°rˇt
(°r, 
	`·_ôﬂ
(()
e
->
b
));

73 
	`°rög_put
(
°r
, "", 
e
, 90);

74 
	`·_°rdñ
(&
°r
);

75 
	}
}

82 
t_m©rix
 *
	$gë_max_zdim
(**
m≠
, 
size_x
, 
size_y
)

84 
i
;

85 
j
;

86 
t_m©rix
 *
z_dim
;

88 i‡(!(
z_dim
 = 
	`m©rix_öô
(2, 1)))

89  (
NULL
);

90 
z_dim
->
m
[0] = 
m≠
[0][0];

91 
z_dim
->
m
[1] = 
m≠
[0][0];

92 
j
 = 0;

93 
j
 < 
size_y
)

95 
i
 = 0;

96 
i
 < 
size_x
)

98 i‡(
m≠
[
j
][
i
] < 
z_dim
->
m
[0])

99 
z_dim
->
m
[0] = 
m≠
[
j
][
i
];

100 i‡(
m≠
[
j
][
i
] > 
z_dim
->
m
[1])

101 
z_dim
->
m
[1] = 
m≠
[
j
][
i
];

102 
i
++;

104 
j
++;

106  (
z_dim
);

107 
	}
}

109 
t_m©rix
 *
	$föishe_cﬁ‹
(
t_ív
 *
e
, *
∑k
)

111 
t_m©rix
 *
cﬁ‹
;

113 i‡(
e
->
z_max
 !0 &&É->
z_mö
 < 0)

114 
∑k
[0] = 255 *Öak[3] / 
e
->
z_max
;

115 i‡(
∑k
[2] != 0)

116 
∑k
[0] = 255 *Öak[3] /Öak[2];

118 
∑k
[0] = 255;

119 
∑k
[1] = 255 -Öak[0];

120 i‡(!(
cﬁ‹
 = 
	`ve˘_√w_vîtfd
(
∑k
[0],Öak[1], 0)))

121  (
NULL
);

122  (
cﬁ‹
);

123 
	}
}

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

63 
_XmbÀn
(

64 *
°r
,

65 
Àn


70 
	#X_HAVE_UTF8_STRING
 1

	)

75 #ifde‡
__˛™g__


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

80 *
	tXPoöãr
;

82 
	#Boﬁ
 

	)

83 
	#Sètus
 

	)

84 
	#True
 1

	)

85 
	#FÆ£
 0

	)

87 
	#QueuedAÃódy
 0

	)

88 
	#QueuedA·îRódög
 1

	)

89 
	#QueuedA·îFlush
 2

	)

91 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

92 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

93 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

94 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

95 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

96 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

97 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

98 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

99 
	#AŒPœ√s
 (()~0L)

	)

100 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

101 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

102 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

103 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

104 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

105 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

106 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

107 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

108 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

109 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

110 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

111 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

112 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

113 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

114 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

115 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

116 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

117 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

118 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

119 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

120 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

123 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

124 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

125 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

126 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

127 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

128 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

129 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

130 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

131 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

132 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

133 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

134 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

135 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

136 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

137 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

138 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

139 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

140 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

141 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

142 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

143 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

148 
	s_XExtD©a
 {

149 
	mnumbî
;

150 
_XExtD©a
 *
	m√xt
;

151 (*
	m‰ì_¥iv©e
)(

152 
_XExtD©a
 *
	mexãnsi⁄


154 
XPoöãr
 
	m¥iv©e_d©a
;

155 } 
	tXExtD©a
;

161 
	mexãnsi⁄
;

162 
	mmaj‹_›code
;

163 
	mfú°_evít
;

164 
	mfú°_îr‹
;

165 } 
	tXExtCodes
;

172 
	mdïth
;

173 
	mbôs_≥r_pixñ
;

174 
	msˇ∆öe_∑d
;

175 } 
	tXPixm≠F‹m©VÆues
;

182 
	mfun˘i⁄
;

183 
	m∂™e_mask
;

184 
	mf‹eground
;

185 
	mbackground
;

186 
	mlöe_width
;

187 
	mlöe_°yÀ
;

188 
	mˇp_°yÀ
;

190 
	mjoö_°yÀ
;

191 
	mfûl_°yÀ
;

193 
	mfûl_ruÀ
;

194 
	m¨c_mode
;

195 
Pixm≠
 
	mtûe
;

196 
Pixm≠
 
	m°ù∂e
;

197 
	mts_x_‹igö
;

198 
	mts_y_‹igö
;

199 
F⁄t
 
	mf⁄t
;

200 
	msubwödow_mode
;

201 
Boﬁ
 
	mgøphics_exposuªs
;

202 
	m˛ù_x_‹igö
;

203 
	m˛ù_y_‹igö
;

204 
Pixm≠
 
	m˛ù_mask
;

205 
	mdash_off£t
;

206 
	mdashes
;

207 } 
	tXGCVÆues
;

214 
	g_XGC


215 #ifde‡
	tXLIB_ILLEGAL_ACCESS


217 
XExtD©a
 *
	gext_d©a
;

218 
GC⁄ãxt
 
	ggid
;

222 *
	tGC
;

228 
XExtD©a
 *
	mext_d©a
;

229 
VisuÆID
 
	mvisuÆid
;

230 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

231 
	mc_˛ass
;

233 
	m˛ass
;

235 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

236 
	mbôs_≥r_rgb
;

237 
	mm≠_íåõs
;

238 } 
	tVisuÆ
;

244 
	mdïth
;

245 
	mnvisuÆs
;

246 
VisuÆ
 *
	mvisuÆs
;

247 } 
	tDïth
;

255 
	g_XDi•œy
;

258 
XExtD©a
 *
	mext_d©a
;

259 
_XDi•œy
 *
	mdi•œy
;

260 
Wödow
 
	mroŸ
;

261 
	mwidth
, 
	mheight
;

262 
	mmwidth
, 
	mmheight
;

263 
	mndïths
;

264 
Dïth
 *
	mdïths
;

265 
	mroŸ_dïth
;

266 
VisuÆ
 *
	mroŸ_visuÆ
;

267 
GC
 
	mdeÁu…_gc
;

268 
Cﬁ‹m≠
 
	mcm≠
;

269 
	mwhôe_pixñ
;

270 
	mbœck_pixñ
;

271 
	mmax_m≠s
, 
	mmö_m≠s
;

272 
	mbackög_°‹e
;

273 
Boﬁ
 
	mßve_undîs
;

274 
	mroŸ_öput_mask
;

275 } 
	tS¸ìn
;

281 
XExtD©a
 *
	mext_d©a
;

282 
	mdïth
;

283 
	mbôs_≥r_pixñ
;

284 
	msˇ∆öe_∑d
;

285 } 
	tS¸ìnF‹m©
;

291 
Pixm≠
 
	mbackground_pixm≠
;

292 
	mbackground_pixñ
;

293 
Pixm≠
 
	mb‹dî_pixm≠
;

294 
	mb‹dî_pixñ
;

295 
	mbô_gøvôy
;

296 
	mwö_gøvôy
;

297 
	mbackög_°‹e
;

298 
	mbackög_∂™es
;

299 
	mbackög_pixñ
;

300 
Boﬁ
 
	mßve_undî
;

301 
	mevít_mask
;

302 
	mdo_nŸ_¥›ag©e_mask
;

303 
Boﬁ
 
	movîride_ªdúe˘
;

304 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

305 
Curs‹
 
	mcurs‹
;

306 } 
	tXSëWödowAâribuãs
;

309 
	mx
, 
	my
;

310 
	mwidth
, 
	mheight
;

311 
	mb‹dî_width
;

312 
	mdïth
;

313 
VisuÆ
 *
	mvisuÆ
;

314 
Wödow
 
	mroŸ
;

315 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

316 
	mc_˛ass
;

318 
	m˛ass
;

320 
	mbô_gøvôy
;

321 
	mwö_gøvôy
;

322 
	mbackög_°‹e
;

323 
	mbackög_∂™es
;

324 
	mbackög_pixñ
;

325 
Boﬁ
 
	mßve_undî
;

326 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

327 
Boﬁ
 
	mm≠_ö°ÆÀd
;

328 
	mm≠_°©e
;

329 
	mÆl_evít_masks
;

330 
	myour_evít_mask
;

331 
	mdo_nŸ_¥›ag©e_mask
;

332 
Boﬁ
 
	movîride_ªdúe˘
;

333 
S¸ìn
 *
	ms¸ìn
;

334 } 
	tXWödowAâribuãs
;

342 
	mÁmûy
;

343 
	mÀngth
;

344 *
	maddªss
;

345 } 
	tXHo°Addªss
;

351 
	mty≥Àngth
;

352 
	mvÆuñígth
;

353 *
	mty≥
;

354 *
	mvÆue
;

355 } 
	tXSîvîI¡î¥ëedAddªss
;

360 
	s_XImage
 {

361 
	mwidth
, 
	mheight
;

362 
	mxoff£t
;

363 
	mf‹m©
;

364 *
	md©a
;

365 
	mbyã_‹dî
;

366 
	mbôm≠_unô
;

367 
	mbôm≠_bô_‹dî
;

368 
	mbôm≠_∑d
;

369 
	mdïth
;

370 
	mbyãs_≥r_löe
;

371 
	mbôs_≥r_pixñ
;

372 
	mªd_mask
;

373 
	mgªí_mask
;

374 
	mblue_mask
;

375 
XPoöãr
 
	mobd©a
;

376 
	sfuncs
 {

377 
	m_XImage
 *(*
	m¸óã_image
)(

378 
	m_XDi•œy
* ,

379 
	mVisuÆ
* ,

388 (*
	mde°roy_image
Ë(
	m_XImage
 *);

389 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

390 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

391 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

392 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

393 } 
	mf
;

394 } 
	tXImage
;

400 
	mx
, 
	my
;

401 
	mwidth
, 
	mheight
;

402 
	mb‹dî_width
;

403 
Wödow
 
	msiblög
;

404 
	m°ack_mode
;

405 } 
	tXWödowCh™ges
;

411 
	mpixñ
;

412 
	mªd
, 
	mgªí
, 
	mblue
;

413 
	mÊags
;

414 
	m∑d
;

415 } 
	tXCﬁ‹
;

423 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

424 } 
	tXSegmít
;

427 
	mx
, 
	my
;

428 } 
	tXPoöt
;

431 
	mx
, 
	my
;

432 
	mwidth
, 
	mheight
;

433 } 
	tXRe˘™gÀ
;

436 
	mx
, 
	my
;

437 
	mwidth
, 
	mheight
;

438 
	m™gÀ1
, 
	m™gÀ2
;

439 } 
	tXArc
;

445 
	mkey_˛ick_≥r˚¡
;

446 
	mbñl_≥r˚¡
;

447 
	mbñl_pôch
;

448 
	mbñl_duøti⁄
;

449 
	mÀd
;

450 
	mÀd_mode
;

451 
	mkey
;

452 
	mauto_ª≥©_mode
;

453 } 
	tXKeybﬂrdC⁄åﬁ
;

458 
	mkey_˛ick_≥r˚¡
;

459 
	mbñl_≥r˚¡
;

460 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

461 
	mÀd_mask
;

462 
	mglobÆ_auto_ª≥©
;

463 
	mauto_ª≥©s
[32];

464 } 
	tXKeybﬂrdSèã
;

469 
Time
 
	mtime
;

470 
	mx
, 
	my
;

471 } 
	tXTimeCo‹d
;

476 
	mmax_key≥rmod
;

477 
KeyCode
 *
	mmodifõrm≠
;

478 } 
	tXModifõrKeym≠
;

486 #i‚de‡
XLIB_ILLEGAL_ACCESS


487 
_XDi•œy
 
	tDi•œy
;

490 
	g_XPriv©e
;

491 
	g_XrmHashBuckëRec
;

494 #ifde‡
XLIB_ILLEGAL_ACCESS


495 
	t_XDi•œy


498 
XExtD©a
 *
	gext_d©a
;

499 
_XPriv©e
 *
	g¥iv©e1
;

500 
	gfd
;

501 
	g¥iv©e2
;

502 
	g¥Ÿo_maj‹_vîsi⁄
;

503 
	g¥Ÿo_mö‹_vîsi⁄
;

504 *
	gvíd‹
;

505 
XID
 
	g¥iv©e3
;

506 
XID
 
	g¥iv©e4
;

507 
XID
 
	g¥iv©e5
;

508 
	g¥iv©e6
;

509 
XID
 (*
ªsour˚_Æloc
)(

510 
	g_XDi•œy
*

512 
	gbyã_‹dî
;

513 
	gbôm≠_unô
;

514 
	gbôm≠_∑d
;

515 
	gbôm≠_bô_‹dî
;

516 
	gnf‹m©s
;

517 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

518 
	g¥iv©e8
;

519 
	gªÀa£
;

520 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

521 
	gqÀn
;

522 
	gœ°_ªque°_ªad
;

523 
	gªque°
;

524 
XPoöãr
 
	g¥iv©e11
;

525 
XPoöãr
 
	g¥iv©e12
;

526 
XPoöãr
 
	g¥iv©e13
;

527 
XPoöãr
 
	g¥iv©e14
;

528 
	gmax_ªque°_size
;

529 
_XrmHashBuckëRec
 *
	gdb
;

530 (*
	g¥iv©e15
)(

531 
	g_XDi•œy
*

533 *
	gdi•œy_«me
;

534 
	gdeÁu…_s¸ìn
;

535 
	gns¸ìns
;

536 
S¸ìn
 *
	gs¸ìns
;

537 
	gmŸi⁄_buf„r
;

538 
	g¥iv©e16
;

539 
	gmö_keycode
;

540 
	gmax_keycode
;

541 
XPoöãr
 
	g¥iv©e17
;

542 
XPoöãr
 
	g¥iv©e18
;

543 
	g¥iv©e19
;

544 *
	gxdeÁu…s
;

547 #ifde‡
	tXLIB_ILLEGAL_ACCESS


548 
	tDi•œy
,

550 *
	t_XPrivDi•œy
;

552 #unde‡
_XEVENT_


553 #i‚de‡
_XEVENT_


558 
	mty≥
;

559 
	m£rül
;

560 
Boﬁ
 
	m£nd_evít
;

561 
Di•œy
 *
	mdi•œy
;

562 
Wödow
 
	mwödow
;

563 
Wödow
 
	mroŸ
;

564 
Wödow
 
	msubwödow
;

565 
Time
 
	mtime
;

566 
	mx
, 
	my
;

567 
	mx_roŸ
, 
	my_roŸ
;

568 
	m°©e
;

569 
	mkeycode
;

570 
Boﬁ
 
	mßme_s¸ìn
;

571 } 
	tXKeyEvít
;

572 
XKeyEvít
 
	tXKeyPªs£dEvít
;

573 
XKeyEvít
 
	tXKeyRñó£dEvít
;

576 
	mty≥
;

577 
	m£rül
;

578 
Boﬁ
 
	m£nd_evít
;

579 
Di•œy
 *
	mdi•œy
;

580 
Wödow
 
	mwödow
;

581 
Wödow
 
	mroŸ
;

582 
Wödow
 
	msubwödow
;

583 
Time
 
	mtime
;

584 
	mx
, 
	my
;

585 
	mx_roŸ
, 
	my_roŸ
;

586 
	m°©e
;

587 
	mbuâ⁄
;

588 
Boﬁ
 
	mßme_s¸ìn
;

589 } 
	tXBuâ⁄Evít
;

590 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

591 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

594 
	mty≥
;

595 
	m£rül
;

596 
Boﬁ
 
	m£nd_evít
;

597 
Di•œy
 *
	mdi•œy
;

598 
Wödow
 
	mwödow
;

599 
Wödow
 
	mroŸ
;

600 
Wödow
 
	msubwödow
;

601 
Time
 
	mtime
;

602 
	mx
, 
	my
;

603 
	mx_roŸ
, 
	my_roŸ
;

604 
	m°©e
;

605 
	mis_höt
;

606 
Boﬁ
 
	mßme_s¸ìn
;

607 } 
	tXMŸi⁄Evít
;

608 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

611 
	mty≥
;

612 
	m£rül
;

613 
Boﬁ
 
	m£nd_evít
;

614 
Di•œy
 *
	mdi•œy
;

615 
Wödow
 
	mwödow
;

616 
Wödow
 
	mroŸ
;

617 
Wödow
 
	msubwödow
;

618 
Time
 
	mtime
;

619 
	mx
, 
	my
;

620 
	mx_roŸ
, 
	my_roŸ
;

621 
	mmode
;

622 
	mdëaû
;

627 
Boﬁ
 
	mßme_s¸ìn
;

628 
Boﬁ
 
	mfocus
;

629 
	m°©e
;

630 } 
	tXCrossögEvít
;

631 
XCrossögEvít
 
	tXE¡îWödowEvít
;

632 
XCrossögEvít
 
	tXLóveWödowEvít
;

635 
	mty≥
;

636 
	m£rül
;

637 
Boﬁ
 
	m£nd_evít
;

638 
Di•œy
 *
	mdi•œy
;

639 
Wödow
 
	mwödow
;

640 
	mmode
;

642 
	mdëaû
;

648 } 
	tXFocusCh™geEvít
;

649 
XFocusCh™geEvít
 
	tXFocusInEvít
;

650 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

654 
	mty≥
;

655 
	m£rül
;

656 
Boﬁ
 
	m£nd_evít
;

657 
Di•œy
 *
	mdi•œy
;

658 
Wödow
 
	mwödow
;

659 
	mkey_ve˘‹
[32];

660 } 
	tXKeym≠Evít
;

663 
	mty≥
;

664 
	m£rül
;

665 
Boﬁ
 
	m£nd_evít
;

666 
Di•œy
 *
	mdi•œy
;

667 
Wödow
 
	mwödow
;

668 
	mx
, 
	my
;

669 
	mwidth
, 
	mheight
;

670 
	mcou¡
;

671 } 
	tXExpo£Evít
;

674 
	mty≥
;

675 
	m£rül
;

676 
Boﬁ
 
	m£nd_evít
;

677 
Di•œy
 *
	mdi•œy
;

678 
DøwabÀ
 
	mdøwabÀ
;

679 
	mx
, 
	my
;

680 
	mwidth
, 
	mheight
;

681 
	mcou¡
;

682 
	mmaj‹_code
;

683 
	mmö‹_code
;

684 } 
	tXGøphicsExpo£Evít
;

687 
	mty≥
;

688 
	m£rül
;

689 
Boﬁ
 
	m£nd_evít
;

690 
Di•œy
 *
	mdi•œy
;

691 
DøwabÀ
 
	mdøwabÀ
;

692 
	mmaj‹_code
;

693 
	mmö‹_code
;

694 } 
	tXNoExpo£Evít
;

697 
	mty≥
;

698 
	m£rül
;

699 
Boﬁ
 
	m£nd_evít
;

700 
Di•œy
 *
	mdi•œy
;

701 
Wödow
 
	mwödow
;

702 
	m°©e
;

703 } 
	tXVisibûôyEvít
;

706 
	mty≥
;

707 
	m£rül
;

708 
Boﬁ
 
	m£nd_evít
;

709 
Di•œy
 *
	mdi•œy
;

710 
Wödow
 
	m∑ª¡
;

711 
Wödow
 
	mwödow
;

712 
	mx
, 
	my
;

713 
	mwidth
, 
	mheight
;

714 
	mb‹dî_width
;

715 
Boﬁ
 
	movîride_ªdúe˘
;

716 } 
	tXCª©eWödowEvít
;

719 
	mty≥
;

720 
	m£rül
;

721 
Boﬁ
 
	m£nd_evít
;

722 
Di•œy
 *
	mdi•œy
;

723 
Wödow
 
	mevít
;

724 
Wödow
 
	mwödow
;

725 } 
	tXDe°royWödowEvít
;

728 
	mty≥
;

729 
	m£rül
;

730 
Boﬁ
 
	m£nd_evít
;

731 
Di•œy
 *
	mdi•œy
;

732 
Wödow
 
	mevít
;

733 
Wödow
 
	mwödow
;

734 
Boﬁ
 
	m‰om_c⁄figuª
;

735 } 
	tXUnm≠Evít
;

738 
	mty≥
;

739 
	m£rül
;

740 
Boﬁ
 
	m£nd_evít
;

741 
Di•œy
 *
	mdi•œy
;

742 
Wödow
 
	mevít
;

743 
Wödow
 
	mwödow
;

744 
Boﬁ
 
	movîride_ªdúe˘
;

745 } 
	tXM≠Evít
;

748 
	mty≥
;

749 
	m£rül
;

750 
Boﬁ
 
	m£nd_evít
;

751 
Di•œy
 *
	mdi•œy
;

752 
Wödow
 
	m∑ª¡
;

753 
Wödow
 
	mwödow
;

754 } 
	tXM≠Reque°Evít
;

757 
	mty≥
;

758 
	m£rül
;

759 
Boﬁ
 
	m£nd_evít
;

760 
Di•œy
 *
	mdi•œy
;

761 
Wödow
 
	mevít
;

762 
Wödow
 
	mwödow
;

763 
Wödow
 
	m∑ª¡
;

764 
	mx
, 
	my
;

765 
Boﬁ
 
	movîride_ªdúe˘
;

766 } 
	tXRï¨ítEvít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
	mx
, 
	my
;

776 
	mwidth
, 
	mheight
;

777 
	mb‹dî_width
;

778 
Wödow
 
	mabove
;

779 
Boﬁ
 
	movîride_ªdúe˘
;

780 } 
	tXC⁄figuªEvít
;

783 
	mty≥
;

784 
	m£rül
;

785 
Boﬁ
 
	m£nd_evít
;

786 
Di•œy
 *
	mdi•œy
;

787 
Wödow
 
	mevít
;

788 
Wödow
 
	mwödow
;

789 
	mx
, 
	my
;

790 } 
	tXGøvôyEvít
;

793 
	mty≥
;

794 
	m£rül
;

795 
Boﬁ
 
	m£nd_evít
;

796 
Di•œy
 *
	mdi•œy
;

797 
Wödow
 
	mwödow
;

798 
	mwidth
, 
	mheight
;

799 } 
	tXResizeReque°Evít
;

802 
	mty≥
;

803 
	m£rül
;

804 
Boﬁ
 
	m£nd_evít
;

805 
Di•œy
 *
	mdi•œy
;

806 
Wödow
 
	m∑ª¡
;

807 
Wödow
 
	mwödow
;

808 
	mx
, 
	my
;

809 
	mwidth
, 
	mheight
;

810 
	mb‹dî_width
;

811 
Wödow
 
	mabove
;

812 
	mdëaû
;

813 
	mvÆue_mask
;

814 } 
	tXC⁄figuªReque°Evít
;

817 
	mty≥
;

818 
	m£rül
;

819 
Boﬁ
 
	m£nd_evít
;

820 
Di•œy
 *
	mdi•œy
;

821 
Wödow
 
	mevít
;

822 
Wödow
 
	mwödow
;

823 
	m∂a˚
;

824 } 
	tXCúcuœãEvít
;

827 
	mty≥
;

828 
	m£rül
;

829 
Boﬁ
 
	m£nd_evít
;

830 
Di•œy
 *
	mdi•œy
;

831 
Wödow
 
	m∑ª¡
;

832 
Wödow
 
	mwödow
;

833 
	m∂a˚
;

834 } 
	tXCúcuœãReque°Evít
;

837 
	mty≥
;

838 
	m£rül
;

839 
Boﬁ
 
	m£nd_evít
;

840 
Di•œy
 *
	mdi•œy
;

841 
Wödow
 
	mwödow
;

842 
Atom
 
	m©om
;

843 
Time
 
	mtime
;

844 
	m°©e
;

845 } 
	tXPr›îtyEvít
;

848 
	mty≥
;

849 
	m£rül
;

850 
Boﬁ
 
	m£nd_evít
;

851 
Di•œy
 *
	mdi•œy
;

852 
Wödow
 
	mwödow
;

853 
Atom
 
	m£À˘i⁄
;

854 
Time
 
	mtime
;

855 } 
	tXSñe˘i⁄CÀ¨Evít
;

858 
	mty≥
;

859 
	m£rül
;

860 
Boﬁ
 
	m£nd_evít
;

861 
Di•œy
 *
	mdi•œy
;

862 
Wödow
 
	mow√r
;

863 
Wödow
 
	mªque°‹
;

864 
Atom
 
	m£À˘i⁄
;

865 
Atom
 
	mèrgë
;

866 
Atom
 
	m¥›îty
;

867 
Time
 
	mtime
;

868 } 
	tXSñe˘i⁄Reque°Evít
;

871 
	mty≥
;

872 
	m£rül
;

873 
Boﬁ
 
	m£nd_evít
;

874 
Di•œy
 *
	mdi•œy
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mwödow
;

888 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

889 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

890 
Boﬁ
 
	mc_√w
;

892 
Boﬁ
 
	m√w
;

894 
	m°©e
;

895 } 
	tXCﬁ‹m≠Evít
;

898 
	mty≥
;

899 
	m£rül
;

900 
Boﬁ
 
	m£nd_evít
;

901 
Di•œy
 *
	mdi•œy
;

902 
Wödow
 
	mwödow
;

903 
Atom
 
	mmesßge_ty≥
;

904 
	mf‹m©
;

906 
	mb
[20];

907 
	ms
[10];

908 
	ml
[5];

909 } 
	md©a
;

910 } 
	tXClõ¡MesßgeEvít
;

913 
	mty≥
;

914 
	m£rül
;

915 
Boﬁ
 
	m£nd_evít
;

916 
Di•œy
 *
	mdi•œy
;

917 
Wödow
 
	mwödow
;

918 
	mªque°
;

920 
	mfú°_keycode
;

921 
	mcou¡
;

922 } 
	tXM≠pögEvít
;

925 
	mty≥
;

926 
Di•œy
 *
	mdi•œy
;

927 
XID
 
	mªsour˚id
;

928 
	m£rül
;

929 
	mîr‹_code
;

930 
	mªque°_code
;

931 
	mmö‹_code
;

932 } 
	tXEº‹Evít
;

935 
	mty≥
;

936 
	m£rül
;

937 
Boﬁ
 
	m£nd_evít
;

938 
Di•œy
 *
	mdi•œy
;

939 
Wödow
 
	mwödow
;

940 } 
	tXAnyEvít
;

950 
	mty≥
;

951 
	m£rül
;

952 
Boﬁ
 
	m£nd_evít
;

953 
Di•œy
 *
	mdi•œy
;

954 
	mexãnsi⁄
;

955 
	mevty≥
;

956 } 
	tXGíîicEvít
;

959 
	mty≥
;

960 
	m£rül
;

961 
Boﬁ
 
	m£nd_evít
;

962 
Di•œy
 *
	mdi•œy
;

963 
	mexãnsi⁄
;

964 
	mevty≥
;

965 
	mcookõ
;

966 *
	md©a
;

967 } 
	tXGíîicEvítCookõ
;

973 
	u_XEvít
 {

974 
	mty≥
;

975 
XAnyEvít
 
	mx™y
;

976 
XKeyEvít
 
	mxkey
;

977 
XBuâ⁄Evít
 
	mxbuâ⁄
;

978 
XMŸi⁄Evít
 
	mxmŸi⁄
;

979 
XCrossögEvít
 
	mx¸ossög
;

980 
XFocusCh™geEvít
 
	mxfocus
;

981 
XExpo£Evít
 
	mxexpo£
;

982 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

983 
XNoExpo£Evít
 
	mxn€xpo£
;

984 
XVisibûôyEvít
 
	mxvisibûôy
;

985 
XCª©eWödowEvít
 
	mx¸óãwödow
;

986 
XDe°royWödowEvít
 
	mxde°roywödow
;

987 
XUnm≠Evít
 
	mxunm≠
;

988 
XM≠Evít
 
	mxm≠
;

989 
XM≠Reque°Evít
 
	mxm≠ªque°
;

990 
XRï¨ítEvít
 
	mxª∑ª¡
;

991 
XC⁄figuªEvít
 
	mxc⁄figuª
;

992 
XGøvôyEvít
 
	mxgøvôy
;

993 
XResizeReque°Evít
 
	mxªsizîeque°
;

994 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

995 
XCúcuœãEvít
 
	mxcúcuœã
;

996 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

997 
XPr›îtyEvít
 
	mx¥›îty
;

998 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

999 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1000 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1001 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1002 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1003 
XM≠pögEvít
 
	mxm≠pög
;

1004 
XEº‹Evít
 
	mxîr‹
;

1005 
XKeym≠Evít
 
	mxkeym≠
;

1006 
XGíîicEvít
 
	mxgíîic
;

1007 
XGíîicEvítCookõ
 
	mxcookõ
;

1008 
	m∑d
[24];

1009 } 
	tXEvít
;

1012 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

1018 
	mlbórög
;

1019 
	mrbórög
;

1020 
	mwidth
;

1021 
	mas˚¡
;

1022 
	mdes˚¡
;

1023 
	m©åibuãs
;

1024 } 
	tXCh¨Såu˘
;

1031 
Atom
 
	m«me
;

1032 
	mˇrd32
;

1033 } 
	tXF⁄tPr›
;

1036 
XExtD©a
 *
	mext_d©a
;

1037 
F⁄t
 
	mfid
;

1038 
	mdúe˘i⁄
;

1039 
	mmö_ch¨_‹_byã2
;

1040 
	mmax_ch¨_‹_byã2
;

1041 
	mmö_byã1
;

1042 
	mmax_byã1
;

1043 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1044 
	mdeÁu…_ch¨
;

1045 
	mn_¥›îtõs
;

1046 
XF⁄tPr›
 *
	m¥›îtõs
;

1047 
XCh¨Såu˘
 
	mmö_bounds
;

1048 
XCh¨Såu˘
 
	mmax_bounds
;

1049 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1050 
	mas˚¡
;

1051 
	mdes˚¡
;

1052 } 
	tXF⁄tSåu˘
;

1058 *
	mch¨s
;

1059 
	mnch¨s
;

1060 
	mdñè
;

1061 
F⁄t
 
	mf⁄t
;

1062 } 
	tXTextIãm
;

1065 
	mbyã1
;

1066 
	mbyã2
;

1067 } 
	tXCh¨2b
;

1070 
XCh¨2b
 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm16
;

1077 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1078 
GC
 
	mgc
;

1079 
VisuÆ
 *
	mvisuÆ
;

1080 
S¸ìn
 *
	ms¸ìn
;

1081 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1082 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1085 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1086 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1087 } 
	tXF⁄tSëExã¡s
;

1093 
_XOM
 *
	tXOM
;

1094 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1097 *
	mch¨s
;

1098 
	mnch¨s
;

1099 
	mdñè
;

1100 
XF⁄tSë
 
	mf⁄t_£t
;

1101 } 
	tXmbTextIãm
;

1104 
wch¨_t
 *
	mch¨s
;

1105 
	mnch¨s
;

1106 
	mdñè
;

1107 
XF⁄tSë
 
	mf⁄t_£t
;

1108 } 
	tXwcTextIãm
;

1110 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1111 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1112 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1113 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1114 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1115 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1116 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1117 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1118 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1119 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1122 
	mch¨£t_cou¡
;

1123 **
	mch¨£t_li°
;

1124 } 
	tXOMCh¨SëLi°
;

1127 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1128 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1129 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1130 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1131 
	mXOMOrõ¡©i⁄_C⁄ãxt


1132 } 
	tXOrõ¡©i⁄
;

1135 
	mnum_‹õ¡©i⁄
;

1136 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1137 } 
	tXOMOrõ¡©i⁄
;

1140 
	mnum_f⁄t
;

1141 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1142 **
	mf⁄t_«me_li°
;

1143 } 
	tXOMF⁄tInfo
;

1145 
_XIM
 *
	tXIM
;

1146 
_XIC
 *
	tXIC
;

1148 (*
	tXIMProc
)(

1149 
	tXIM
,

1150 
	tXPoöãr
,

1151 
	tXPoöãr


1154 
	$Boﬁ
 (*
	tXICProc
)(

1155 
	tXIC
,

1156 
	tXPoöãr
,

1157 
	tXPoöãr


1160 (*
	tXIDProc
)(

1161 
	tDi•œy
*,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	tXIMStyÀ
;

1169 
cou¡_°yÀs
;

1170 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1171 } 
	tXIMStyÀs
;

1173 
	#XIMPªedôAªa
 0x0001L

	)

1174 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1175 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1176 
	#XIMPªedôNŸhög
 0x0008L

	)

1177 
	#XIMPªedôN⁄e
 0x0010L

	)

1178 
	#XIMSètusAªa
 0x0100L

	)

1179 
	#XIMSètusCÆlbacks
 0x0200L

	)

1180 
	#XIMSètusNŸhög
 0x0400L

	)

1181 
	#XIMSètusN⁄e
 0x0800L

	)

1183 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1184 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1185 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1186 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1187 
	#XNFocusWödow
 "focusWödow"

	)

1188 
	#XNResour˚Name
 "ªsour˚Name"

	)

1189 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1190 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1191 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1192 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1193 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1194 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1195 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1196 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1197 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1198 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1199 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1200 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1201 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1202 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1203 
	#XNAªa
 "¨ó"

	)

1204 
	#XNAªaNìded
 "¨óNìded"

	)

1205 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1206 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1207 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1208 
	#XNF‹eground
 "f‹eground"

	)

1209 
	#XNBackground
 "background"

	)

1210 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1211 
	#XNF⁄tSë
 "f⁄tSë"

	)

1212 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1213 
	#XNCurs‹
 "curs‹"

	)

1215 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1216 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1217 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1218 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1219 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1220 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1221 
	#XNRe£tSèã
 "ª£tSèã"

	)

1222 
	#XNHŸKey
 "hŸKey"

	)

1223 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1224 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1225 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1227 
	#XBuf„rOvîÊow
 -1

	)

1228 
	#XLookupN⁄e
 1

	)

1229 
	#XLookupCh¨s
 2

	)

1230 
	#XLookupKeySym
 3

	)

1231 
	#XLookupBŸh
 4

	)

1233 *
	tXVaNe°edLi°
;

1236 
XPoöãr
 
˛õ¡_d©a
;

1237 
XIMProc
 
ˇŒback
;

1238 } 
	tXIMCÆlback
;

1241 
XPoöãr
 
˛õ¡_d©a
;

1242 
XICProc
 
ˇŒback
;

1243 } 
	tXICCÆlback
;

1245 
	tXIMFìdback
;

1247 
	#XIMRevî£
 1L

	)

1248 
	#XIMUndîlöe
 (1L<<1)

	)

1249 
	#XIMHighlight
 (1L<<2)

	)

1250 
	#XIMPrim¨y
 (1L<<5)

	)

1251 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1252 
	#XIMTîtüry
 (1L<<7)

	)

1253 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1254 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1255 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1257 
	s_XIMText
 {

1258 
Àngth
;

1259 
XIMFìdback
 *
„edback
;

1260 
Boﬁ
 
ícodög_is_wch¨
;

1262 *
mu…i_byã
;

1263 
wch¨_t
 *
wide_ch¨
;

1264 } 
°rög
;

1265 } 
	tXIMText
;

1267 
	tXIMPªedôSèã
;

1269 
	#XIMPªedôUnKnown
 0L

	)

1270 
	#XIMPªedôE«bÀ
 1L

	)

1271 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1273 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1274 
XIMPªedôSèã
 
°©e
;

1275 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1277 
	tXIMRe£tSèã
;

1279 
	#XIMInôülSèã
 1L

	)

1280 
	#XIMPª£rveSèã
 (1L<<1)

	)

1282 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1284 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1285 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1286 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1287 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1288 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1289 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1291 
	s_XIMSåögC⁄vîsi⁄Text
 {

1292 
Àngth
;

1293 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1294 
Boﬁ
 
ícodög_is_wch¨
;

1296 *
mbs
;

1297 
wch¨_t
 *
wcs
;

1298 } 
°rög
;

1299 } 
	tXIMSåögC⁄vîsi⁄Text
;

1301 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1303 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1305 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1306 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1307 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1308 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1310 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1312 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1313 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1316 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1317 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1318 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1319 
XIMNextLöe
, 
XIMPªviousLöe
,

1320 
XIMLöeSèπ
, 
XIMLöeEnd
,

1321 
XIMAbsﬁuãPosôi⁄
,

1322 
XIMD⁄tCh™ge


1323 } 
	tXIMC¨ëDúe˘i⁄
;

1325 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1326 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1327 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1328 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1329 
Á˘‹
;

1330 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1331 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1333 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1334 
ˇªt
;

1335 
chg_fú°
;

1336 
chg_Àngth
;

1337 
XIMText
 *
ãxt
;

1338 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1341 
XIMIsInvisibÀ
,

1342 
XIMIsPrim¨y
,

1343 
XIMIsSec⁄d¨y


1344 } 
	tXIMC¨ëStyÀ
;

1346 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1347 
posôi⁄
;

1348 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1349 
XIMC¨ëStyÀ
 
°yÀ
;

1350 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1353 
XIMTextTy≥
,

1354 
XIMBôm≠Ty≥


1355 } 
	tXIMSètusD©aTy≥
;

1357 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1358 
XIMSètusD©aTy≥
 
ty≥
;

1360 
XIMText
 *
ãxt
;

1361 
Pixm≠
 
bôm≠
;

1362 } 
d©a
;

1363 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1365 
	s_XIMHŸKeyTriggî
 {

1366 
KeySym
 
keysym
;

1367 
modifõr
;

1368 
modifõr_mask
;

1369 } 
	tXIMHŸKeyTriggî
;

1371 
	s_XIMHŸKeyTriggîs
 {

1372 
num_hŸ_key
;

1373 
XIMHŸKeyTriggî
 *
key
;

1374 } 
	tXIMHŸKeyTriggîs
;

1376 
	tXIMHŸKeySèã
;

1378 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1379 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1382 
cou¡_vÆues
;

1383 **
suµ‹ãd_vÆues
;

1384 } 
	tXIMVÆuesLi°
;

1386 
_XFUNCPROTOBEGIN


1388 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1389 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1392 
_Xdebug
;

1394 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1395 
Di•œy
* ,

1396 
_Xc⁄°
 *

1399 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1400 
Di•œy
* ,

1401 
XID


1405 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1406 
Di•œy
* ,

1407 
Wödow
 ,

1408 
Time
 ,

1409 
Time
 ,

1413 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1414 
XModifõrKeym≠
* ,

1415 #i‡
NìdWidePrŸŸy≥s


1418 
KeyCode
 ,

1423 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1424 
Di•œy
*

1427 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1428 
XModifõrKeym≠
* ,

1429 #i‡
NìdWidePrŸŸy≥s


1432 
KeyCode
 ,

1437 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1441 
XImage
 *
	`XCª©eImage
(

1442 
Di•œy
* ,

1443 
VisuÆ
* ,

1453 
Sètus
 
	`XInôImage
(

1454 
XImage
*

1456 
XImage
 *
	`XGëImage
(

1457 
Di•œy
* ,

1458 
DøwabÀ
 ,

1466 
XImage
 *
	`XGëSubImage
(

1467 
Di•œy
* ,

1468 
DøwabÀ
 ,

1475 
XImage
* ,

1483 
Di•œy
 *
	`XO≥nDi•œy
(

1484 
_Xc⁄°
 *

1487 
	`XrmInôülize
(

1491 *
	`XFëchByãs
(

1492 
Di•œy
* ,

1495 *
	`XFëchBuf„r
(

1496 
Di•œy
* ,

1500 *
	`XGëAtomName
(

1501 
Di•œy
* ,

1502 
Atom


1504 
Sètus
 
	`XGëAtomNames
(

1505 
Di•œy
* ,

1506 
Atom
* ,

1510 *
	`XGëDeÁu…
(

1511 
Di•œy
* ,

1512 
_Xc⁄°
 * ,

1513 
_Xc⁄°
 *

1515 *
	`XDi•œyName
(

1516 
_Xc⁄°
 *

1518 *
	`XKeysymToSåög
(

1519 
KeySym


1522 (*
	$XSynchr⁄ize
(

1523 
Di•œy
* ,

1524 
Boﬁ


1526 
Di•œy
*

1528 (*
	`XSëA·îFun˘i⁄
(

1529 
Di•œy
* ,

1531 
Di•œy
*

1534 
Di•œy
*

1536 
Atom
 
	`XI¡înAtom
(

1537 
Di•œy
* ,

1538 
_Xc⁄°
 * ,

1539 
Boﬁ


1541 
Sètus
 
	`XI¡înAtoms
(

1542 
Di•œy
* ,

1545 
Boﬁ
 ,

1546 
Atom
*

1548 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1549 
Di•œy
* ,

1550 
Cﬁ‹m≠


1552 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1553 
Di•œy
* ,

1554 
Wödow
 ,

1555 
VisuÆ
* ,

1558 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1559 
Di•œy
* ,

1560 
Pixm≠
 ,

1561 
Pixm≠
 ,

1562 
XCﬁ‹
* ,

1563 
XCﬁ‹
* ,

1567 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1568 
Di•œy
* ,

1569 
F⁄t
 ,

1570 
F⁄t
 ,

1573 
XCﬁ‹
 
_Xc⁄°
 * ,

1574 
XCﬁ‹
 
_Xc⁄°
 *

1576 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1577 
Di•œy
* ,

1580 
F⁄t
 
	`XLﬂdF⁄t
(

1581 
Di•œy
* ,

1582 
_Xc⁄°
 *

1584 
GC
 
	`XCª©eGC
(

1585 
Di•œy
* ,

1586 
DøwabÀ
 ,

1588 
XGCVÆues
*

1590 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1591 
GC


1593 
	`XFlushGC
(

1594 
Di•œy
* ,

1595 
GC


1597 
Pixm≠
 
	`XCª©ePixm≠
(

1598 
Di•œy
* ,

1599 
DøwabÀ
 ,

1604 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1605 
Di•œy
* ,

1606 
DøwabÀ
 ,

1607 
_Xc⁄°
 * ,

1611 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1612 
Di•œy
* ,

1613 
DøwabÀ
 ,

1621 
Wödow
 
	`XCª©eSim∂eWödow
(

1622 
Di•œy
* ,

1623 
Wödow
 ,

1632 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1633 
Di•œy
* ,

1634 
Atom


1636 
Wödow
 
	`XCª©eWödow
(

1637 
Di•œy
* ,

1638 
Wödow
 ,

1646 
VisuÆ
* ,

1648 
XSëWödowAâribuãs
*

1650 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1651 
Di•œy
* ,

1652 
Wödow
 ,

1655 **
	`XLi°F⁄ts
(

1656 
Di•œy
* ,

1657 
_Xc⁄°
 * ,

1661 **
	`XLi°F⁄tsWôhInfo
(

1662 
Di•œy
* ,

1663 
_Xc⁄°
 * ,

1666 
XF⁄tSåu˘
**

1668 **
	`XGëF⁄tP©h
(

1669 
Di•œy
* ,

1672 **
	`XLi°Exãnsi⁄s
(

1673 
Di•œy
* ,

1676 
Atom
 *
	`XLi°Pr›îtõs
(

1677 
Di•œy
* ,

1678 
Wödow
 ,

1681 
XHo°Addªss
 *
	`XLi°Ho°s
(

1682 
Di•œy
* ,

1684 
Boﬁ
*

1686 
_X_DEPRECATED


1687 
KeySym
 
	`XKeycodeToKeysym
(

1688 
Di•œy
* ,

1689 #i‡
NìdWidePrŸŸy≥s


1692 
KeyCode
 ,

1696 
KeySym
 
	`XLookupKeysym
(

1697 
XKeyEvít
* ,

1700 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1701 
Di•œy
* ,

1702 #i‡
NìdWidePrŸŸy≥s


1705 
KeyCode
 ,

1710 
KeySym
 
	`XSåögToKeysym
(

1711 
_Xc⁄°
 *

1713 
	`XMaxReque°Size
(

1714 
Di•œy
*

1716 
	`XExãndedMaxReque°Size
(

1717 
Di•œy
*

1719 *
	`XResour˚M™agîSåög
(

1720 
Di•œy
*

1722 *
	`XS¸ìnResour˚Såög
(

1723 
S¸ìn
*

1725 
	`XDi•œyMŸi⁄Buf„rSize
(

1726 
Di•œy
*

1728 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1729 
VisuÆ
*

1734 
Sètus
 
	`XInôThªads
(

1738 
	`XLockDi•œy
(

1739 
Di•œy
*

1742 
	`XU∆ockDi•œy
(

1743 
Di•œy
*

1748 
XExtCodes
 *
	`XInôExãnsi⁄
(

1749 
Di•œy
* ,

1750 
_Xc⁄°
 *

1753 
XExtCodes
 *
	`XAddExãnsi⁄
(

1754 
Di•œy
*

1756 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1757 
XExtD©a
** ,

1760 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1761 
XED©aObje˘


1765 
Wödow
 
	`XRoŸWödow
(

1766 
Di•œy
* ,

1769 
Wödow
 
	`XDeÁu…RoŸWödow
(

1770 
Di•œy
*

1772 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1773 
S¸ìn
*

1775 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1776 
Di•œy
* ,

1779 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1780 
S¸ìn
*

1782 
GC
 
	`XDeÁu…GC
(

1783 
Di•œy
* ,

1786 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1787 
S¸ìn
*

1789 
	`XBœckPixñ
(

1790 
Di•œy
* ,

1793 
	`XWhôePixñ
(

1794 
Di•œy
* ,

1797 
	`XAŒPœ√s
(

1800 
	`XBœckPixñOfS¸ìn
(

1801 
S¸ìn
*

1803 
	`XWhôePixñOfS¸ìn
(

1804 
S¸ìn
*

1806 
	`XNextReque°
(

1807 
Di•œy
*

1809 
	`XLa°KnownReque°Pro˚s£d
(

1810 
Di•œy
*

1812 *
	`XSîvîVíd‹
(

1813 
Di•œy
*

1815 *
	`XDi•œySåög
(

1816 
Di•œy
*

1818 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1819 
Di•œy
* ,

1822 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1823 
S¸ìn
*

1825 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1826 
S¸ìn
*

1828 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1829 
Di•œy
* ,

1832 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1833 
Di•œy
*

1835 
	`XEvítMaskOfS¸ìn
(

1836 
S¸ìn
*

1839 
	`XS¸ìnNumbîOfS¸ìn
(

1840 
S¸ìn
*

1843 (*
	tXEº‹H™dÀr
) (

1844 
	tDi•œy
* ,

1845 
	tXEº‹Evít
*

1848 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1849 
XEº‹H™dÀr


1853 (*
	tXIOEº‹H™dÀr
) (

1854 
	tDi•œy
*

1857 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1858 
XIOEº‹H™dÀr


1862 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1863 
Di•œy
* ,

1866 *
	`XLi°Dïths
(

1867 
Di•œy
* ,

1874 
Sètus
 
	`XRec⁄figuªWMWödow
(

1875 
Di•œy
* ,

1876 
Wödow
 ,

1879 
XWödowCh™ges
*

1882 
Sètus
 
	`XGëWMPrŸocﬁs
(

1883 
Di•œy
* ,

1884 
Wödow
 ,

1885 
Atom
** ,

1888 
Sètus
 
	`XSëWMPrŸocﬁs
(

1889 
Di•œy
* ,

1890 
Wödow
 ,

1891 
Atom
* ,

1894 
Sètus
 
	`XIc⁄ifyWödow
(

1895 
Di•œy
* ,

1896 
Wödow
 ,

1899 
Sètus
 
	`XWôhdøwWödow
(

1900 
Di•œy
* ,

1901 
Wödow
 ,

1904 
Sètus
 
	`XGëComm™d
(

1905 
Di•œy
* ,

1906 
Wödow
 ,

1910 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1911 
Di•œy
* ,

1912 
Wödow
 ,

1913 
Wödow
** ,

1916 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1917 
Di•œy
* ,

1918 
Wödow
 ,

1919 
Wödow
* ,

1922 
	`XFªeSåögLi°
(

1925 
	`XSëTønsõ¡F‹Höt
(

1926 
Di•œy
* ,

1927 
Wödow
 ,

1928 
Wödow


1933 
	`XA˘iv©eS¸ìnSavî
(

1934 
Di•œy
*

1937 
	`XAddHo°
(

1938 
Di•œy
* ,

1939 
XHo°Addªss
*

1942 
	`XAddHo°s
(

1943 
Di•œy
* ,

1944 
XHo°Addªss
* ,

1948 
	`XAddToExãnsi⁄Li°
(

1949 
_XExtD©a
** ,

1950 
XExtD©a
*

1953 
	`XAddToSaveSë
(

1954 
Di•œy
* ,

1955 
Wödow


1958 
Sètus
 
	`XAŒocCﬁ‹
(

1959 
Di•œy
* ,

1960 
Cﬁ‹m≠
 ,

1961 
XCﬁ‹
*

1964 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1965 
Di•œy
* ,

1966 
Cﬁ‹m≠
 ,

1967 
Boﬁ
 ,

1974 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1975 
Di•œy
* ,

1976 
Cﬁ‹m≠
 ,

1977 
Boﬁ
 ,

1988 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1989 
Di•œy
* ,

1990 
Cﬁ‹m≠
 ,

1991 
_Xc⁄°
 * ,

1992 
XCﬁ‹
* ,

1993 
XCﬁ‹
*

1996 
	`XAŒowEvíts
(

1997 
Di•œy
* ,

1999 
Time


2002 
	`XAutoRïótOff
(

2003 
Di•œy
*

2006 
	`XAutoRïótOn
(

2007 
Di•œy
*

2010 
	`XBñl
(

2011 
Di•œy
* ,

2015 
	`XBôm≠BôOrdî
(

2016 
Di•œy
*

2019 
	`XBôm≠Pad
(

2020 
Di•œy
*

2023 
	`XBôm≠Unô
(

2024 
Di•œy
*

2027 
	`XCñlsOfS¸ìn
(

2028 
S¸ìn
*

2031 
	`XCh™geA˘ivePoöãrGøb
(

2032 
Di•œy
* ,

2034 
Curs‹
 ,

2035 
Time


2038 
	`XCh™geGC
(

2039 
Di•œy
* ,

2040 
GC
 ,

2042 
XGCVÆues
*

2045 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2046 
Di•œy
* ,

2048 
XKeybﬂrdC⁄åﬁ
*

2051 
	`XCh™geKeybﬂrdM≠pög
(

2052 
Di•œy
* ,

2055 
KeySym
* ,

2059 
	`XCh™gePoöãrC⁄åﬁ
(

2060 
Di•œy
* ,

2061 
Boﬁ
 ,

2062 
Boﬁ
 ,

2068 
	`XCh™gePr›îty
(

2069 
Di•œy
* ,

2070 
Wödow
 ,

2071 
Atom
 ,

2072 
Atom
 ,

2075 
_Xc⁄°
 * ,

2079 
	`XCh™geSaveSë
(

2080 
Di•œy
* ,

2081 
Wödow
 ,

2085 
	`XCh™geWödowAâribuãs
(

2086 
Di•œy
* ,

2087 
Wödow
 ,

2089 
XSëWödowAâribuãs
*

2092 
Boﬁ
 
	`XCheckIfEvít
(

2093 
Di•œy
* ,

2094 
XEvít
* ,

2095 
	$Boﬁ
 (*) (

2096 
Di•œy
* ,

2097 
XEvít
* ,

2098 
XPoöãr


2100 
XPoöãr


2103 
Boﬁ
 
	`XCheckMaskEvít
(

2104 
Di•œy
* ,

2106 
XEvít
*

2109 
Boﬁ
 
	`XCheckTy≥dEvít
(

2110 
Di•œy
* ,

2112 
XEvít
*

2115 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2116 
Di•œy
* ,

2117 
Wödow
 ,

2119 
XEvít
*

2122 
Boﬁ
 
	`XCheckWödowEvít
(

2123 
Di•œy
* ,

2124 
Wödow
 ,

2126 
XEvít
*

2129 
	`XCúcuœãSubwödows
(

2130 
Di•œy
* ,

2131 
Wödow
 ,

2135 
	`XCúcuœãSubwödowsDown
(

2136 
Di•œy
* ,

2137 
Wödow


2140 
	`XCúcuœãSubwödowsUp
(

2141 
Di•œy
* ,

2142 
Wödow


2145 
	`XCÀ¨Aªa
(

2146 
Di•œy
* ,

2147 
Wödow
 ,

2152 
Boﬁ


2155 
	`XCÀ¨Wödow
(

2156 
Di•œy
* ,

2157 
Wödow


2160 
	`XClo£Di•œy
(

2161 
Di•œy
*

2164 
	`XC⁄figuªWödow
(

2165 
Di•œy
* ,

2166 
Wödow
 ,

2168 
XWödowCh™ges
*

2171 
	`XC⁄√˘i⁄Numbî
(

2172 
Di•œy
*

2175 
	`XC⁄vîtSñe˘i⁄
(

2176 
Di•œy
* ,

2177 
Atom
 ,

2178 
Atom
 ,

2179 
Atom
 ,

2180 
Wödow
 ,

2181 
Time


2184 
	`XC›yAªa
(

2185 
Di•œy
* ,

2186 
DøwabÀ
 ,

2187 
DøwabÀ
 ,

2188 
GC
 ,

2197 
	`XC›yGC
(

2198 
Di•œy
* ,

2199 
GC
 ,

2201 
GC


2204 
	`XC›yPœ√
(

2205 
Di•œy
* ,

2206 
DøwabÀ
 ,

2207 
DøwabÀ
 ,

2208 
GC
 ,

2218 
	`XDeÁu…Dïth
(

2219 
Di•œy
* ,

2223 
	`XDeÁu…DïthOfS¸ìn
(

2224 
S¸ìn
*

2227 
	`XDeÁu…S¸ìn
(

2228 
Di•œy
*

2231 
	`XDeföeCurs‹
(

2232 
Di•œy
* ,

2233 
Wödow
 ,

2234 
Curs‹


2237 
	`XDñëePr›îty
(

2238 
Di•œy
* ,

2239 
Wödow
 ,

2240 
Atom


2243 
	`XDe°royWödow
(

2244 
Di•œy
* ,

2245 
Wödow


2248 
	`XDe°roySubwödows
(

2249 
Di•œy
* ,

2250 
Wödow


2253 
	`XD€sBackögSt‹e
(

2254 
S¸ìn
*

2257 
Boﬁ
 
	`XD€sSaveUndîs
(

2258 
S¸ìn
*

2261 
	`XDißbÀAc˚ssC⁄åﬁ
(

2262 
Di•œy
*

2266 
	`XDi•œyCñls
(

2267 
Di•œy
* ,

2271 
	`XDi•œyHeight
(

2272 
Di•œy
* ,

2276 
	`XDi•œyHeightMM
(

2277 
Di•œy
* ,

2281 
	`XDi•œyKeycodes
(

2282 
Di•œy
* ,

2287 
	`XDi•œyPœ√s
(

2288 
Di•œy
* ,

2292 
	`XDi•œyWidth
(

2293 
Di•œy
* ,

2297 
	`XDi•œyWidthMM
(

2298 
Di•œy
* ,

2302 
	`XDøwArc
(

2303 
Di•œy
* ,

2304 
DøwabÀ
 ,

2305 
GC
 ,

2314 
	`XDøwArcs
(

2315 
Di•œy
* ,

2316 
DøwabÀ
 ,

2317 
GC
 ,

2318 
XArc
* ,

2322 
	`XDøwImageSåög
(

2323 
Di•œy
* ,

2324 
DøwabÀ
 ,

2325 
GC
 ,

2328 
_Xc⁄°
 * ,

2332 
	`XDøwImageSåög16
(

2333 
Di•œy
* ,

2334 
DøwabÀ
 ,

2335 
GC
 ,

2338 
_Xc⁄°
 
XCh¨2b
* ,

2342 
	`XDøwLöe
(

2343 
Di•œy
* ,

2344 
DøwabÀ
 ,

2345 
GC
 ,

2352 
	`XDøwLöes
(

2353 
Di•œy
* ,

2354 
DøwabÀ
 ,

2355 
GC
 ,

2356 
XPoöt
* ,

2361 
	`XDøwPoöt
(

2362 
Di•œy
* ,

2363 
DøwabÀ
 ,

2364 
GC
 ,

2369 
	`XDøwPoöts
(

2370 
Di•œy
* ,

2371 
DøwabÀ
 ,

2372 
GC
 ,

2373 
XPoöt
* ,

2378 
	`XDøwRe˘™gÀ
(

2379 
Di•œy
* ,

2380 
DøwabÀ
 ,

2381 
GC
 ,

2388 
	`XDøwRe˘™gÀs
(

2389 
Di•œy
* ,

2390 
DøwabÀ
 ,

2391 
GC
 ,

2392 
XRe˘™gÀ
* ,

2396 
	`XDøwSegmíts
(

2397 
Di•œy
* ,

2398 
DøwabÀ
 ,

2399 
GC
 ,

2400 
XSegmít
* ,

2404 
	`XDøwSåög
(

2405 
Di•œy
* ,

2406 
DøwabÀ
 ,

2407 
GC
 ,

2410 
_Xc⁄°
 * ,

2414 
	`XDøwSåög16
(

2415 
Di•œy
* ,

2416 
DøwabÀ
 ,

2417 
GC
 ,

2420 
_Xc⁄°
 
XCh¨2b
* ,

2424 
	`XDøwText
(

2425 
Di•œy
* ,

2426 
DøwabÀ
 ,

2427 
GC
 ,

2430 
XTextIãm
* ,

2434 
	`XDøwText16
(

2435 
Di•œy
* ,

2436 
DøwabÀ
 ,

2437 
GC
 ,

2440 
XTextIãm16
* ,

2444 
	`XE«bÀAc˚ssC⁄åﬁ
(

2445 
Di•œy
*

2448 
	`XEvítsQueued
(

2449 
Di•œy
* ,

2453 
Sètus
 
	`XFëchName
(

2454 
Di•œy
* ,

2455 
Wödow
 ,

2459 
	`XFûlArc
(

2460 
Di•œy
* ,

2461 
DøwabÀ
 ,

2462 
GC
 ,

2471 
	`XFûlArcs
(

2472 
Di•œy
* ,

2473 
DøwabÀ
 ,

2474 
GC
 ,

2475 
XArc
* ,

2479 
	`XFûlPﬁyg⁄
(

2480 
Di•œy
* ,

2481 
DøwabÀ
 ,

2482 
GC
 ,

2483 
XPoöt
* ,

2489 
	`XFûlRe˘™gÀ
(

2490 
Di•œy
* ,

2491 
DøwabÀ
 ,

2492 
GC
 ,

2499 
	`XFûlRe˘™gÀs
(

2500 
Di•œy
* ,

2501 
DøwabÀ
 ,

2502 
GC
 ,

2503 
XRe˘™gÀ
* ,

2507 
	`XFlush
(

2508 
Di•œy
*

2511 
	`XF‹˚S¸ìnSavî
(

2512 
Di•œy
* ,

2516 
	`XFªe
(

2520 
	`XFªeCﬁ‹m≠
(

2521 
Di•œy
* ,

2522 
Cﬁ‹m≠


2525 
	`XFªeCﬁ‹s
(

2526 
Di•œy
* ,

2527 
Cﬁ‹m≠
 ,

2533 
	`XFªeCurs‹
(

2534 
Di•œy
* ,

2535 
Curs‹


2538 
	`XFªeExãnsi⁄Li°
(

2542 
	`XFªeF⁄t
(

2543 
Di•œy
* ,

2544 
XF⁄tSåu˘
*

2547 
	`XFªeF⁄tInfo
(

2549 
XF⁄tSåu˘
* ,

2553 
	`XFªeF⁄tNames
(

2557 
	`XFªeF⁄tP©h
(

2561 
	`XFªeGC
(

2562 
Di•œy
* ,

2563 
GC


2566 
	`XFªeModifõrm≠
(

2567 
XModifõrKeym≠
*

2570 
	`XFªePixm≠
(

2571 
Di•œy
* ,

2572 
Pixm≠


2575 
	`XGeomëry
(

2576 
Di•œy
* ,

2578 
_Xc⁄°
 * ,

2579 
_Xc⁄°
 * ,

2591 
	`XGëEº‹D©aba£Text
(

2592 
Di•œy
* ,

2593 
_Xc⁄°
 * ,

2594 
_Xc⁄°
 * ,

2595 
_Xc⁄°
 * ,

2600 
	`XGëEº‹Text
(

2601 
Di•œy
* ,

2607 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2608 
XF⁄tSåu˘
* ,

2609 
Atom
 ,

2613 
Sètus
 
	`XGëGCVÆues
(

2614 
Di•œy
* ,

2615 
GC
 ,

2617 
XGCVÆues
*

2620 
Sètus
 
	`XGëGeomëry
(

2621 
Di•œy
* ,

2622 
DøwabÀ
 ,

2623 
Wödow
* ,

2632 
Sètus
 
	`XGëIc⁄Name
(

2633 
Di•œy
* ,

2634 
Wödow
 ,

2638 
	`XGëI≈utFocus
(

2639 
Di•œy
* ,

2640 
Wödow
* ,

2644 
	`XGëKeybﬂrdC⁄åﬁ
(

2645 
Di•œy
* ,

2646 
XKeybﬂrdSèã
*

2649 
	`XGëPoöãrC⁄åﬁ
(

2650 
Di•œy
* ,

2656 
	`XGëPoöãrM≠pög
(

2657 
Di•œy
* ,

2662 
	`XGëS¸ìnSavî
(

2663 
Di•œy
* ,

2670 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2671 
Di•œy
* ,

2672 
Wödow
 ,

2673 
Wödow
*

2676 
	`XGëWödowPr›îty
(

2677 
Di•œy
* ,

2678 
Wödow
 ,

2679 
Atom
 ,

2682 
Boﬁ
 ,

2683 
Atom
 ,

2684 
Atom
* ,

2691 
Sètus
 
	`XGëWödowAâribuãs
(

2692 
Di•œy
* ,

2693 
Wödow
 ,

2694 
XWödowAâribuãs
*

2697 
	`XGøbBuâ⁄
(

2698 
Di•œy
* ,

2701 
Wödow
 ,

2702 
Boﬁ
 ,

2706 
Wödow
 ,

2707 
Curs‹


2710 
	`XGøbKey
(

2711 
Di•œy
* ,

2714 
Wödow
 ,

2715 
Boﬁ
 ,

2720 
	`XGøbKeybﬂrd
(

2721 
Di•œy
* ,

2722 
Wödow
 ,

2723 
Boﬁ
 ,

2726 
Time


2729 
	`XGøbPoöãr
(

2730 
Di•œy
* ,

2731 
Wödow
 ,

2732 
Boﬁ
 ,

2736 
Wödow
 ,

2737 
Curs‹
 ,

2738 
Time


2741 
	`XGøbSîvî
(

2742 
Di•œy
*

2745 
	`XHeightMMOfS¸ìn
(

2746 
S¸ìn
*

2749 
	`XHeightOfS¸ìn
(

2750 
S¸ìn
*

2753 
	`XIfEvít
(

2754 
Di•œy
* ,

2755 
XEvít
* ,

2756 
	$Boﬁ
 (*) (

2757 
Di•œy
* ,

2758 
XEvít
* ,

2759 
XPoöãr


2761 
XPoöãr


2764 
	`XImageByãOrdî
(

2765 
Di•œy
*

2768 
	`XIn°ÆlCﬁ‹m≠
(

2769 
Di•œy
* ,

2770 
Cﬁ‹m≠


2773 
KeyCode
 
	`XKeysymToKeycode
(

2774 
Di•œy
* ,

2775 
KeySym


2778 
	`XKûlClõ¡
(

2779 
Di•œy
* ,

2780 
XID


2783 
Sètus
 
	`XLookupCﬁ‹
(

2784 
Di•œy
* ,

2785 
Cﬁ‹m≠
 ,

2786 
_Xc⁄°
 * ,

2787 
XCﬁ‹
* ,

2788 
XCﬁ‹
*

2791 
	`XLowîWödow
(

2792 
Di•œy
* ,

2793 
Wödow


2796 
	`XM≠Rai£d
(

2797 
Di•œy
* ,

2798 
Wödow


2801 
	`XM≠Subwödows
(

2802 
Di•œy
* ,

2803 
Wödow


2806 
	`XM≠Wödow
(

2807 
Di•œy
* ,

2808 
Wödow


2811 
	`XMaskEvít
(

2812 
Di•œy
* ,

2814 
XEvít
*

2817 
	`XMaxCm≠sOfS¸ìn
(

2818 
S¸ìn
*

2821 
	`XMöCm≠sOfS¸ìn
(

2822 
S¸ìn
*

2825 
	`XMoveResizeWödow
(

2826 
Di•œy
* ,

2827 
Wödow
 ,

2834 
	`XMoveWödow
(

2835 
Di•œy
* ,

2836 
Wödow
 ,

2841 
	`XNextEvít
(

2842 
Di•œy
* ,

2843 
XEvít
*

2846 
	`XNoOp
(

2847 
Di•œy
*

2850 
Sètus
 
	`XP¨£Cﬁ‹
(

2851 
Di•œy
* ,

2852 
Cﬁ‹m≠
 ,

2853 
_Xc⁄°
 * ,

2854 
XCﬁ‹
*

2857 
	`XP¨£Geomëry
(

2858 
_Xc⁄°
 * ,

2865 
	`XPìkEvít
(

2866 
Di•œy
* ,

2867 
XEvít
*

2870 
	`XPìkIfEvít
(

2871 
Di•œy
* ,

2872 
XEvít
* ,

2873 
	$Boﬁ
 (*) (

2874 
Di•œy
* ,

2875 
XEvít
* ,

2876 
XPoöãr


2878 
XPoöãr


2881 
	`XPídög
(

2882 
Di•œy
*

2885 
	`XPœ√sOfS¸ìn
(

2886 
S¸ìn
*

2889 
	`XPrŸocﬁRevisi⁄
(

2890 
Di•œy
*

2893 
	`XPrŸocﬁVîsi⁄
(

2894 
Di•œy
*

2898 
	`XPutBackEvít
(

2899 
Di•œy
* ,

2900 
XEvít
*

2903 
	`XPutImage
(

2904 
Di•œy
* ,

2905 
DøwabÀ
 ,

2906 
GC
 ,

2907 
XImage
* ,

2916 
	`XQLígth
(

2917 
Di•œy
*

2920 
Sètus
 
	`XQuîyBe°Curs‹
(

2921 
Di•œy
* ,

2922 
DøwabÀ
 ,

2929 
Sètus
 
	`XQuîyBe°Size
(

2930 
Di•œy
* ,

2932 
DøwabÀ
 ,

2939 
Sètus
 
	`XQuîyBe°Stù∂e
(

2940 
Di•œy
* ,

2941 
DøwabÀ
 ,

2948 
Sètus
 
	`XQuîyBe°Tûe
(

2949 
Di•œy
* ,

2950 
DøwabÀ
 ,

2957 
	`XQuîyCﬁ‹
(

2958 
Di•œy
* ,

2959 
Cﬁ‹m≠
 ,

2960 
XCﬁ‹
*

2963 
	`XQuîyCﬁ‹s
(

2964 
Di•œy
* ,

2965 
Cﬁ‹m≠
 ,

2966 
XCﬁ‹
* ,

2970 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2971 
Di•œy
* ,

2972 
_Xc⁄°
 * ,

2978 
	`XQuîyKeym≠
(

2979 
Di•œy
* ,

2983 
Boﬁ
 
	`XQuîyPoöãr
(

2984 
Di•œy
* ,

2985 
Wödow
 ,

2986 
Wödow
* ,

2987 
Wödow
* ,

2995 
	`XQuîyTextExã¡s
(

2996 
Di•œy
* ,

2997 
XID
 ,

2998 
_Xc⁄°
 * ,

3003 
XCh¨Såu˘
*

3006 
	`XQuîyTextExã¡s16
(

3007 
Di•œy
* ,

3008 
XID
 ,

3009 
_Xc⁄°
 
XCh¨2b
* ,

3014 
XCh¨Såu˘
*

3017 
Sètus
 
	`XQuîyTªe
(

3018 
Di•œy
* ,

3019 
Wödow
 ,

3020 
Wödow
* ,

3021 
Wödow
* ,

3022 
Wödow
** ,

3026 
	`XRai£Wödow
(

3027 
Di•œy
* ,

3028 
Wödow


3031 
	`XRódBôm≠Fûe
(

3032 
Di•œy
* ,

3033 
DøwabÀ
 ,

3034 
_Xc⁄°
 * ,

3037 
Pixm≠
* ,

3042 
	`XRódBôm≠FûeD©a
(

3043 
_Xc⁄°
 * ,

3051 
	`XRebödKeysym
(

3052 
Di•œy
* ,

3053 
KeySym
 ,

3054 
KeySym
* ,

3056 
_Xc⁄°
 * ,

3060 
	`XRecﬁ‹Curs‹
(

3061 
Di•œy
* ,

3062 
Curs‹
 ,

3063 
XCﬁ‹
* ,

3064 
XCﬁ‹
*

3067 
	`XRe‰eshKeybﬂrdM≠pög
(

3068 
XM≠pögEvít
*

3071 
	`XRemoveFromSaveSë
(

3072 
Di•œy
* ,

3073 
Wödow


3076 
	`XRemoveHo°
(

3077 
Di•œy
* ,

3078 
XHo°Addªss
*

3081 
	`XRemoveHo°s
(

3082 
Di•œy
* ,

3083 
XHo°Addªss
* ,

3087 
	`XRï¨ítWödow
(

3088 
Di•œy
* ,

3089 
Wödow
 ,

3090 
Wödow
 ,

3095 
	`XRe£tS¸ìnSavî
(

3096 
Di•œy
*

3099 
	`XResizeWödow
(

3100 
Di•œy
* ,

3101 
Wödow
 ,

3106 
	`XRe°ackWödows
(

3107 
Di•œy
* ,

3108 
Wödow
* ,

3112 
	`XRŸ©eBuf„rs
(

3113 
Di•œy
* ,

3117 
	`XRŸ©eWödowPr›îtõs
(

3118 
Di•œy
* ,

3119 
Wödow
 ,

3120 
Atom
* ,

3125 
	`XS¸ìnCou¡
(

3126 
Di•œy
*

3129 
	`XSñe˘I≈ut
(

3130 
Di•œy
* ,

3131 
Wödow
 ,

3135 
Sètus
 
	`XSídEvít
(

3136 
Di•œy
* ,

3137 
Wödow
 ,

3138 
Boﬁ
 ,

3140 
XEvít
*

3143 
	`XSëAc˚ssC⁄åﬁ
(

3144 
Di•œy
* ,

3148 
	`XSëArcMode
(

3149 
Di•œy
* ,

3150 
GC
 ,

3154 
	`XSëBackground
(

3155 
Di•œy
* ,

3156 
GC
 ,

3160 
	`XSëClùMask
(

3161 
Di•œy
* ,

3162 
GC
 ,

3163 
Pixm≠


3166 
	`XSëClùOrigö
(

3167 
Di•œy
* ,

3168 
GC
 ,

3173 
	`XSëClùRe˘™gÀs
(

3174 
Di•œy
* ,

3175 
GC
 ,

3178 
XRe˘™gÀ
* ,

3183 
	`XSëClo£DownMode
(

3184 
Di•œy
* ,

3188 
	`XSëComm™d
(

3189 
Di•œy
* ,

3190 
Wödow
 ,

3195 
	`XSëDashes
(

3196 
Di•œy
* ,

3197 
GC
 ,

3199 
_Xc⁄°
 * ,

3203 
	`XSëFûlRuÀ
(

3204 
Di•œy
* ,

3205 
GC
 ,

3209 
	`XSëFûlStyÀ
(

3210 
Di•œy
* ,

3211 
GC
 ,

3215 
	`XSëF⁄t
(

3216 
Di•œy
* ,

3217 
GC
 ,

3218 
F⁄t


3221 
	`XSëF⁄tP©h
(

3222 
Di•œy
* ,

3227 
	`XSëF‹eground
(

3228 
Di•œy
* ,

3229 
GC
 ,

3233 
	`XSëFun˘i⁄
(

3234 
Di•œy
* ,

3235 
GC
 ,

3239 
	`XSëGøphicsExposuªs
(

3240 
Di•œy
* ,

3241 
GC
 ,

3242 
Boﬁ


3245 
	`XSëIc⁄Name
(

3246 
Di•œy
* ,

3247 
Wödow
 ,

3248 
_Xc⁄°
 *

3251 
	`XSëI≈utFocus
(

3252 
Di•œy
* ,

3253 
Wödow
 ,

3255 
Time


3258 
	`XSëLöeAâribuãs
(

3259 
Di•œy
* ,

3260 
GC
 ,

3267 
	`XSëModifõrM≠pög
(

3268 
Di•œy
* ,

3269 
XModifõrKeym≠
*

3272 
	`XSëPœ√Mask
(

3273 
Di•œy
* ,

3274 
GC
 ,

3278 
	`XSëPoöãrM≠pög
(

3279 
Di•œy
* ,

3280 
_Xc⁄°
 * ,

3284 
	`XSëS¸ìnSavî
(

3285 
Di•œy
* ,

3292 
	`XSëSñe˘i⁄Ow√r
(

3293 
Di•œy
* ,

3294 
Atom
 ,

3295 
Wödow
 ,

3296 
Time


3299 
	`XSëSèã
(

3300 
Di•œy
* ,

3301 
GC
 ,

3308 
	`XSëStù∂e
(

3309 
Di•œy
* ,

3310 
GC
 ,

3311 
Pixm≠


3314 
	`XSëSubwödowMode
(

3315 
Di•œy
* ,

3316 
GC
 ,

3320 
	`XSëTSOrigö
(

3321 
Di•œy
* ,

3322 
GC
 ,

3327 
	`XSëTûe
(

3328 
Di•œy
* ,

3329 
GC
 ,

3330 
Pixm≠


3333 
	`XSëWödowBackground
(

3334 
Di•œy
* ,

3335 
Wödow
 ,

3339 
	`XSëWödowBackgroundPixm≠
(

3340 
Di•œy
* ,

3341 
Wödow
 ,

3342 
Pixm≠


3345 
	`XSëWödowB‹dî
(

3346 
Di•œy
* ,

3347 
Wödow
 ,

3351 
	`XSëWödowB‹dîPixm≠
(

3352 
Di•œy
* ,

3353 
Wödow
 ,

3354 
Pixm≠


3357 
	`XSëWödowB‹dîWidth
(

3358 
Di•œy
* ,

3359 
Wödow
 ,

3363 
	`XSëWödowCﬁ‹m≠
(

3364 
Di•œy
* ,

3365 
Wödow
 ,

3366 
Cﬁ‹m≠


3369 
	`XSt‹eBuf„r
(

3370 
Di•œy
* ,

3371 
_Xc⁄°
 * ,

3376 
	`XSt‹eByãs
(

3377 
Di•œy
* ,

3378 
_Xc⁄°
 * ,

3382 
	`XSt‹eCﬁ‹
(

3383 
Di•œy
* ,

3384 
Cﬁ‹m≠
 ,

3385 
XCﬁ‹
*

3388 
	`XSt‹eCﬁ‹s
(

3389 
Di•œy
* ,

3390 
Cﬁ‹m≠
 ,

3391 
XCﬁ‹
* ,

3395 
	`XSt‹eName
(

3396 
Di•œy
* ,

3397 
Wödow
 ,

3398 
_Xc⁄°
 *

3401 
	`XSt‹eNamedCﬁ‹
(

3402 
Di•œy
* ,

3403 
Cﬁ‹m≠
 ,

3404 
_Xc⁄°
 * ,

3409 
	`XSync
(

3410 
Di•œy
* ,

3411 
Boﬁ


3414 
	`XTextExã¡s
(

3415 
XF⁄tSåu˘
* ,

3416 
_Xc⁄°
 * ,

3421 
XCh¨Såu˘
*

3424 
	`XTextExã¡s16
(

3425 
XF⁄tSåu˘
* ,

3426 
_Xc⁄°
 
XCh¨2b
* ,

3431 
XCh¨Såu˘
*

3434 
	`XTextWidth
(

3435 
XF⁄tSåu˘
* ,

3436 
_Xc⁄°
 * ,

3440 
	`XTextWidth16
(

3441 
XF⁄tSåu˘
* ,

3442 
_Xc⁄°
 
XCh¨2b
* ,

3446 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3447 
Di•œy
* ,

3448 
Wödow
 ,

3449 
Wödow
 ,

3454 
Wödow
*

3457 
	`XUndeföeCurs‹
(

3458 
Di•œy
* ,

3459 
Wödow


3462 
	`XUngøbBuâ⁄
(

3463 
Di•œy
* ,

3466 
Wödow


3469 
	`XUngøbKey
(

3470 
Di•œy
* ,

3473 
Wödow


3476 
	`XUngøbKeybﬂrd
(

3477 
Di•œy
* ,

3478 
Time


3481 
	`XUngøbPoöãr
(

3482 
Di•œy
* ,

3483 
Time


3486 
	`XUngøbSîvî
(

3487 
Di•œy
*

3490 
	`XUnö°ÆlCﬁ‹m≠
(

3491 
Di•œy
* ,

3492 
Cﬁ‹m≠


3495 
	`XU∆ﬂdF⁄t
(

3496 
Di•œy
* ,

3497 
F⁄t


3500 
	`XUnm≠Subwödows
(

3501 
Di•œy
* ,

3502 
Wödow


3505 
	`XUnm≠Wödow
(

3506 
Di•œy
* ,

3507 
Wödow


3510 
	`XVíd‹Rñó£
(

3511 
Di•œy
*

3514 
	`XW¨pPoöãr
(

3515 
Di•œy
* ,

3516 
Wödow
 ,

3517 
Wödow
 ,

3526 
	`XWidthMMOfS¸ìn
(

3527 
S¸ìn
*

3530 
	`XWidthOfS¸ìn
(

3531 
S¸ìn
*

3534 
	`XWödowEvít
(

3535 
Di•œy
* ,

3536 
Wödow
 ,

3538 
XEvít
*

3541 
	`XWrôeBôm≠Fûe
(

3542 
Di•œy
* ,

3543 
_Xc⁄°
 * ,

3544 
Pixm≠
 ,

3551 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3553 *
	`XSëLoˇÀModifõrs
(

3557 
XOM
 
	`XO≥nOM
(

3558 
Di•œy
* ,

3559 
_XrmHashBuckëRec
* ,

3560 
_Xc⁄°
 * ,

3561 
_Xc⁄°
 *

3564 
Sètus
 
	`XClo£OM
(

3565 
XOM


3568 *
	$XSëOMVÆues
(

3569 
XOM
 ,

3571 Ë
	`_X_SENTINEL
(0);

3573 *
	$XGëOMVÆues
(

3574 
XOM
 ,

3576 Ë
	`_X_SENTINEL
(0);

3578 
Di•œy
 *
	`XDi•œyOfOM
(

3579 
XOM


3582 *
	`XLoˇÀOfOM
(

3583 
XOM


3586 
XOC
 
	$XCª©eOC
(

3587 
XOM
 ,

3589 Ë
	`_X_SENTINEL
(0);

3591 
	`XDe°royOC
(

3592 
XOC


3595 
XOM
 
	`XOMOfOC
(

3596 
XOC


3599 *
	$XSëOCVÆues
(

3600 
XOC
 ,

3602 Ë
	`_X_SENTINEL
(0);

3604 *
	$XGëOCVÆues
(

3605 
XOC
 ,

3607 Ë
	`_X_SENTINEL
(0);

3609 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3610 
Di•œy
* ,

3611 
_Xc⁄°
 * ,

3617 
	`XFªeF⁄tSë
(

3618 
Di•œy
* ,

3619 
XF⁄tSë


3622 
	`XF⁄tsOfF⁄tSë
(

3623 
XF⁄tSë
 ,

3624 
XF⁄tSåu˘
*** ,

3628 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3629 
XF⁄tSë


3632 *
	`XLoˇÀOfF⁄tSë
(

3633 
XF⁄tSë


3636 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3637 
XF⁄tSë


3640 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3641 
XF⁄tSë


3644 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3645 
XF⁄tSë


3648 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3649 
XF⁄tSë


3652 
	`XmbTextEsˇ≥mít
(

3653 
XF⁄tSë
 ,

3654 
_Xc⁄°
 * ,

3658 
	`XwcTextEsˇ≥mít
(

3659 
XF⁄tSë
 ,

3660 
_Xc⁄°
 
wch¨_t
* ,

3664 
	`Xutf8TextEsˇ≥mít
(

3665 
XF⁄tSë
 ,

3666 
_Xc⁄°
 * ,

3670 
	`XmbTextExã¡s
(

3671 
XF⁄tSë
 ,

3672 
_Xc⁄°
 * ,

3674 
XRe˘™gÀ
* ,

3675 
XRe˘™gÀ
*

3678 
	`XwcTextExã¡s
(

3679 
XF⁄tSë
 ,

3680 
_Xc⁄°
 
wch¨_t
* ,

3682 
XRe˘™gÀ
* ,

3683 
XRe˘™gÀ
*

3686 
	`Xutf8TextExã¡s
(

3687 
XF⁄tSë
 ,

3688 
_Xc⁄°
 * ,

3690 
XRe˘™gÀ
* ,

3691 
XRe˘™gÀ
*

3694 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3695 
XF⁄tSë
 ,

3696 
_Xc⁄°
 * ,

3698 
XRe˘™gÀ
* ,

3699 
XRe˘™gÀ
* ,

3702 
XRe˘™gÀ
* ,

3703 
XRe˘™gÀ
*

3706 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3707 
XF⁄tSë
 ,

3708 
_Xc⁄°
 
wch¨_t
* ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
* ,

3714 
XRe˘™gÀ
* ,

3715 
XRe˘™gÀ
*

3718 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3719 
XF⁄tSë
 ,

3720 
_Xc⁄°
 * ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
* ,

3726 
XRe˘™gÀ
* ,

3727 
XRe˘™gÀ
*

3730 
	`XmbDøwText
(

3731 
Di•œy
* ,

3732 
DøwabÀ
 ,

3733 
GC
 ,

3736 
XmbTextIãm
* ,

3740 
	`XwcDøwText
(

3741 
Di•œy
* ,

3742 
DøwabÀ
 ,

3743 
GC
 ,

3746 
XwcTextIãm
* ,

3750 
	`Xutf8DøwText
(

3751 
Di•œy
* ,

3752 
DøwabÀ
 ,

3753 
GC
 ,

3756 
XmbTextIãm
* ,

3760 
	`XmbDøwSåög
(

3761 
Di•œy
* ,

3762 
DøwabÀ
 ,

3763 
XF⁄tSë
 ,

3764 
GC
 ,

3767 
_Xc⁄°
 * ,

3771 
	`XwcDøwSåög
(

3772 
Di•œy
* ,

3773 
DøwabÀ
 ,

3774 
XF⁄tSë
 ,

3775 
GC
 ,

3778 
_Xc⁄°
 
wch¨_t
* ,

3782 
	`Xutf8DøwSåög
(

3783 
Di•œy
* ,

3784 
DøwabÀ
 ,

3785 
XF⁄tSë
 ,

3786 
GC
 ,

3789 
_Xc⁄°
 * ,

3793 
	`XmbDøwImageSåög
(

3794 
Di•œy
* ,

3795 
DøwabÀ
 ,

3796 
XF⁄tSë
 ,

3797 
GC
 ,

3800 
_Xc⁄°
 * ,

3804 
	`XwcDøwImageSåög
(

3805 
Di•œy
* ,

3806 
DøwabÀ
 ,

3807 
XF⁄tSë
 ,

3808 
GC
 ,

3811 
_Xc⁄°
 
wch¨_t
* ,

3815 
	`Xutf8DøwImageSåög
(

3816 
Di•œy
* ,

3817 
DøwabÀ
 ,

3818 
XF⁄tSë
 ,

3819 
GC
 ,

3822 
_Xc⁄°
 * ,

3826 
XIM
 
	`XO≥nIM
(

3827 
Di•œy
* ,

3828 
_XrmHashBuckëRec
* ,

3833 
Sètus
 
	`XClo£IM
(

3834 
XIM


3837 *
	$XGëIMVÆues
(

3838 
XIM
 , ...

3839 Ë
	`_X_SENTINEL
(0);

3841 *
	$XSëIMVÆues
(

3842 
XIM
 , ...

3843 Ë
	`_X_SENTINEL
(0);

3845 
Di•œy
 *
	`XDi•œyOfIM
(

3846 
XIM


3849 *
	`XLoˇÀOfIM
(

3850 
XIM


3853 
XIC
 
	$XCª©eIC
(

3854 
XIM
 , ...

3855 Ë
	`_X_SENTINEL
(0);

3857 
	`XDe°royIC
(

3858 
XIC


3861 
	`XSëICFocus
(

3862 
XIC


3865 
	`XUn£tICFocus
(

3866 
XIC


3869 
wch¨_t
 *
	`XwcRe£tIC
(

3870 
XIC


3873 *
	`XmbRe£tIC
(

3874 
XIC


3877 *
	`Xutf8Re£tIC
(

3878 
XIC


3881 *
	$XSëICVÆues
(

3882 
XIC
 , ...

3883 Ë
	`_X_SENTINEL
(0);

3885 *
	$XGëICVÆues
(

3886 
XIC
 , ...

3887 Ë
	`_X_SENTINEL
(0);

3889 
XIM
 
	`XIMOfIC
(

3890 
XIC


3893 
Boﬁ
 
	`XFûãrEvít
(

3894 
XEvít
* ,

3895 
Wödow


3898 
	`XmbLookupSåög
(

3899 
XIC
 ,

3900 
XKeyPªs£dEvít
* ,

3903 
KeySym
* ,

3904 
Sètus
*

3907 
	`XwcLookupSåög
(

3908 
XIC
 ,

3909 
XKeyPªs£dEvít
* ,

3910 
wch¨_t
* ,

3912 
KeySym
* ,

3913 
Sètus
*

3916 
	`Xutf8LookupSåög
(

3917 
XIC
 ,

3918 
XKeyPªs£dEvít
* ,

3921 
KeySym
* ,

3922 
Sètus
*

3925 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3927 Ë
	`_X_SENTINEL
(0);

3931 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3932 
Di•œy
* ,

3933 
_XrmHashBuckëRec
* ,

3936 
XIDProc
 ,

3937 
XPoöãr


3940 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3941 
Di•œy
* ,

3942 
_XrmHashBuckëRec
* ,

3945 
XIDProc
 ,

3946 
XPoöãr


3949 (*
	tXC⁄√˘i⁄W©chProc
)(

3950 
	tDi•œy
* ,

3951 
	tXPoöãr
 ,

3953 
	tBoﬁ
 ,

3954 
	tXPoöãr
*

3958 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3959 
Di•œy
* ,

3964 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3965 
Di•œy
* ,

3969 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3970 
Di•œy
* ,

3971 
XC⁄√˘i⁄W©chProc
 ,

3972 
XPoöãr


3975 
	`XRemoveC⁄√˘i⁄W©ch
(

3976 
Di•œy
* ,

3977 
XC⁄√˘i⁄W©chProc
 ,

3978 
XPoöãr


3981 
	`XSëAuth‹iz©i⁄
(

3988 
	`_Xmbtowc
(

3989 
wch¨_t
 * ,

3994 
	`_Xw˘omb
(

3996 
wch¨_t


3999 
Boﬁ
 
	`XGëEvítD©a
(

4000 
Di•œy
* ,

4001 
XGíîicEvítCookõ
*

4004 
	`XFªeEvítD©a
(

4005 
Di•œy
* ,

4006 
XGíîicEvítCookõ
*

4009 #ifde‡
__˛™g__


4010 #¥agm®
˛™g
 
dügno°ic
 
p›


4013 
_XFUNCPROTOEND


	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/X11/extensions/XShm.h

29 #i‚de‡
_XSHM_H_


30 
	#_XSHM_H_


	)

32 
	~<X11/Xfun˝rŸo.h
>

33 
	~<X11/exãnsi⁄s/shm.h
>

35 #i‚de‡
_XSHM_SERVER_


36 
	tShmSeg
;

39 
	mty≥
;

40 
	m£rül
;

41 
Boﬁ
 
	m£nd_evít
;

42 
Di•œy
 *
	mdi•œy
;

43 
DøwabÀ
 
	mdøwabÀ
;

44 
	mmaj‹_code
;

45 
	mmö‹_code
;

46 
ShmSeg
 
	mshm£g
;

47 
	moff£t
;

48 } 
	tXShmCom∂ëi⁄Evít
;

51 
ShmSeg
 
	mshm£g
;

52 
	mshmid
;

53 *
	mshmaddr
;

54 
Boﬁ
 
	mªadO∆y
;

55 } 
	tXShmSegmítInfo
;

57 
_XFUNCPROTOBEGIN


59 
Boﬁ
 
XShmQuîyExãnsi⁄
(

60 
Di•œy
*

63 
XShmGëEvítBa£
(

64 
Di•œy
*

67 
Boﬁ
 
XShmQuîyVîsi⁄
(

68 
Di•œy
* ,

71 
Boﬁ
*

74 
XShmPixm≠F‹m©
(

75 
Di•œy
*

78 
Boﬁ
 
XShmAâach
(

79 
Di•œy
* ,

80 
XShmSegmítInfo
*

83 
Boﬁ
 
XShmDëach
(

84 
Di•œy
* ,

85 
XShmSegmítInfo
*

88 
Boﬁ
 
XShmPutImage
(

89 
Di•œy
* ,

90 
DøwabÀ
 ,

91 
GC
 ,

92 
XImage
* ,

99 
Boﬁ


102 
Boﬁ
 
XShmGëImage
(

103 
Di•œy
* ,

104 
DøwabÀ
 ,

105 
XImage
* ,

111 
XImage
 *
XShmCª©eImage
(

112 
Di•œy
* ,

113 
VisuÆ
* ,

117 
XShmSegmítInfo
* ,

122 
Pixm≠
 
XShmCª©ePixm≠
(

123 
Di•œy
* ,

124 
DøwabÀ
 ,

126 
XShmSegmítInfo
* ,

132 
	g_XFUNCPROTOEND


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‚de‡
__has_©åibuã


81 
	#__has_©åibuã
(
x
Ë0

	)

83 #i‚de‡
__has_„©uª


84 
	#__has_„©uª
(
x
Ë0

	)

86 #i‚de‡
__has_exãnsi⁄


87 
	#__has_exãnsi⁄
(
x
Ë0

	)

91 #i‡
__has_©åibuã
(
__£¡öñ__
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))

92 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

94 
	#_X_SENTINEL
(
x
)

	)

98 #i‡(
__has_©åibuã
(
visibûôy
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))) \

99 && !
deföed
(
__CYGWIN__
Ë&& !
	$deföed
(
__MINGW32__
)

100 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

101 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

102 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

103 #ñi‡
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

104 
	#_X_EXPORT
 
__globÆ


	)

105 
	#_X_HIDDEN
 
__hiddí


	)

106 
	#_X_INTERNAL
 
__hiddí


	)

108 
	#_X_EXPORT


	)

109 
	#_X_HIDDEN


	)

110 
	#_X_INTERNAL


	)

115 #i‡
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

116 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

117 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

119 
	#_X_LIKELY
(
x
Ë(x)

	)

120 
	#_X_UNLIKELY
(
x
Ë(x)

	)

125 #i‡
	`__has_©åibuã
(
__cﬁd__
) || \

126 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403))

127 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

129 
	#_X_COLD


	)

133 #i‡
	`__has_©åibuã
(
dïªˇãd
) \

134 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)) \

135 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5130))

136 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

138 
	#_X_DEPRECATED


	)

142 #i‡
	`__has_exãnsi⁄
(
©åibuã_dïªˇãd_wôh_mesßge
) || \

143 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ >5Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 >= 5))))

144 
	#_X_DEPRECATED_MSG
(
_msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(_msg)))

	)

146 
	#_X_DEPRECATED_MSG
(
_msg
Ë
_X_DEPRECATED


	)

150 #i‡
	`__has_©åibuã
(
n‹ëu∫
) \

151 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

152 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

153 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

155 
	#_X_NORETURN


	)

159 #i‡
	`__has_©åibuã
(
__f‹m©__
) \

160 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

161 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

163 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

169 #i‡
	`__has_©åibuã
(
n⁄nuŒ
) \

170 && 
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

171 
	#_X_NONNULL
(...Ë
	`__©åibuã__
((
	`n⁄nuŒ
(
__VA_ARGS__
)))

	)

172 #ñi‡
	`__has_©åibuã
(
n⁄nuŒ
) \

173 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

174 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

175 #ñi‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

176 
	#_X_NONNULL
(...Ë

	)

180 #i‡
	`__has_©åibuã
(
__unu£d__
) \

181 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

182 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

184 
	#_X_UNUSED


	)

190 #i‡
	`deföed
(
ölöe
) || \

191 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

192 (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

193 
	#_X_INLINE
 
ölöe


	)

194 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

195 
	#_X_INLINE
 
__ölöe__


	)

197 
	#_X_INLINE


	)

202 #i‚de‡
_X_RESTRICT_KYWD


203 #i‡
	`deföed
(
ª°ri˘
) || \

204 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

205 && !
	$deföed
(
__˝lu•lus
))

206 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

207 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

208 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

210 
	#_X_RESTRICT_KYWD


	)

215 #i‡
	`__has_©åibuã
(
no_ßnôize_thªad
)

216 
	#_X_NOTSAN
 
	`__©åibuã__
((
no_ßnôize_thªad
))

	)

218 
	#_X_NOTSAN


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/extensions/shm.h

29 #i‚de‡
_SHM_H_


30 
	#_SHM_H_


	)

32 
	#SHMNAME
 "MIT-SHM"

	)

34 
	#SHM_MAJOR_VERSION
 1

	)

35 
	#SHM_MINOR_VERSION
 2

	)

37 
	#ShmCom∂ëi⁄
 0

	)

38 
	#ShmNumbîEvíts
 (
ShmCom∂ëi⁄
 + 1)

	)

40 
	#BadShmSeg
 0

	)

41 
	#ShmNumbîEº‹s
 (
BadShmSeg
 + 1)

	)

	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
214
5158
c_maths/c_maths.h
c_maths/cos.c
c_maths/eq_solve_2nd.c
c_maths/eq_solve_4th.c
c_maths/free_mat.c
c_maths/libft.h
c_maths/matrix_add.c
c_maths/matrix_buffer.c
c_maths/matrix_copy.c
c_maths/matrix_det.c
c_maths/matrix_display.c
c_maths/matrix_dot_product.c
c_maths/matrix_init.c
c_maths/matrix_inverse.c
c_maths/matrix_new.c
c_maths/matrix_product.c
c_maths/matrix_put_in.c
c_maths/matrix_scalar_product.c
c_maths/matrix_sub.c
c_maths/matrix_transpose.c
c_maths/set_rotate.c
c_maths/set_scale.c
c_maths/set_translate.c
c_maths/sin.c
c_maths/vector_product.c
includes/c_maths.h
includes/fdf.h
includes/get_next_line.h
includes/libft.h
includes/mlx.h
includes/mlx_int.h
libft/ft_atoi.c
libft/ft_bzero.c
libft/ft_countwords.c
libft/ft_isalnum.c
libft/ft_isalpha.c
libft/ft_isascii.c
libft/ft_isdigit.c
libft/ft_isprint.c
libft/ft_itoa.c
libft/ft_lstnew.c
libft/ft_memalloc.c
libft/ft_memccpy.c
libft/ft_memchr.c
libft/ft_memcmp.c
libft/ft_memcpy.c
libft/ft_memdel.c
libft/ft_memmove.c
libft/ft_memset.c
libft/ft_putchar.c
libft/ft_putchar_fd.c
libft/ft_putendl.c
libft/ft_putendl_fd.c
libft/ft_putnbr.c
libft/ft_putnbr_fd.c
libft/ft_putstr.c
libft/ft_putstr_fd.c
libft/ft_strcat.c
libft/ft_strchr.c
libft/ft_strchr_len.c
libft/ft_strclr.c
libft/ft_strcmp.c
libft/ft_strcpy.c
libft/ft_strdel.c
libft/ft_strdup.c
libft/ft_strequ.c
libft/ft_striter.c
libft/ft_striteri.c
libft/ft_strjoin.c
libft/ft_strlcat.c
libft/ft_strlen.c
libft/ft_strmap.c
libft/ft_strmapi.c
libft/ft_strncat.c
libft/ft_strncmp.c
libft/ft_strncpy.c
libft/ft_strnequ.c
libft/ft_strnew.c
libft/ft_strnstr.c
libft/ft_strrchr.c
libft/ft_strrchr_len.c
libft/ft_strsplit.c
libft/ft_strstr.c
libft/ft_strsub.c
libft/ft_strtrim.c
libft/ft_strtrim_char.c
libft/ft_swap.c
libft/ft_tabmalloc.c
libft/ft_tolower.c
libft/ft_toupper.c
libft/get_next_line.c
libft/gnl_anti_leaks.c
libft/overflow_test.c
minilibx/minilibx/mlx.h
minilibx/minilibx/mlx_clear_window.c
minilibx/minilibx/mlx_destroy_image.c
minilibx/minilibx/mlx_destroy_window.c
minilibx/minilibx/mlx_expose_hook.c
minilibx/minilibx/mlx_flush_event.c
minilibx/minilibx/mlx_get_color_value.c
minilibx/minilibx/mlx_get_data_addr.c
minilibx/minilibx/mlx_hook.c
minilibx/minilibx/mlx_init.c
minilibx/minilibx/mlx_int.h
minilibx/minilibx/mlx_int_anti_resize_win.c
minilibx/minilibx/mlx_int_do_nothing.c
minilibx/minilibx/mlx_int_get_visual.c
minilibx/minilibx/mlx_int_param_event.c
minilibx/minilibx/mlx_int_set_win_event_mask.c
minilibx/minilibx/mlx_int_str_to_wordtab.c
minilibx/minilibx/mlx_int_wait_first_expose.c
minilibx/minilibx/mlx_key_hook.c
minilibx/minilibx/mlx_lib_xpm.c
minilibx/minilibx/mlx_loop.c
minilibx/minilibx/mlx_loop_hook.c
minilibx/minilibx/mlx_mouse_hook.c
minilibx/minilibx/mlx_new_image.c
minilibx/minilibx/mlx_new_window.c
minilibx/minilibx/mlx_pixel_put.c
minilibx/minilibx/mlx_put_image_to_window.c
minilibx/minilibx/mlx_rgb.c
minilibx/minilibx/mlx_string_put.c
minilibx/minilibx/mlx_xpm.c
minilibx/minilibx/test/main.c
minilibx/minilibx/test/new_win.c
minilibx/mlx.h
minilibx/mlx_clear_window.c
minilibx/mlx_destroy_image.c
minilibx/mlx_destroy_window.c
minilibx/mlx_expose_hook.c
minilibx/mlx_flush_event.c
minilibx/mlx_get_color_value.c
minilibx/mlx_get_data_addr.c
minilibx/mlx_hook.c
minilibx/mlx_init.c
minilibx/mlx_int.h
minilibx/mlx_int_anti_resize_win.c
minilibx/mlx_int_do_nothing.c
minilibx/mlx_int_get_visual.c
minilibx/mlx_int_param_event.c
minilibx/mlx_int_set_win_event_mask.c
minilibx/mlx_int_str_to_wordtab.c
minilibx/mlx_int_wait_first_expose.c
minilibx/mlx_key_hook.c
minilibx/mlx_lib_xpm.c
minilibx/mlx_loop.c
minilibx/mlx_loop_hook.c
minilibx/mlx_mouse_hook.c
minilibx/mlx_new_image.c
minilibx/mlx_new_window.c
minilibx/mlx_pixel_put.c
minilibx/mlx_put_image_to_window.c
minilibx/mlx_rgb.c
minilibx/mlx_string_put.c
minilibx/mlx_xpm.c
minilibx/test/main.c
minilibx/test/new_win.c
minilibx_macos/font.c
minilibx_macos/mlx.h
minilibx_macos/mlx_int.h
minilibx_macos/mlx_int_str_to_wordtab.c
minilibx_macos/mlx_new_window.h
minilibx_macos/mlx_rgb.c
minilibx_macos/mlx_shaders.c
minilibx_macos/mlx_xpm.c
sources/cam.c
sources/draw_line_triangle.c
sources/draw_link_face.c
sources/drawline.c
sources/exit.c
sources/hook.c
sources/hook_2.c
sources/hook_3.c
sources/hook_cam.c
sources/its_parse_time.c
sources/its_parse_time_2.c
sources/main.c
sources/map_adapt_to_cam.c
sources/maped.c
sources/mlx_env.c
sources/print_map.c
sources/print_map_end.c
sources/print_somthing.c
/usr/include/X11/Xlib.h
/usr/include/X11/Xutil.h
/usr/include/X11/extensions/XShm.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/math.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/extensions/shm.h
/usr/include/X11/keysym.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/stdint.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/X11/Xmd.h
/usr/include/X11/keysymdef.h
/usr/include/_G_config.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
